# Generated from Swift5Parser.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
from .SwiftSupport import SwiftSupport
import sys
from clone_detection.grammars.grammars_registry import PARSERS
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00c3")
        buf.write("\u0b3a\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7")
        buf.write("\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb")
        buf.write("\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe")
        buf.write("\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102")
        buf.write("\t\u0102\4\u0103\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105")
        buf.write("\4\u0106\t\u0106\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109")
        buf.write("\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c")
        buf.write("\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110")
        buf.write("\t\u0110\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113")
        buf.write("\4\u0114\t\u0114\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117")
        buf.write("\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a")
        buf.write("\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e")
        buf.write("\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121")
        buf.write("\4\u0122\t\u0122\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125")
        buf.write("\t\u0125\4\u0126\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128")
        buf.write("\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c")
        buf.write("\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f")
        buf.write("\4\u0130\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133")
        buf.write("\t\u0133\4\u0134\t\u0134\4\u0135\t\u0135\4\u0136\t\u0136")
        buf.write("\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a")
        buf.write("\t\u013a\4\u013b\t\u013b\3\2\5\2\u0278\n\2\3\2\3\2\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u0284\n\3\3\3\5\3\u0287")
        buf.write("\n\3\3\3\5\3\u028a\n\3\3\4\3\4\3\4\3\4\6\4\u0290\n\4\r")
        buf.write("\4\16\4\u0291\3\5\3\5\3\5\5\5\u0297\n\5\3\6\3\6\5\6\u029b")
        buf.write("\n\6\3\6\3\6\3\6\3\6\5\6\u02a1\n\6\3\6\3\6\3\7\3\7\3\7")
        buf.write("\3\7\3\b\3\b\3\b\7\b\u02ac\n\b\f\b\16\b\u02af\13\b\3\t")
        buf.write("\3\t\3\t\3\t\5\t\u02b5\n\t\3\n\3\n\3\n\3\n\3\13\3\13\3")
        buf.write("\13\3\13\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\5\r\u02c7\n\r")
        buf.write("\3\16\3\16\3\16\3\16\5\16\u02cd\n\16\3\17\3\17\3\17\3")
        buf.write("\17\5\17\u02d3\n\17\3\20\3\20\3\20\3\20\3\20\3\21\3\21")
        buf.write("\3\21\3\21\5\21\u02de\n\21\3\21\3\21\3\22\3\22\5\22\u02e4")
        buf.write("\n\22\3\23\3\23\5\23\u02e8\n\23\3\23\3\23\3\23\5\23\u02ed")
        buf.write("\n\23\3\24\5\24\u02f0\n\24\3\24\3\24\3\24\3\24\3\25\3")
        buf.write("\25\5\25\u02f8\n\25\3\25\3\25\3\25\5\25\u02fd\n\25\7\25")
        buf.write("\u02ff\n\25\f\25\16\25\u0302\13\25\3\26\5\26\u0305\n\26")
        buf.write("\3\26\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\31\3\31\5\31")
        buf.write("\u0311\n\31\3\31\5\31\u0314\n\31\3\31\3\31\3\32\3\32\3")
        buf.write("\32\5\32\u031b\n\32\3\33\3\33\5\33\u031f\n\33\3\34\3\34")
        buf.write("\3\34\5\34\u0324\n\34\3\35\3\35\5\35\u0328\n\35\3\36\3")
        buf.write("\36\3\36\3\36\3\36\5\36\u032f\n\36\3\37\3\37\3\37\3 \3")
        buf.write(" \3!\3!\3!\3!\3!\5!\u033b\n!\3\"\3\"\5\"\u033f\n\"\3#")
        buf.write("\3#\5#\u0343\n#\3$\3$\3%\3%\5%\u0349\n%\3&\3&\3&\3\'\3")
        buf.write("\'\3\'\3(\3(\3(\5(\u0354\n(\3)\6)\u0357\n)\r)\16)\u0358")
        buf.write("\3*\3*\5*\u035d\n*\3*\3*\3+\3+\3+\3+\3+\7+\u0366\n+\f")
        buf.write("+\16+\u0369\13+\3,\3,\5,\u036d\n,\3-\3-\3-\5-\u0372\n")
        buf.write("-\3.\3.\5.\u0376\n.\3.\5.\u0379\n.\3.\3.\3/\3/\3/\5/\u0380")
        buf.write("\n/\3\60\6\60\u0383\n\60\r\60\16\60\u0384\3\61\3\61\3")
        buf.write("\61\5\61\u038a\n\61\3\62\3\62\5\62\u038e\n\62\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u039a\n")
        buf.write("\63\3\63\3\63\3\63\5\63\u039f\n\63\3\63\3\63\7\63\u03a3")
        buf.write("\n\63\f\63\16\63\u03a6\13\63\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u03b6")
        buf.write("\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\5\64\u03c5\n\64\3\65\3\65\5\65\u03c9\n")
        buf.write("\65\3\66\3\66\3\66\5\66\u03ce\n\66\3\67\3\67\38\38\39")
        buf.write("\39\39\79\u03d7\n9\f9\169\u03da\139\3:\3:\3;\3;\3;\3;")
        buf.write("\3;\3;\3;\3;\3;\3;\5;\u03e8\n;\3;\3;\3<\3<\3=\3=\3>\3")
        buf.write(">\3>\3>\3>\3?\3?\3@\3@\3@\3@\3@\3A\3A\3A\7A\u03ff\nA\f")
        buf.write("A\16A\u0402\13A\3B\3B\3B\3B\5B\u0408\nB\3C\3C\3D\3D\3")
        buf.write("D\3D\3D\5D\u0411\nD\5D\u0413\nD\3E\3E\3E\3E\3F\3F\3F\7")
        buf.write("F\u041c\nF\fF\16F\u041f\13F\3G\3G\3G\3G\5G\u0425\nG\5")
        buf.write("G\u0427\nG\3H\3H\3H\3I\3I\3I\7I\u042f\nI\fI\16I\u0432")
        buf.write("\13I\3J\3J\5J\u0436\nJ\3K\3K\3K\3K\5K\u043c\nK\3L\3L\3")
        buf.write("L\3L\5L\u0442\nL\3M\3M\3M\3M\3N\3N\3N\7N\u044b\nN\fN\16")
        buf.write("N\u044e\13N\3O\3O\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P")
        buf.write("\3P\3P\3P\5P\u0461\nP\3P\5P\u0464\nP\3Q\6Q\u0467\nQ\r")
        buf.write("Q\16Q\u0468\3R\5R\u046c\nR\3S\3S\5S\u0470\nS\3S\3S\3T")
        buf.write("\5T\u0475\nT\3T\3T\5T\u0479\nT\3T\3T\3U\3U\3V\3V\3V\7")
        buf.write("V\u0482\nV\fV\16V\u0485\13V\3W\3W\5W\u0489\nW\3X\5X\u048c")
        buf.write("\nX\3X\5X\u048f\nX\3X\3X\3X\3Y\3Y\3Y\7Y\u0497\nY\fY\16")
        buf.write("Y\u049a\13Y\3Z\3Z\5Z\u049e\nZ\3[\3[\3[\3\\\3\\\3\\\3\\")
        buf.write("\3\\\3\\\3\\\3\\\3\\\5\\\u04ac\n\\\3\\\5\\\u04af\n\\\5")
        buf.write("\\\u04b1\n\\\3\\\5\\\u04b4\n\\\3]\5]\u04b7\n]\3]\5]\u04ba")
        buf.write("\n]\3]\3]\3^\3^\3_\3_\3_\5_\u04c3\n_\3_\3_\3_\5_\u04c8")
        buf.write("\n_\3_\3_\3_\5_\u04cd\n_\3`\5`\u04d0\n`\3`\5`\u04d3\n")
        buf.write("`\3`\3`\5`\u04d7\n`\3a\5a\u04da\na\3a\5a\u04dd\na\3a\3")
        buf.write("a\5a\u04e1\na\3a\5a\u04e4\na\3b\3b\3b\3b\3c\3c\3c\5c\u04ed")
        buf.write("\nc\3c\3c\3c\5c\u04f2\nc\3c\3c\3d\5d\u04f7\nd\3d\5d\u04fa")
        buf.write("\nd\3d\3d\3e\5e\u04ff\ne\3e\5e\u0502\ne\3e\3e\3f\3f\3")
        buf.write("f\5f\u0509\nf\3f\3f\5f\u050d\nf\5f\u050f\nf\3f\3f\3g\5")
        buf.write("g\u0514\ng\3g\3g\5g\u0518\ng\3g\3g\3h\5h\u051d\nh\3h\3")
        buf.write("h\5h\u0521\nh\3h\3h\3i\5i\u0526\ni\3i\5i\u0529\ni\3i\3")
        buf.write("i\3i\5i\u052e\ni\3i\3i\3j\3j\3k\3k\3k\3l\3l\3l\5l\u053a")
        buf.write("\nl\3l\3l\5l\u053e\nl\3l\5l\u0541\nl\3m\5m\u0544\nm\3")
        buf.write("m\5m\u0547\nm\3m\3m\3n\3n\5n\u054d\nn\3o\3o\5o\u0551\n")
        buf.write("o\3o\5o\u0554\no\3o\5o\u0557\no\3p\3p\5p\u055b\np\3p\3")
        buf.write("p\3q\3q\3r\3r\5r\u0563\nr\3r\3r\3s\3s\3s\7s\u056a\ns\f")
        buf.write("s\16s\u056d\13s\3t\5t\u0570\nt\3t\5t\u0573\nt\3t\3t\3")
        buf.write("t\5t\u0578\nt\3t\5t\u057b\nt\3u\3u\3v\3v\3w\3w\3w\3x\5")
        buf.write("x\u0585\nx\3x\5x\u0588\nx\3x\3x\5x\u058c\nx\3y\5y\u058f")
        buf.write("\ny\3y\3y\3y\5y\u0594\ny\3y\5y\u0597\ny\3y\5y\u059a\n")
        buf.write("y\3y\3y\5y\u059e\ny\3y\3y\3z\6z\u05a3\nz\rz\16z\u05a4")
        buf.write("\3{\3{\3{\5{\u05aa\n{\3|\5|\u05ad\n|\3|\5|\u05b0\n|\3")
        buf.write("|\3|\3|\3}\3}\3}\7}\u05b8\n}\f}\16}\u05bb\13}\3~\3~\3")
        buf.write("~\3~\3~\3~\3~\5~\u05c4\n~\5~\u05c6\n~\3\177\3\177\3\u0080")
        buf.write("\3\u0080\3\u0081\3\u0081\3\u0081\5\u0081\u05cf\n\u0081")
        buf.write("\3\u0081\3\u0081\5\u0081\u05d3\n\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0082\6\u0082\u05da\n\u0082\r\u0082")
        buf.write("\16\u0082\u05db\3\u0083\3\u0083\3\u0083\5\u0083\u05e1")
        buf.write("\n\u0083\3\u0084\5\u0084\u05e4\n\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0085\3\u0085\3\u0085\7\u0085\u05ec\n\u0085")
        buf.write("\f\u0085\16\u0085\u05ef\13\u0085\3\u0086\3\u0086\5\u0086")
        buf.write("\u05f3\n\u0086\3\u0087\3\u0087\3\u0087\3\u0088\3\u0088")
        buf.write("\3\u0088\5\u0088\u05fb\n\u0088\3\u0089\5\u0089\u05fe\n")
        buf.write("\u0089\3\u0089\5\u0089\u0601\n\u0089\3\u0089\3\u0089\3")
        buf.write("\u0089\5\u0089\u0606\n\u0089\3\u0089\5\u0089\u0609\n\u0089")
        buf.write("\3\u0089\5\u0089\u060c\n\u0089\3\u0089\3\u0089\3\u008a")
        buf.write("\3\u008a\3\u008b\3\u008b\3\u008b\3\u008b\3\u008c\7\u008c")
        buf.write("\u0617\n\u008c\f\u008c\16\u008c\u061a\13\u008c\3\u008d")
        buf.write("\3\u008d\5\u008d\u061e\n\u008d\3\u008e\5\u008e\u0621\n")
        buf.write("\u008e\3\u008e\5\u008e\u0624\n\u008e\3\u008e\5\u008e\u0627")
        buf.write("\n\u008e\3\u008e\3\u008e\5\u008e\u062b\n\u008e\5\u008e")
        buf.write("\u062d\n\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0632\n")
        buf.write("\u008e\3\u008e\5\u008e\u0635\n\u008e\3\u008e\5\u008e\u0638")
        buf.write("\n\u008e\3\u008e\3\u008e\3\u008f\3\u008f\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0091\7\u0091\u0643\n\u0091\f\u0091")
        buf.write("\16\u0091\u0646\13\u0091\3\u0092\3\u0092\5\u0092\u064a")
        buf.write("\n\u0092\3\u0093\5\u0093\u064d\n\u0093\3\u0093\5\u0093")
        buf.write("\u0650\n\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\5\u0093\u0657\n\u0093\3\u0093\5\u0093\u065a\n\u0093\3")
        buf.write("\u0093\3\u0093\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0096\7\u0096\u0665\n\u0096\f\u0096\16\u0096")
        buf.write("\u0668\13\u0096\3\u0097\3\u0097\5\u0097\u066c\n\u0097")
        buf.write("\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098")
        buf.write("\u0674\n\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u009a\3\u009a\3\u009a\5\u009a\u067e\n\u009a\3\u009a")
        buf.write("\3\u009a\5\u009a\u0682\n\u009a\3\u009b\3\u009b\5\u009b")
        buf.write("\u0686\n\u009b\3\u009b\3\u009b\5\u009b\u068a\n\u009b\3")
        buf.write("\u009b\5\u009b\u068d\n\u009b\3\u009b\5\u009b\u0690\n\u009b")
        buf.write("\3\u009c\3\u009c\3\u009c\5\u009c\u0695\n\u009c\3\u009c")
        buf.write("\3\u009c\3\u009d\5\u009d\u069a\n\u009d\3\u009d\5\u009d")
        buf.write("\u069d\n\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u06a2\n")
        buf.write("\u009d\3\u009d\5\u009d\u06a5\n\u009d\3\u009d\5\u009d\u06a8")
        buf.write("\n\u009d\3\u009e\3\u009e\5\u009e\u06ac\n\u009e\3\u009e")
        buf.write("\3\u009e\5\u009e\u06b0\n\u009e\3\u009e\5\u009e\u06b3\n")
        buf.write("\u009e\3\u009e\3\u009e\3\u009f\5\u009f\u06b8\n\u009f\3")
        buf.write("\u009f\5\u009f\u06bb\n\u009f\3\u009f\3\u009f\5\u009f\u06bf")
        buf.write("\n\u009f\3\u00a0\3\u00a0\3\u00a1\5\u00a1\u06c4\n\u00a1")
        buf.write("\3\u00a1\3\u00a1\3\u00a1\3\u00a2\5\u00a2\u06ca\n\u00a2")
        buf.write("\3\u00a2\5\u00a2\u06cd\n\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\5\u00a2\u06d2\n\u00a2\3\u00a2\5\u00a2\u06d5\n\u00a2\3")
        buf.write("\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a4")
        buf.write("\7\u00a4\u06de\n\u00a4\f\u00a4\16\u00a4\u06e1\13\u00a4")
        buf.write("\3\u00a5\3\u00a5\5\u00a5\u06e5\n\u00a5\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\5\u00a6\u06ea\n\u00a6\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\5\u00a6\u06ef\n\u00a6\3\u00a7\5\u00a7\u06f2\n\u00a7\3")
        buf.write("\u00a7\5\u00a7\u06f5\n\u00a7\3\u00a7\3\u00a7\5\u00a7\u06f9")
        buf.write("\n\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8\5\u00a8\u06ff")
        buf.write("\n\u00a8\3\u00a8\3\u00a8\3\u00a9\3\u00a9\3\u00a9\5\u00a9")
        buf.write("\u0706\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac")
        buf.write("\5\u00ac\u0714\n\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u071d\n\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00af\6\u00af\u0722\n\u00af\r\u00af\16\u00af")
        buf.write("\u0723\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u0729\n\u00b0\3")
        buf.write("\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2")
        buf.write("\3\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4")
        buf.write("\3\u00b4\7\u00b4\u073a\n\u00b4\f\u00b4\16\u00b4\u073d")
        buf.write("\13\u00b4\3\u00b5\3\u00b5\3\u00b5\7\u00b5\u0742\n\u00b5")
        buf.write("\f\u00b5\16\u00b5\u0745\13\u00b5\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6")
        buf.write("\u0757\n\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u075c\n")
        buf.write("\u00b6\3\u00b7\6\u00b7\u075f\n\u00b7\r\u00b7\16\u00b7")
        buf.write("\u0760\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0767\n")
        buf.write("\u00b8\3\u00b9\3\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba")
        buf.write("\5\u00ba\u076f\n\u00ba\3\u00ba\5\u00ba\u0772\n\u00ba\3")
        buf.write("\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba")
        buf.write("\u077a\n\u00ba\3\u00ba\3\u00ba\3\u00ba\7\u00ba\u077f\n")
        buf.write("\u00ba\f\u00ba\16\u00ba\u0782\13\u00ba\3\u00bb\3\u00bb")
        buf.write("\3\u00bc\3\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd")
        buf.write("\u078c\n\u00bd\3\u00be\3\u00be\5\u00be\u0790\n\u00be\3")
        buf.write("\u00be\3\u00be\3\u00bf\3\u00bf\3\u00bf\7\u00bf\u0797\n")
        buf.write("\u00bf\f\u00bf\16\u00bf\u079a\13\u00bf\3\u00c0\3\u00c0")
        buf.write("\3\u00c0\5\u00c0\u079f\n\u00c0\3\u00c0\3\u00c0\3\u00c1")
        buf.write("\5\u00c1\u07a4\n\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1")
        buf.write("\u07a9\n\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3")
        buf.write("\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u07b3\n\u00c4\3\u00c5")
        buf.write("\3\u00c5\3\u00c5\7\u00c5\u07b8\n\u00c5\f\u00c5\16\u00c5")
        buf.write("\u07bb\13\u00c5\3\u00c6\3\u00c6\5\u00c6\u07bf\n\u00c6")
        buf.write("\3\u00c6\3\u00c6\3\u00c7\6\u00c7\u07c4\n\u00c7\r\u00c7")
        buf.write("\16\u00c7\u07c5\3\u00c8\6\u00c8\u07c9\n\u00c8\r\u00c8")
        buf.write("\16\u00c8\u07ca\3\u00c9\3\u00c9\5\u00c9\u07cf\n\u00c9")
        buf.write("\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u07d4\n\u00c9\3\u00c9")
        buf.write("\3\u00c9\3\u00c9\5\u00c9\u07d9\n\u00c9\3\u00c9\3\u00c9")
        buf.write("\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u07e1\n\u00c9")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca")
        buf.write("\u07e9\n\u00ca\3\u00cb\5\u00cb\u07ec\n\u00cb\3\u00cb\3")
        buf.write("\u00cb\5\u00cb\u07f0\n\u00cb\3\u00cc\3\u00cc\3\u00cc\7")
        buf.write("\u00cc\u07f5\n\u00cc\f\u00cc\16\u00cc\u07f8\13\u00cc\3")
        buf.write("\u00cd\5\u00cd\u07fb\n\u00cd\3\u00cd\3\u00cd\5\u00cd\u07ff")
        buf.write("\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00cf\3\u00cf\5\u00cf")
        buf.write("\u0806\n\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0")
        buf.write("\5\u00d0\u080d\n\u00d0\3\u00d0\5\u00d0\u0810\n\u00d0\3")
        buf.write("\u00d0\3\u00d0\3\u00d0\5\u00d0\u0815\n\u00d0\3\u00d1\6")
        buf.write("\u00d1\u0818\n\u00d1\r\u00d1\16\u00d1\u0819\3\u00d2\3")
        buf.write("\u00d2\3\u00d2\3\u00d2\3\u00d3\3\u00d3\3\u00d3\5\u00d3")
        buf.write("\u0823\n\u00d3\5\u00d3\u0825\n\u00d3\3\u00d3\3\u00d3\3")
        buf.write("\u00d4\3\u00d4\5\u00d4\u082b\n\u00d4\3\u00d4\3\u00d4\3")
        buf.write("\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u083b")
        buf.write("\n\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5")
        buf.write("\u0842\n\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6")
        buf.write("\u084f\n\u00d6\3\u00d7\3\u00d7\5\u00d7\u0853\n\u00d7\3")
        buf.write("\u00d7\3\u00d7\3\u00d8\3\u00d8\3\u00d8\7\u00d8\u085a\n")
        buf.write("\u00d8\f\u00d8\16\u00d8\u085d\13\u00d8\3\u00d8\5\u00d8")
        buf.write("\u0860\n\u00d8\3\u00d9\3\u00d9\3\u00da\3\u00da\3\u00da")
        buf.write("\5\u00da\u0867\n\u00da\3\u00da\3\u00da\3\u00db\3\u00db")
        buf.write("\3\u00db\7\u00db\u086e\n\u00db\f\u00db\16\u00db\u0871")
        buf.write("\13\u00db\3\u00db\5\u00db\u0874\n\u00db\3\u00dc\3\u00dc")
        buf.write("\3\u00dc\3\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write("\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write("\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write("\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write("\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write("\5\u00dd\u089b\n\u00dd\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\5\u00de\u08a9\n\u00de\3\u00df\3\u00df\3\u00df")
        buf.write("\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df")
        buf.write("\3\u00df\5\u00df\u08b6\n\u00df\3\u00e0\3\u00e0\5\u00e0")
        buf.write("\u08ba\n\u00e0\3\u00e0\5\u00e0\u08bd\n\u00e0\3\u00e0\3")
        buf.write("\u00e0\3\u00e1\5\u00e1\u08c2\n\u00e1\3\u00e1\3\u00e1\5")
        buf.write("\u00e1\u08c6\n\u00e1\3\u00e1\5\u00e1\u08c9\n\u00e1\3\u00e1")
        buf.write("\3\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u08d0\n\u00e1")
        buf.write("\3\u00e2\3\u00e2\5\u00e2\u08d4\n\u00e2\3\u00e2\3\u00e2")
        buf.write("\5\u00e2\u08d8\n\u00e2\3\u00e3\3\u00e3\3\u00e3\7\u00e3")
        buf.write("\u08dd\n\u00e3\f\u00e3\16\u00e3\u08e0\13\u00e3\3\u00e4")
        buf.write("\3\u00e4\3\u00e4\5\u00e4\u08e5\n\u00e4\5\u00e4\u08e7\n")
        buf.write("\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e6\3\u00e6")
        buf.write("\3\u00e6\7\u00e6\u08f0\n\u00e6\f\u00e6\16\u00e6\u08f3")
        buf.write("\13\u00e6\3\u00e7\5\u00e7\u08f6\n\u00e7\3\u00e7\3\u00e7")
        buf.write("\5\u00e7\u08fa\n\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7")
        buf.write("\u08ff\n\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8")
        buf.write("\5\u00e8\u0906\n\u00e8\5\u00e8\u0908\n\u00e8\3\u00e9\3")
        buf.write("\u00e9\3\u00e9\5\u00e9\u090d\n\u00e9\3\u00e9\3\u00e9\5")
        buf.write("\u00e9\u0911\n\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3")
        buf.write("\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00ec\3\u00ec\3\u00ec")
        buf.write("\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u0923")
        buf.write("\n\u00ec\3\u00ed\3\u00ed\3\u00ed\7\u00ed\u0928\n\u00ed")
        buf.write("\f\u00ed\16\u00ed\u092b\13\u00ed\3\u00ee\3\u00ee\3\u00ee")
        buf.write("\5\u00ee\u0930\n\u00ee\3\u00ee\3\u00ee\3\u00ef\3\u00ef")
        buf.write("\3\u00f0\3\u00f0\5\u00f0\u0938\n\u00f0\3\u00f0\3\u00f0")
        buf.write("\3\u00f0\3\u00f1\3\u00f1\3\u00f1\7\u00f1\u0940\n\u00f1")
        buf.write("\f\u00f1\16\u00f1\u0943\13\u00f1\3\u00f2\3\u00f2\5\u00f2")
        buf.write("\u0947\n\u00f2\3\u00f2\5\u00f2\u094a\n\u00f2\3\u00f3\6")
        buf.write("\u00f3\u094d\n\u00f3\r\u00f3\16\u00f3\u094e\3\u00f4\3")
        buf.write("\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4")
        buf.write("\u0958\n\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5")
        buf.write("\u095e\n\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f6\3\u00f6")
        buf.write("\3\u00f6\3\u00f6\3\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7")
        buf.write("\3\u00f7\3\u00f7\3\u00f7\3\u00f7\7\u00f7\u0970\n\u00f7")
        buf.write("\f\u00f7\16\u00f7\u0973\13\u00f7\3\u00f7\7\u00f7\u0976")
        buf.write("\n\u00f7\f\u00f7\16\u00f7\u0979\13\u00f7\3\u00f8\5\u00f8")
        buf.write("\u097c\n\u00f8\3\u00f8\3\u00f8\5\u00f8\u0980\n\u00f8\3")
        buf.write("\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9")
        buf.write("\u0988\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa")
        buf.write("\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u0992\n\u00fa\5\u00fa")
        buf.write("\u0994\n\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fc\3\u00fc")
        buf.write("\3\u00fc\3\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fe\3\u00fe")
        buf.write("\3\u00fe\3\u00ff\3\u00ff\5\u00ff\u09a5\n\u00ff\3\u00ff")
        buf.write("\3\u00ff\3\u0100\3\u0100\3\u0100\7\u0100\u09ac\n\u0100")
        buf.write("\f\u0100\16\u0100\u09af\13\u0100\3\u0101\5\u0101\u09b2")
        buf.write("\n\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u09b7\n\u0101")
        buf.write("\3\u0102\3\u0102\5\u0102\u09bb\n\u0102\3\u0103\6\u0103")
        buf.write("\u09be\n\u0103\r\u0103\16\u0103\u09bf\3\u0104\3\u0104")
        buf.write("\3\u0104\3\u0104\3\u0105\6\u0105\u09c7\n\u0105\r\u0105")
        buf.write("\16\u0105\u09c8\3\u0106\3\u0106\3\u0106\3\u0107\3\u0107")
        buf.write("\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107")
        buf.write("\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\5\u0107\u09dc")
        buf.write("\n\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107")
        buf.write("\3\u0107\3\u0107\3\u0107\5\u0107\u09e7\n\u0107\7\u0107")
        buf.write("\u09e9\n\u0107\f\u0107\16\u0107\u09ec\13\u0107\3\u0108")
        buf.write("\3\u0108\5\u0108\u09f0\n\u0108\3\u0108\5\u0108\u09f3\n")
        buf.write("\u0108\3\u0108\3\u0108\3\u0109\3\u0109\5\u0109\u09f9\n")
        buf.write("\u0109\3\u0109\3\u0109\5\u0109\u09fd\n\u0109\3\u010a\3")
        buf.write("\u010a\3\u010b\3\u010b\5\u010b\u0a03\n\u010b\3\u010b\3")
        buf.write("\u010b\3\u010c\3\u010c\3\u010c\7\u010c\u0a0a\n\u010c\f")
        buf.write("\u010c\16\u010c\u0a0d\13\u010c\3\u010d\3\u010d\3\u010d")
        buf.write("\3\u010d\5\u010d\u0a13\n\u010d\3\u010d\3\u010d\5\u010d")
        buf.write("\u0a17\n\u010d\3\u010e\6\u010e\u0a1a\n\u010e\r\u010e\16")
        buf.write("\u010e\u0a1b\3\u010f\5\u010f\u0a1f\n\u010f\3\u010f\3\u010f")
        buf.write("\5\u010f\u0a23\n\u010f\3\u010f\3\u010f\3\u010f\3\u0110")
        buf.write("\3\u0110\3\u0110\5\u0110\u0a2b\n\u0110\5\u0110\u0a2d\n")
        buf.write("\u0110\3\u0110\3\u0110\3\u0111\3\u0111\3\u0111\7\u0111")
        buf.write("\u0a34\n\u0111\f\u0111\16\u0111\u0a37\13\u0111\3\u0112")
        buf.write("\5\u0112\u0a3a\n\u0112\3\u0112\5\u0112\u0a3d\n\u0112\3")
        buf.write("\u0112\3\u0112\3\u0112\3\u0112\5\u0112\u0a43\n\u0112\3")
        buf.write("\u0113\6\u0113\u0a46\n\u0113\r\u0113\16\u0113\u0a47\3")
        buf.write("\u0114\3\u0114\3\u0114\3\u0114\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\3\u0116\3\u0116\3\u0116\7\u0116")
        buf.write("\u0a57\n\u0116\f\u0116\16\u0116\u0a5a\13\u0116\3\u0116")
        buf.write("\5\u0116\u0a5d\n\u0116\3\u0117\3\u0117\3\u0117\3\u0118")
        buf.write("\3\u0118\3\u0118\3\u0119\3\u0119\3\u011a\3\u011a\3\u011b")
        buf.write("\3\u011b\3\u011b\3\u011c\3\u011c\3\u011c\7\u011c\u0a6f")
        buf.write("\n\u011c\f\u011c\16\u011c\u0a72\13\u011c\3\u011d\3\u011d")
        buf.write("\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u0a7a\n\u011d")
        buf.write("\3\u011d\5\u011d\u0a7d\n\u011d\3\u011e\3\u011e\3\u011e")
        buf.write("\7\u011e\u0a82\n\u011e\f\u011e\16\u011e\u0a85\13\u011e")
        buf.write("\3\u011f\3\u011f\3\u0120\3\u0120\3\u0120\3\u0121\3\u0121")
        buf.write("\3\u0121\3\u0122\3\u0122\3\u0122\3\u0122\3\u0123\3\u0123")
        buf.write("\3\u0123\3\u0123\3\u0124\3\u0124\3\u0124\3\u0124\3\u0125")
        buf.write("\3\u0125\3\u0125\3\u0126\3\u0126\3\u0126\3\u0126\3\u0127")
        buf.write("\3\u0127\3\u0127\3\u0127\3\u0127\3\u0128\3\u0128\3\u0128")
        buf.write("\3\u0128\3\u0129\3\u0129\3\u0129\3\u012a\3\u012a\3\u012a")
        buf.write("\3\u012b\3\u012b\3\u012b\3\u012c\3\u012c\5\u012c\u0ab6")
        buf.write("\n\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u0abb\n\u012c")
        buf.write("\3\u012d\3\u012d\5\u012d\u0abf\n\u012d\3\u012e\3\u012e")
        buf.write("\5\u012e\u0ac3\n\u012e\3\u012f\3\u012f\6\u012f\u0ac7\n")
        buf.write("\u012f\r\u012f\16\u012f\u0ac8\3\u0130\3\u0130\3\u0131")
        buf.write("\3\u0131\5\u0131\u0acf\n\u0131\3\u0132\3\u0132\6\u0132")
        buf.write("\u0ad3\n\u0132\r\u0132\16\u0132\u0ad4\3\u0133\3\u0133")
        buf.write("\3\u0133\3\u0133\5\u0133\u0adb\n\u0133\3\u0134\5\u0134")
        buf.write("\u0ade\n\u0134\3\u0134\3\u0134\5\u0134\u0ae2\n\u0134\3")
        buf.write("\u0134\5\u0134\u0ae5\n\u0134\3\u0135\3\u0135\3\u0136\3")
        buf.write("\u0136\3\u0137\3\u0137\3\u0138\3\u0138\3\u0138\5\u0138")
        buf.write("\u0af0\n\u0138\3\u0139\3\u0139\6\u0139\u0af4\n\u0139\r")
        buf.write("\u0139\16\u0139\u0af5\3\u0139\3\u0139\3\u0139\6\u0139")
        buf.write("\u0afb\n\u0139\r\u0139\16\u0139\u0afc\3\u0139\5\u0139")
        buf.write("\u0b00\n\u0139\3\u013a\3\u013a\7\u013a\u0b04\n\u013a\f")
        buf.write("\u013a\16\u013a\u0b07\13\u013a\3\u013a\3\u013a\3\u013a")
        buf.write("\7\u013a\u0b0c\n\u013a\f\u013a\16\u013a\u0b0f\13\u013a")
        buf.write("\3\u013a\5\u013a\u0b12\n\u013a\3\u013b\3\u013b\3\u013b")
        buf.write("\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\5\u013b\u0b1c")
        buf.write("\n\u013b\3\u013b\3\u013b\7\u013b\u0b20\n\u013b\f\u013b")
        buf.write("\16\u013b\u0b23\13\u013b\3\u013b\3\u013b\3\u013b\3\u013b")
        buf.write("\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\5\u013b\u0b2e")
        buf.write("\n\u013b\3\u013b\3\u013b\7\u013b\u0b32\n\u013b\f\u013b")
        buf.write("\16\u013b\u0b35\13\u013b\3\u013b\5\u013b\u0b38\n\u013b")
        buf.write("\3\u013b\3\u0977\5d\u0172\u020c\u013c\2\4\6\b\n\f\16\20")
        buf.write("\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJL")
        buf.write("NPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac")
        buf.write("\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be")
        buf.write("\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0")
        buf.write("\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2")
        buf.write("\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4")
        buf.write("\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106")
        buf.write("\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118")
        buf.write("\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a")
        buf.write("\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c")
        buf.write("\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e")
        buf.write("\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160")
        buf.write("\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172")
        buf.write("\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184")
        buf.write("\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196")
        buf.write("\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8")
        buf.write("\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba")
        buf.write("\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc")
        buf.write("\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de")
        buf.write("\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0")
        buf.write("\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202")
        buf.write("\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214")
        buf.write("\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226")
        buf.write("\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238")
        buf.write("\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a")
        buf.write("\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c")
        buf.write("\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e")
        buf.write("\u0270\u0272\u0274\2\30\3\2\35\36\3\2@A\3\2ci\3\2jm\3")
        buf.write("\2no\3\2vw\4\2cgor\b\2\b\b\17\17\22\22\35\37&&==\3\2)")
        buf.write("*\3\2\u0099\u009a\3\2\678\3\2\63\65\3\2MN\5\2\26\26\30")
        buf.write("\32QQ\3\2OP\7\2\u008c\u008c\u0093\u0095\u009a\u009b\u009e")
        buf.write("\u009e\u00a6\u00a7\3\2\u0089\u008a\22\2\3\4\7\b\n\n\f")
        buf.write("\r\20\20\23\23\26\34\37#++\61<>IKPWZ^rtu\u0089\u008a\21")
        buf.write("\2\3\3\5\26\30\37$*,\60<=JJQV[]abssv\u0082\u0084\u0084")
        buf.write("\u0086\u0088\u0098\u0098\5\2\u0096\u0097\u0099\u009a\u009c")
        buf.write("\u00a5\4\2VV[[\3\2\u00ac\u00b0\2\u0be3\2\u0277\3\2\2\2")
        buf.write("\4\u0289\3\2\2\2\6\u028f\3\2\2\2\b\u0296\3\2\2\2\n\u0298")
        buf.write("\3\2\2\2\f\u02a4\3\2\2\2\16\u02a8\3\2\2\2\20\u02b4\3\2")
        buf.write("\2\2\22\u02b6\3\2\2\2\24\u02ba\3\2\2\2\26\u02be\3\2\2")
        buf.write("\2\30\u02c6\3\2\2\2\32\u02c8\3\2\2\2\34\u02d2\3\2\2\2")
        buf.write("\36\u02d4\3\2\2\2 \u02d9\3\2\2\2\"\u02e1\3\2\2\2$\u02ec")
        buf.write("\3\2\2\2&\u02ef\3\2\2\2(\u02f5\3\2\2\2*\u0304\3\2\2\2")
        buf.write(",\u0309\3\2\2\2.\u030c\3\2\2\2\60\u030e\3\2\2\2\62\u0317")
        buf.write("\3\2\2\2\64\u031c\3\2\2\2\66\u0320\3\2\2\28\u0325\3\2")
        buf.write("\2\2:\u0329\3\2\2\2<\u0330\3\2\2\2>\u0333\3\2\2\2@\u033a")
        buf.write("\3\2\2\2B\u033c\3\2\2\2D\u0340\3\2\2\2F\u0344\3\2\2\2")
        buf.write("H\u0346\3\2\2\2J\u034a\3\2\2\2L\u034d\3\2\2\2N\u0350\3")
        buf.write("\2\2\2P\u0356\3\2\2\2R\u035a\3\2\2\2T\u0360\3\2\2\2V\u036a")
        buf.write("\3\2\2\2X\u0371\3\2\2\2Z\u0373\3\2\2\2\\\u037c\3\2\2\2")
        buf.write("^\u0382\3\2\2\2`\u0386\3\2\2\2b\u038b\3\2\2\2d\u0399\3")
        buf.write("\2\2\2f\u03c4\3\2\2\2h\u03c6\3\2\2\2j\u03ca\3\2\2\2l\u03cf")
        buf.write("\3\2\2\2n\u03d1\3\2\2\2p\u03d3\3\2\2\2r\u03db\3\2\2\2")
        buf.write("t\u03dd\3\2\2\2v\u03eb\3\2\2\2x\u03ed\3\2\2\2z\u03ef\3")
        buf.write("\2\2\2|\u03f4\3\2\2\2~\u03f6\3\2\2\2\u0080\u03fb\3\2\2")
        buf.write("\2\u0082\u0407\3\2\2\2\u0084\u0409\3\2\2\2\u0086\u0412")
        buf.write("\3\2\2\2\u0088\u0414\3\2\2\2\u008a\u0418\3\2\2\2\u008c")
        buf.write("\u0420\3\2\2\2\u008e\u0428\3\2\2\2\u0090\u042b\3\2\2\2")
        buf.write("\u0092\u0435\3\2\2\2\u0094\u0437\3\2\2\2\u0096\u043d\3")
        buf.write("\2\2\2\u0098\u0443\3\2\2\2\u009a\u0447\3\2\2\2\u009c\u044f")
        buf.write("\3\2\2\2\u009e\u0460\3\2\2\2\u00a0\u0466\3\2\2\2\u00a2")
        buf.write("\u046b\3\2\2\2\u00a4\u046d\3\2\2\2\u00a6\u0474\3\2\2\2")
        buf.write("\u00a8\u047c\3\2\2\2\u00aa\u047e\3\2\2\2\u00ac\u0488\3")
        buf.write("\2\2\2\u00ae\u048b\3\2\2\2\u00b0\u0493\3\2\2\2\u00b2\u049b")
        buf.write("\3\2\2\2\u00b4\u049f\3\2\2\2\u00b6\u04a2\3\2\2\2\u00b8")
        buf.write("\u04b6\3\2\2\2\u00ba\u04bd\3\2\2\2\u00bc\u04cc\3\2\2\2")
        buf.write("\u00be\u04cf\3\2\2\2\u00c0\u04d9\3\2\2\2\u00c2\u04e5\3")
        buf.write("\2\2\2\u00c4\u04e9\3\2\2\2\u00c6\u04f6\3\2\2\2\u00c8\u04fe")
        buf.write("\3\2\2\2\u00ca\u0505\3\2\2\2\u00cc\u0513\3\2\2\2\u00ce")
        buf.write("\u051c\3\2\2\2\u00d0\u0525\3\2\2\2\u00d2\u0531\3\2\2\2")
        buf.write("\u00d4\u0533\3\2\2\2\u00d6\u0536\3\2\2\2\u00d8\u0543\3")
        buf.write("\2\2\2\u00da\u054c\3\2\2\2\u00dc\u054e\3\2\2\2\u00de\u0558")
        buf.write("\3\2\2\2\u00e0\u055e\3\2\2\2\u00e2\u0560\3\2\2\2\u00e4")
        buf.write("\u0566\3\2\2\2\u00e6\u056f\3\2\2\2\u00e8\u057c\3\2\2\2")
        buf.write("\u00ea\u057e\3\2\2\2\u00ec\u0580\3\2\2\2\u00ee\u0584\3")
        buf.write("\2\2\2\u00f0\u058e\3\2\2\2\u00f2\u05a2\3\2\2\2\u00f4\u05a9")
        buf.write("\3\2\2\2\u00f6\u05ac\3\2\2\2\u00f8\u05b4\3\2\2\2\u00fa")
        buf.write("\u05c5\3\2\2\2\u00fc\u05c7\3\2\2\2\u00fe\u05c9\3\2\2\2")
        buf.write("\u0100\u05cb\3\2\2\2\u0102\u05d9\3\2\2\2\u0104\u05e0\3")
        buf.write("\2\2\2\u0106\u05e3\3\2\2\2\u0108\u05e8\3\2\2\2\u010a\u05f0")
        buf.write("\3\2\2\2\u010c\u05f4\3\2\2\2\u010e\u05fa\3\2\2\2\u0110")
        buf.write("\u05fd\3\2\2\2\u0112\u060f\3\2\2\2\u0114\u0611\3\2\2\2")
        buf.write("\u0116\u0618\3\2\2\2\u0118\u061d\3\2\2\2\u011a\u0620\3")
        buf.write("\2\2\2\u011c\u063b\3\2\2\2\u011e\u063d\3\2\2\2\u0120\u0644")
        buf.write("\3\2\2\2\u0122\u0649\3\2\2\2\u0124\u064c\3\2\2\2\u0126")
        buf.write("\u065d\3\2\2\2\u0128\u065f\3\2\2\2\u012a\u0666\3\2\2\2")
        buf.write("\u012c\u066b\3\2\2\2\u012e\u0673\3\2\2\2\u0130\u0675\3")
        buf.write("\2\2\2\u0132\u067a\3\2\2\2\u0134\u0683\3\2\2\2\u0136\u0691")
        buf.write("\3\2\2\2\u0138\u0699\3\2\2\2\u013a\u06a9\3\2\2\2\u013c")
        buf.write("\u06b7\3\2\2\2\u013e\u06c0\3\2\2\2\u0140\u06c3\3\2\2\2")
        buf.write("\u0142\u06c9\3\2\2\2\u0144\u06d8\3\2\2\2\u0146\u06df\3")
        buf.write("\2\2\2\u0148\u06e4\3\2\2\2\u014a\u06e6\3\2\2\2\u014c\u06f1")
        buf.write("\3\2\2\2\u014e\u06fc\3\2\2\2\u0150\u0705\3\2\2\2\u0152")
        buf.write("\u0707\3\2\2\2\u0154\u070b\3\2\2\2\u0156\u070f\3\2\2\2")
        buf.write("\u0158\u0715\3\2\2\2\u015a\u0718\3\2\2\2\u015c\u0721\3")
        buf.write("\2\2\2\u015e\u0728\3\2\2\2\u0160\u072a\3\2\2\2\u0162\u072e")
        buf.write("\3\2\2\2\u0164\u0732\3\2\2\2\u0166\u0736\3\2\2\2\u0168")
        buf.write("\u073e\3\2\2\2\u016a\u075b\3\2\2\2\u016c\u075e\3\2\2\2")
        buf.write("\u016e\u0762\3\2\2\2\u0170\u0768\3\2\2\2\u0172\u0779\3")
        buf.write("\2\2\2\u0174\u0783\3\2\2\2\u0176\u0785\3\2\2\2\u0178\u078b")
        buf.write("\3\2\2\2\u017a\u078d\3\2\2\2\u017c\u0793\3\2\2\2\u017e")
        buf.write("\u079e\3\2\2\2\u0180\u07a3\3\2\2\2\u0182\u07aa\3\2\2\2")
        buf.write("\u0184\u07ad\3\2\2\2\u0186\u07af\3\2\2\2\u0188\u07b4\3")
        buf.write("\2\2\2\u018a\u07bc\3\2\2\2\u018c\u07c3\3\2\2\2\u018e\u07c8")
        buf.write("\3\2\2\2\u0190\u07e0\3\2\2\2\u0192\u07e8\3\2\2\2\u0194")
        buf.write("\u07eb\3\2\2\2\u0196\u07f1\3\2\2\2\u0198\u07fe\3\2\2\2")
        buf.write("\u019a\u0800\3\2\2\2\u019c\u0803\3\2\2\2\u019e\u0814\3")
        buf.write("\2\2\2\u01a0\u0817\3\2\2\2\u01a2\u081b\3\2\2\2\u01a4\u0824")
        buf.write("\3\2\2\2\u01a6\u083a\3\2\2\2\u01a8\u083c\3\2\2\2\u01aa")
        buf.write("\u084e\3\2\2\2\u01ac\u0850\3\2\2\2\u01ae\u0856\3\2\2\2")
        buf.write("\u01b0\u0861\3\2\2\2\u01b2\u0863\3\2\2\2\u01b4\u086a\3")
        buf.write("\2\2\2\u01b6\u0875\3\2\2\2\u01b8\u089a\3\2\2\2\u01ba\u08a8")
        buf.write("\3\2\2\2\u01bc\u08b5\3\2\2\2\u01be\u08b7\3\2\2\2\u01c0")
        buf.write("\u08cf\3\2\2\2\u01c2\u08d7\3\2\2\2\u01c4\u08d9\3\2\2\2")
        buf.write("\u01c6\u08e1\3\2\2\2\u01c8\u08e8\3\2\2\2\u01ca\u08ec\3")
        buf.write("\2\2\2\u01cc\u08f5\3\2\2\2\u01ce\u0907\3\2\2\2\u01d0\u0909")
        buf.write("\3\2\2\2\u01d2\u0912\3\2\2\2\u01d4\u0916\3\2\2\2\u01d6")
        buf.write("\u0922\3\2\2\2\u01d8\u0924\3\2\2\2\u01da\u092f\3\2\2\2")
        buf.write("\u01dc\u0933\3\2\2\2\u01de\u0935\3\2\2\2\u01e0\u093c\3")
        buf.write("\2\2\2\u01e2\u0949\3\2\2\2\u01e4\u094c\3\2\2\2\u01e6\u0957")
        buf.write("\3\2\2\2\u01e8\u0959\3\2\2\2\u01ea\u0962\3\2\2\2\u01ec")
        buf.write("\u0967\3\2\2\2\u01ee\u097f\3\2\2\2\u01f0\u0981\3\2\2\2")
        buf.write("\u01f2\u0989\3\2\2\2\u01f4\u0995\3\2\2\2\u01f6\u0998\3")
        buf.write("\2\2\2\u01f8\u099c\3\2\2\2\u01fa\u099f\3\2\2\2\u01fc\u09a2")
        buf.write("\3\2\2\2\u01fe\u09a8\3\2\2\2\u0200\u09b1\3\2\2\2\u0202")
        buf.write("\u09b8\3\2\2\2\u0204\u09bd\3\2\2\2\u0206\u09c1\3\2\2\2")
        buf.write("\u0208\u09c6\3\2\2\2\u020a\u09ca\3\2\2\2\u020c\u09db\3")
        buf.write("\2\2\2\u020e\u09ed\3\2\2\2\u0210\u09f6\3\2\2\2\u0212\u09fe")
        buf.write("\3\2\2\2\u0214\u0a00\3\2\2\2\u0216\u0a06\3\2\2\2\u0218")
        buf.write("\u0a12\3\2\2\2\u021a\u0a19\3\2\2\2\u021c\u0a1e\3\2\2\2")
        buf.write("\u021e\u0a27\3\2\2\2\u0220\u0a30\3\2\2\2\u0222\u0a42\3")
        buf.write("\2\2\2\u0224\u0a45\3\2\2\2\u0226\u0a49\3\2\2\2\u0228\u0a4d")
        buf.write("\3\2\2\2\u022a\u0a53\3\2\2\2\u022c\u0a5e\3\2\2\2\u022e")
        buf.write("\u0a61\3\2\2\2\u0230\u0a64\3\2\2\2\u0232\u0a66\3\2\2\2")
        buf.write("\u0234\u0a68\3\2\2\2\u0236\u0a6b\3\2\2\2\u0238\u0a7c\3")
        buf.write("\2\2\2\u023a\u0a7e\3\2\2\2\u023c\u0a86\3\2\2\2\u023e\u0a88")
        buf.write("\3\2\2\2\u0240\u0a8b\3\2\2\2\u0242\u0a8e\3\2\2\2\u0244")
        buf.write("\u0a92\3\2\2\2\u0246\u0a96\3\2\2\2\u0248\u0a9a\3\2\2\2")
        buf.write("\u024a\u0a9d\3\2\2\2\u024c\u0aa1\3\2\2\2\u024e\u0aa6\3")
        buf.write("\2\2\2\u0250\u0aaa\3\2\2\2\u0252\u0aad\3\2\2\2\u0254\u0ab0")
        buf.write("\3\2\2\2\u0256\u0aba\3\2\2\2\u0258\u0abe\3\2\2\2\u025a")
        buf.write("\u0ac2\3\2\2\2\u025c\u0ac6\3\2\2\2\u025e\u0aca\3\2\2\2")
        buf.write("\u0260\u0ace\3\2\2\2\u0262\u0ad2\3\2\2\2\u0264\u0ada\3")
        buf.write("\2\2\2\u0266\u0ae4\3\2\2\2\u0268\u0ae6\3\2\2\2\u026a\u0ae8")
        buf.write("\3\2\2\2\u026c\u0aea\3\2\2\2\u026e\u0aef\3\2\2\2\u0270")
        buf.write("\u0aff\3\2\2\2\u0272\u0b11\3\2\2\2\u0274\u0b37\3\2\2\2")
        buf.write("\u0276\u0278\5\6\4\2\u0277\u0276\3\2\2\2\u0277\u0278\3")
        buf.write("\2\2\2\u0278\u0279\3\2\2\2\u0279\u027a\7\2\2\3\u027a\3")
        buf.write("\3\2\2\2\u027b\u0284\5\b\5\2\u027c\u0284\5\u009eP\2\u027d")
        buf.write("\u0284\5\30\r\2\u027e\u0284\5:\36\2\u027f\u0284\5@!\2")
        buf.write("\u0280\u0284\5L\'\2\u0281\u0284\5N(\2\u0282\u0284\5\u0194")
        buf.write("\u00cb\2\u0283\u027b\3\2\2\2\u0283\u027c\3\2\2\2\u0283")
        buf.write("\u027d\3\2\2\2\u0283\u027e\3\2\2\2\u0283\u027f\3\2\2\2")
        buf.write("\u0283\u0280\3\2\2\2\u0283\u0281\3\2\2\2\u0283\u0282\3")
        buf.write("\2\2\2\u0284\u0286\3\2\2\2\u0285\u0287\7\u0095\2\2\u0286")
        buf.write("\u0285\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u028a\3\2\2\2")
        buf.write("\u0288\u028a\5X-\2\u0289\u0283\3\2\2\2\u0289\u0288\3\2")
        buf.write("\2\2\u028a\5\3\2\2\2\u028b\u028c\6\4\2\3\u028c\u028d\5")
        buf.write("\4\3\2\u028d\u028e\b\4\1\2\u028e\u0290\3\2\2\2\u028f\u028b")
        buf.write("\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u028f\3\2\2\2\u0291")
        buf.write("\u0292\3\2\2\2\u0292\7\3\2\2\2\u0293\u0297\5\n\6\2\u0294")
        buf.write("\u0297\5\f\7\2\u0295\u0297\5\26\f\2\u0296\u0293\3\2\2")
        buf.write("\2\u0296\u0294\3\2\2\2\u0296\u0295\3\2\2\2\u0297\t\3\2")
        buf.write("\2\2\u0298\u029a\7\20\2\2\u0299\u029b\7\6\2\2\u029a\u0299")
        buf.write("\3\2\2\2\u029a\u029b\3\2\2\2\u029b\u029c\3\2\2\2\u029c")
        buf.write("\u029d\5\u0172\u00ba\2\u029d\u029e\7\23\2\2\u029e\u02a0")
        buf.write("\5\u0194\u00cb\2\u029f\u02a1\5,\27\2\u02a0\u029f\3\2\2")
        buf.write("\2\u02a0\u02a1\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a3")
        buf.write("\5\u00a4S\2\u02a3\13\3\2\2\2\u02a4\u02a5\7\34\2\2\u02a5")
        buf.write("\u02a6\5\16\b\2\u02a6\u02a7\5\u00a4S\2\u02a7\r\3\2\2\2")
        buf.write("\u02a8\u02ad\5\20\t\2\u02a9\u02aa\7\u0093\2\2\u02aa\u02ac")
        buf.write("\5\20\t\2\u02ab\u02a9\3\2\2\2\u02ac\u02af\3\2\2\2\u02ad")
        buf.write("\u02ab\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\17\3\2\2\2\u02af")
        buf.write("\u02ad\3\2\2\2\u02b0\u02b5\5~@\2\u02b1\u02b5\5\u0194\u00cb")
        buf.write("\2\u02b2\u02b5\5\22\n\2\u02b3\u02b5\5\24\13\2\u02b4\u02b0")
        buf.write("\3\2\2\2\u02b4\u02b1\3\2\2\2\u02b4\u02b2\3\2\2\2\u02b4")
        buf.write("\u02b3\3\2\2\2\u02b5\21\3\2\2\2\u02b6\u02b7\7\6\2\2\u02b7")
        buf.write("\u02b8\5\u0172\u00ba\2\u02b8\u02b9\5\u00b4[\2\u02b9\23")
        buf.write("\3\2\2\2\u02ba\u02bb\t\2\2\2\u02bb\u02bc\5\u0172\u00ba")
        buf.write("\2\u02bc\u02bd\5\u00b4[\2\u02bd\25\3\2\2\2\u02be\u02bf")
        buf.write("\7$\2\2\u02bf\u02c0\5\u00a4S\2\u02c0\u02c1\7\34\2\2\u02c1")
        buf.write("\u02c2\5\u0194\u00cb\2\u02c2\27\3\2\2\2\u02c3\u02c7\5")
        buf.write("\32\16\2\u02c4\u02c7\5\36\20\2\u02c5\u02c7\5 \21\2\u02c6")
        buf.write("\u02c3\3\2\2\2\u02c6\u02c4\3\2\2\2\u02c6\u02c5\3\2\2\2")
        buf.write("\u02c7\31\3\2\2\2\u02c8\u02c9\7\24\2\2\u02c9\u02ca\5\16")
        buf.write("\b\2\u02ca\u02cc\5\u00a4S\2\u02cb\u02cd\5\34\17\2\u02cc")
        buf.write("\u02cb\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\33\3\2\2\2\u02ce")
        buf.write("\u02cf\7\16\2\2\u02cf\u02d3\5\u00a4S\2\u02d0\u02d1\7\16")
        buf.write("\2\2\u02d1\u02d3\5\32\16\2\u02d2\u02ce\3\2\2\2\u02d2\u02d0")
        buf.write("\3\2\2\2\u02d3\35\3\2\2\2\u02d4\u02d5\7\r\2\2\u02d5\u02d6")
        buf.write("\5\16\b\2\u02d6\u02d7\7\16\2\2\u02d7\u02d8\5\u00a4S\2")
        buf.write("\u02d8\37\3\2\2\2\u02d9\u02da\7%\2\2\u02da\u02db\5\u0194")
        buf.write("\u00cb\2\u02db\u02dd\7\u008d\2\2\u02dc\u02de\5\"\22\2")
        buf.write("\u02dd\u02dc\3\2\2\2\u02dd\u02de\3\2\2\2\u02de\u02df\3")
        buf.write("\2\2\2\u02df\u02e0\7\u0090\2\2\u02e0!\3\2\2\2\u02e1\u02e3")
        buf.write("\5$\23\2\u02e2\u02e4\5\"\22\2\u02e3\u02e2\3\2\2\2\u02e3")
        buf.write("\u02e4\3\2\2\2\u02e4#\3\2\2\2\u02e5\u02e8\5&\24\2\u02e6")
        buf.write("\u02e8\5*\26\2\u02e7\u02e5\3\2\2\2\u02e7\u02e6\3\2\2\2")
        buf.write("\u02e8\u02e9\3\2\2\2\u02e9\u02ea\5\6\4\2\u02ea\u02ed\3")
        buf.write("\2\2\2\u02eb\u02ed\5\60\31\2\u02ec\u02e7\3\2\2\2\u02ec")
        buf.write("\u02eb\3\2\2\2\u02ed%\3\2\2\2\u02ee\u02f0\5\u018c\u00c7")
        buf.write("\2\u02ef\u02ee\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0\u02f1")
        buf.write("\3\2\2\2\u02f1\u02f2\7\6\2\2\u02f2\u02f3\5(\25\2\u02f3")
        buf.write("\u02f4\7\u0094\2\2\u02f4\'\3\2\2\2\u02f5\u02f7\5\u0172")
        buf.write("\u00ba\2\u02f6\u02f8\5,\27\2\u02f7\u02f6\3\2\2\2\u02f7")
        buf.write("\u02f8\3\2\2\2\u02f8\u0300\3\2\2\2\u02f9\u02fa\7\u0093")
        buf.write("\2\2\u02fa\u02fc\5\u0172\u00ba\2\u02fb\u02fd\5,\27\2\u02fc")
        buf.write("\u02fb\3\2\2\2\u02fc\u02fd\3\2\2\2\u02fd\u02ff\3\2\2\2")
        buf.write("\u02fe\u02f9\3\2\2\2\u02ff\u0302\3\2\2\2\u0300\u02fe\3")
        buf.write("\2\2\2\u0300\u0301\3\2\2\2\u0301)\3\2\2\2\u0302\u0300")
        buf.write("\3\2\2\2\u0303\u0305\5\u018c\u00c7\2\u0304\u0303\3\2\2")
        buf.write("\2\u0304\u0305\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u0307")
        buf.write("\7\n\2\2\u0307\u0308\7\u0094\2\2\u0308+\3\2\2\2\u0309")
        buf.write("\u030a\7\33\2\2\u030a\u030b\5.\30\2\u030b-\3\2\2\2\u030c")
        buf.write("\u030d\5\u0194\u00cb\2\u030d/\3\2\2\2\u030e\u0310\5\62")
        buf.write("\32\2\u030f\u0311\5\64\33\2\u0310\u030f\3\2\2\2\u0310")
        buf.write("\u0311\3\2\2\2\u0311\u0313\3\2\2\2\u0312\u0314\58\35\2")
        buf.write("\u0313\u0312\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0315\3")
        buf.write("\2\2\2\u0315\u0316\7|\2\2\u0316\61\3\2\2\2\u0317\u0318")
        buf.write("\7y\2\2\u0318\u031a\5d\63\2\u0319\u031b\5\"\22\2\u031a")
        buf.write("\u0319\3\2\2\2\u031a\u031b\3\2\2\2\u031b\63\3\2\2\2\u031c")
        buf.write("\u031e\5`\61\2\u031d\u031f\5\64\33\2\u031e\u031d\3\2\2")
        buf.write("\2\u031e\u031f\3\2\2\2\u031f\65\3\2\2\2\u0320\u0321\7")
        buf.write("z\2\2\u0321\u0323\5d\63\2\u0322\u0324\5\"\22\2\u0323\u0322")
        buf.write("\3\2\2\2\u0323\u0324\3\2\2\2\u0324\67\3\2\2\2\u0325\u0327")
        buf.write("\7{\2\2\u0326\u0328\5\"\22\2\u0327\u0326\3\2\2\2\u0327")
        buf.write("\u0328\3\2\2\2\u03289\3\2\2\2\u0329\u032e\5<\37\2\u032a")
        buf.write("\u032f\5\b\5\2\u032b\u032f\5\32\16\2\u032c\u032f\5 \21")
        buf.write("\2\u032d\u032f\5N(\2\u032e\u032a\3\2\2\2\u032e\u032b\3")
        buf.write("\2\2\2\u032e\u032c\3\2\2\2\u032e\u032d\3\2\2\2\u032f;")
        buf.write("\3\2\2\2\u0330\u0331\5> \2\u0331\u0332\7\u0094\2\2\u0332")
        buf.write("=\3\2\2\2\u0333\u0334\5\u0238\u011d\2\u0334?\3\2\2\2\u0335")
        buf.write("\u033b\5B\"\2\u0336\u033b\5D#\2\u0337\u033b\5F$\2\u0338")
        buf.write("\u033b\5H%\2\u0339\u033b\5J&\2\u033a\u0335\3\2\2\2\u033a")
        buf.write("\u0336\3\2\2\2\u033a\u0337\3\2\2\2\u033a\u0338\3\2\2\2")
        buf.write("\u033a\u0339\3\2\2\2\u033bA\3\2\2\2\u033c\u033e\7\5\2")
        buf.write("\2\u033d\u033f\5> \2\u033e\u033d\3\2\2\2\u033e\u033f\3")
        buf.write("\2\2\2\u033fC\3\2\2\2\u0340\u0342\7\t\2\2\u0341\u0343")
        buf.write("\5> \2\u0342\u0341\3\2\2\2\u0342\u0343\3\2\2\2\u0343E")
        buf.write("\3\2\2\2\u0344\u0345\7\21\2\2\u0345G\3\2\2\2\u0346\u0348")
        buf.write("\7\'\2\2\u0347\u0349\5\u0194\u00cb\2\u0348\u0347\3\2\2")
        buf.write("\2\u0348\u0349\3\2\2\2\u0349I\3\2\2\2\u034a\u034b\7(\2")
        buf.write("\2\u034b\u034c\5\u0194\u00cb\2\u034cK\3\2\2\2\u034d\u034e")
        buf.write("\7\13\2\2\u034e\u034f\5\u00a4S\2\u034fM\3\2\2\2\u0350")
        buf.write("\u0351\7\f\2\2\u0351\u0353\5\u00a4S\2\u0352\u0354\5P)")
        buf.write("\2\u0353\u0352\3\2\2\2\u0353\u0354\3\2\2\2\u0354O\3\2")
        buf.write("\2\2\u0355\u0357\5R*\2\u0356\u0355\3\2\2\2\u0357\u0358")
        buf.write("\3\2\2\2\u0358\u0356\3\2\2\2\u0358\u0359\3\2\2\2\u0359")
        buf.write("Q\3\2\2\2\u035a\u035c\7\7\2\2\u035b\u035d\5T+\2\u035c")
        buf.write("\u035b\3\2\2\2\u035c\u035d\3\2\2\2\u035d\u035e\3\2\2\2")
        buf.write("\u035e\u035f\5\u00a4S\2\u035fS\3\2\2\2\u0360\u0367\5V")
        buf.write(",\2\u0361\u0362\5V,\2\u0362\u0363\7\u0093\2\2\u0363\u0364")
        buf.write("\5V,\2\u0364\u0366\3\2\2\2\u0365\u0361\3\2\2\2\u0366\u0369")
        buf.write("\3\2\2\2\u0367\u0365\3\2\2\2\u0367\u0368\3\2\2\2\u0368")
        buf.write("U\3\2\2\2\u0369\u0367\3\2\2\2\u036a\u036c\5\u0172\u00ba")
        buf.write("\2\u036b\u036d\5,\27\2\u036c\u036b\3\2\2\2\u036c\u036d")
        buf.write("\3\2\2\2\u036dW\3\2\2\2\u036e\u0372\5Z.\2\u036f\u0372")
        buf.write("\5t;\2\u0370\u0372\5z>\2\u0371\u036e\3\2\2\2\u0371\u036f")
        buf.write("\3\2\2\2\u0371\u0370\3\2\2\2\u0372Y\3\2\2\2\u0373\u0375")
        buf.write("\5\\/\2\u0374\u0376\5^\60\2\u0375\u0374\3\2\2\2\u0375")
        buf.write("\u0376\3\2\2\2\u0376\u0378\3\2\2\2\u0377\u0379\5b\62\2")
        buf.write("\u0378\u0377\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037a\3")
        buf.write("\2\2\2\u037a\u037b\7|\2\2\u037b[\3\2\2\2\u037c\u037d\7")
        buf.write("y\2\2\u037d\u037f\5d\63\2\u037e\u0380\5\6\4\2\u037f\u037e")
        buf.write("\3\2\2\2\u037f\u0380\3\2\2\2\u0380]\3\2\2\2\u0381\u0383")
        buf.write("\5`\61\2\u0382\u0381\3\2\2\2\u0383\u0384\3\2\2\2\u0384")
        buf.write("\u0382\3\2\2\2\u0384\u0385\3\2\2\2\u0385_\3\2\2\2\u0386")
        buf.write("\u0387\7z\2\2\u0387\u0389\5d\63\2\u0388\u038a\5\6\4\2")
        buf.write("\u0389\u0388\3\2\2\2\u0389\u038a\3\2\2\2\u038aa\3\2\2")
        buf.write("\2\u038b\u038d\7{\2\2\u038c\u038e\5\6\4\2\u038d\u038c")
        buf.write("\3\2\2\2\u038d\u038e\3\2\2\2\u038ec\3\2\2\2\u038f\u0390")
        buf.write("\b\63\1\2\u0390\u039a\5f\64\2\u0391\u039a\5\u0238\u011d")
        buf.write("\2\u0392\u039a\5\u0268\u0135\2\u0393\u0394\7\u008e\2\2")
        buf.write("\u0394\u0395\5d\63\2\u0395\u0396\7\u0091\2\2\u0396\u039a")
        buf.write("\3\2\2\2\u0397\u0398\7\u0099\2\2\u0398\u039a\5d\63\4\u0399")
        buf.write("\u038f\3\2\2\2\u0399\u0391\3\2\2\2\u0399\u0392\3\2\2\2")
        buf.write("\u0399\u0393\3\2\2\2\u0399\u0397\3\2\2\2\u039a\u03a4\3")
        buf.write("\2\2\2\u039b\u039e\f\3\2\2\u039c\u039f\5\u0242\u0122\2")
        buf.write("\u039d\u039f\5\u0244\u0123\2\u039e\u039c\3\2\2\2\u039e")
        buf.write("\u039d\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a1\5d\63\4")
        buf.write("\u03a1\u03a3\3\2\2\2\u03a2\u039b\3\2\2\2\u03a3\u03a6\3")
        buf.write("\2\2\2\u03a4\u03a2\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5e")
        buf.write("\3\2\2\2\u03a6\u03a4\3\2\2\2\u03a7\u03a8\7>\2\2\u03a8")
        buf.write("\u03a9\7\u008e\2\2\u03a9\u03aa\5l\67\2\u03aa\u03ab\7\u0091")
        buf.write("\2\2\u03ab\u03c5\3\2\2\2\u03ac\u03ad\7?\2\2\u03ad\u03ae")
        buf.write("\7\u008e\2\2\u03ae\u03af\5n8\2\u03af\u03b0\7\u0091\2\2")
        buf.write("\u03b0\u03c5\3\2\2\2\u03b1\u03b2\t\3\2\2\u03b2\u03b5\7")
        buf.write("\u008e\2\2\u03b3\u03b6\5\u0246\u0124\2\u03b4\u03b6\5\u0248")
        buf.write("\u0125\2\u03b5\u03b3\3\2\2\2\u03b5\u03b4\3\2\2\2\u03b6")
        buf.write("\u03b7\3\2\2\2\u03b7\u03b8\5h\65\2\u03b8\u03b9\7\u0091")
        buf.write("\2\2\u03b9\u03c5\3\2\2\2\u03ba\u03bb\7B\2\2\u03bb\u03bc")
        buf.write("\7\u008e\2\2\u03bc\u03bd\5p9\2\u03bd\u03be\7\u0091\2\2")
        buf.write("\u03be\u03c5\3\2\2\2\u03bf\u03c0\7C\2\2\u03c0\u03c1\7")
        buf.write("\u008e\2\2\u03c1\u03c2\5r:\2\u03c2\u03c3\7\u0091\2\2\u03c3")
        buf.write("\u03c5\3\2\2\2\u03c4\u03a7\3\2\2\2\u03c4\u03ac\3\2\2\2")
        buf.write("\u03c4\u03b1\3\2\2\2\u03c4\u03ba\3\2\2\2\u03c4\u03bf\3")
        buf.write("\2\2\2\u03c5g\3\2\2\2\u03c6\u03c8\7\u00ae\2\2\u03c7\u03c9")
        buf.write("\5j\66\2\u03c8\u03c7\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9")
        buf.write("i\3\2\2\2\u03ca\u03cb\7\u008c\2\2\u03cb\u03cd\7\u00ae")
        buf.write("\2\2\u03cc\u03ce\5j\66\2\u03cd\u03cc\3\2\2\2\u03cd\u03ce")
        buf.write("\3\2\2\2\u03cek\3\2\2\2\u03cf\u03d0\t\4\2\2\u03d0m\3\2")
        buf.write("\2\2\u03d1\u03d2\t\5\2\2\u03d2o\3\2\2\2\u03d3\u03d8\5")
        buf.write("\u0238\u011d\2\u03d4\u03d5\7\u008c\2\2\u03d5\u03d7\5\u0238")
        buf.write("\u011d\2\u03d6\u03d4\3\2\2\2\u03d7\u03da\3\2\2\2\u03d8")
        buf.write("\u03d6\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9q\3\2\2\2\u03da")
        buf.write("\u03d8\3\2\2\2\u03db\u03dc\t\6\2\2\u03dcs\3\2\2\2\u03dd")
        buf.write("\u03de\7s\2\2\u03de\u03e7\7\u008e\2\2\u03df\u03e0\7t\2")
        buf.write("\2\u03e0\u03e1\7\u0094\2\2\u03e1\u03e2\5x=\2\u03e2\u03e3")
        buf.write("\7\u0093\2\2\u03e3\u03e4\7u\2\2\u03e4\u03e5\7\u0094\2")
        buf.write("\2\u03e5\u03e6\5v<\2\u03e6\u03e8\3\2\2\2\u03e7\u03df\3")
        buf.write("\2\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03ea")
        buf.write("\7\u0091\2\2\u03eau\3\2\2\2\u03eb\u03ec\7\u00af\2\2\u03ec")
        buf.write("w\3\2\2\2\u03ed\u03ee\5\u0272\u013a\2\u03eey\3\2\2\2\u03ef")
        buf.write("\u03f0\t\7\2\2\u03f0\u03f1\7\u008e\2\2\u03f1\u03f2\5|")
        buf.write("?\2\u03f2\u03f3\7\u0091\2\2\u03f3{\3\2\2\2\u03f4\u03f5")
        buf.write("\5\u0272\u013a\2\u03f5}\3\2\2\2\u03f6\u03f7\7x\2\2\u03f7")
        buf.write("\u03f8\7\u008e\2\2\u03f8\u03f9\5\u0080A\2\u03f9\u03fa")
        buf.write("\7\u0091\2\2\u03fa\177\3\2\2\2\u03fb\u0400\5\u0082B\2")
        buf.write("\u03fc\u03fd\7\u0093\2\2\u03fd\u03ff\5\u0082B\2\u03fe")
        buf.write("\u03fc\3\2\2\2\u03ff\u0402\3\2\2\2\u0400\u03fe\3\2\2\2")
        buf.write("\u0400\u0401\3\2\2\2\u0401\u0081\3\2\2\2\u0402\u0400\3")
        buf.write("\2\2\2\u0403\u0404\5\u0084C\2\u0404\u0405\5\u0086D\2\u0405")
        buf.write("\u0408\3\2\2\2\u0406\u0408\7\u00a2\2\2\u0407\u0403\3\2")
        buf.write("\2\2\u0407\u0406\3\2\2\2\u0408\u0083\3\2\2\2\u0409\u040a")
        buf.write("\t\b\2\2\u040a\u0085\3\2\2\2\u040b\u0413\7\u00af\2\2\u040c")
        buf.write("\u0413\7\u00ae\2\2\u040d\u0410\7\u00b1\2\2\u040e\u040f")
        buf.write("\7\u008c\2\2\u040f\u0411\7\u00ae\2\2\u0410\u040e\3\2\2")
        buf.write("\2\u0410\u0411\3\2\2\2\u0411\u0413\3\2\2\2\u0412\u040b")
        buf.write("\3\2\2\2\u0412\u040c\3\2\2\2\u0412\u040d\3\2\2\2\u0413")
        buf.write("\u0087\3\2\2\2\u0414\u0415\7\u0096\2\2\u0415\u0416\5\u008a")
        buf.write("F\2\u0416\u0417\7\u0097\2\2\u0417\u0089\3\2\2\2\u0418")
        buf.write("\u041d\5\u008cG\2\u0419\u041a\7\u0093\2\2\u041a\u041c")
        buf.write("\5\u008cG\2\u041b\u0419\3\2\2\2\u041c\u041f\3\2\2\2\u041d")
        buf.write("\u041b\3\2\2\2\u041d\u041e\3\2\2\2\u041e\u008b\3\2\2\2")
        buf.write("\u041f\u041d\3\2\2\2\u0420\u0426\5\u0212\u010a\2\u0421")
        buf.write("\u0424\7\u0094\2\2\u0422\u0425\5\u0210\u0109\2\u0423\u0425")
        buf.write("\5\u022a\u0116\2\u0424\u0422\3\2\2\2\u0424\u0423\3\2\2")
        buf.write("\2\u0425\u0427\3\2\2\2\u0426\u0421\3\2\2\2\u0426\u0427")
        buf.write("\3\2\2\2\u0427\u008d\3\2\2\2\u0428\u0429\7\33\2\2\u0429")
        buf.write("\u042a\5\u0090I\2\u042a\u008f\3\2\2\2\u042b\u0430\5\u0092")
        buf.write("J\2\u042c\u042d\7\u0093\2\2\u042d\u042f\5\u0092J\2\u042e")
        buf.write("\u042c\3\2\2\2\u042f\u0432\3\2\2\2\u0430\u042e\3\2\2\2")
        buf.write("\u0430\u0431\3\2\2\2\u0431\u0091\3\2\2\2\u0432\u0430\3")
        buf.write("\2\2\2\u0433\u0436\5\u0094K\2\u0434\u0436\5\u0096L\2\u0435")
        buf.write("\u0433\3\2\2\2\u0435\u0434\3\2\2\2\u0436\u0093\3\2\2\2")
        buf.write("\u0437\u0438\5\u0210\u0109\2\u0438\u043b\7\u0094\2\2\u0439")
        buf.write("\u043c\5\u0210\u0109\2\u043a\u043c\5\u022a\u0116\2\u043b")
        buf.write("\u0439\3\2\2\2\u043b\u043a\3\2\2\2\u043c\u0095\3\2\2\2")
        buf.write("\u043d\u043e\5\u0210\u0109\2\u043e\u0441\5\u024e\u0128")
        buf.write("\2\u043f\u0442\5\u0210\u0109\2\u0440\u0442\5\u020c\u0107")
        buf.write("\2\u0441\u043f\3\2\2\2\u0441\u0440\3\2\2\2\u0442\u0097")
        buf.write("\3\2\2\2\u0443\u0444\7\u0096\2\2\u0444\u0445\5\u009aN")
        buf.write("\2\u0445\u0446\7\u0097\2\2\u0446\u0099\3\2\2\2\u0447\u044c")
        buf.write("\5\u009cO\2\u0448\u0449\7\u0093\2\2\u0449\u044b\5\u009c")
        buf.write("O\2\u044a\u0448\3\2\2\2\u044b\u044e\3\2\2\2\u044c\u044a")
        buf.write("\3\2\2\2\u044c\u044d\3\2\2\2\u044d\u009b\3\2\2\2\u044e")
        buf.write("\u044c\3\2\2\2\u044f\u0450\5\u020c\u0107\2\u0450\u009d")
        buf.write("\3\2\2\2\u0451\u0461\5\u00a6T\2\u0452\u0461\5\u00aeX\2")
        buf.write("\u0453\u0461\5\u00b6\\\2\u0454\u0461\5\u00d0i\2\u0455")
        buf.write("\u0461\5\u00d6l\2\u0456\u0461\5\u00eex\2\u0457\u0461\5")
        buf.write("\u0110\u0089\2\u0458\u0461\5\u011a\u008e\2\u0459\u0461")
        buf.write("\5\u0124\u0093\2\u045a\u0461\5\u013a\u009e\2\u045b\u0461")
        buf.write("\5\u0140\u00a1\2\u045c\u0461\5\u0142\u00a2\2\u045d\u0461")
        buf.write("\5\u014a\u00a6\2\u045e\u0461\5\u0150\u00a9\2\u045f\u0461")
        buf.write("\5\u015a\u00ae\2\u0460\u0451\3\2\2\2\u0460\u0452\3\2\2")
        buf.write("\2\u0460\u0453\3\2\2\2\u0460\u0454\3\2\2\2\u0460\u0455")
        buf.write("\3\2\2\2\u0460\u0456\3\2\2\2\u0460\u0457\3\2\2\2\u0460")
        buf.write("\u0458\3\2\2\2\u0460\u0459\3\2\2\2\u0460\u045a\3\2\2\2")
        buf.write("\u0460\u045b\3\2\2\2\u0460\u045c\3\2\2\2\u0460\u045d\3")
        buf.write("\2\2\2\u0460\u045e\3\2\2\2\u0460\u045f\3\2\2\2\u0461\u0463")
        buf.write("\3\2\2\2\u0462\u0464\7\u0095\2\2\u0463\u0462\3\2\2\2\u0463")
        buf.write("\u0464\3\2\2\2\u0464\u009f\3\2\2\2\u0465\u0467\5\u009e")
        buf.write("P\2\u0466\u0465\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u0466")
        buf.write("\3\2\2\2\u0468\u0469\3\2\2\2\u0469\u00a1\3\2\2\2\u046a")
        buf.write("\u046c\5\6\4\2\u046b\u046a\3\2\2\2\u046b\u046c\3\2\2\2")
        buf.write("\u046c\u00a3\3\2\2\2\u046d\u046f\7\u008d\2\2\u046e\u0470")
        buf.write("\5\6\4\2\u046f\u046e\3\2\2\2\u046f\u0470\3\2\2\2\u0470")
        buf.write("\u0471\3\2\2\2\u0471\u0472\7\u0090\2\2\u0472\u00a5\3\2")
        buf.write("\2\2\u0473\u0475\5\u018c\u00c7\2\u0474\u0473\3\2\2\2\u0474")
        buf.write("\u0475\3\2\2\2\u0475\u0476\3\2\2\2\u0476\u0478\7\25\2")
        buf.write("\2\u0477\u0479\5\u00a8U\2\u0478\u0477\3\2\2\2\u0478\u0479")
        buf.write("\3\2\2\2\u0479\u047a\3\2\2\2\u047a\u047b\5\u00aaV\2\u047b")
        buf.write("\u00a7\3\2\2\2\u047c\u047d\t\t\2\2\u047d\u00a9\3\2\2\2")
        buf.write("\u047e\u0483\5\u00acW\2\u047f\u0480\7\u008c\2\2\u0480")
        buf.write("\u0482\5\u00acW\2\u0481\u047f\3\2\2\2\u0482\u0485\3\2")
        buf.write("\2\2\u0483\u0481\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u00ab")
        buf.write("\3\2\2\2\u0485\u0483\3\2\2\2\u0486\u0489\5\u0238\u011d")
        buf.write("\2\u0487\u0489\5\u0256\u012c\2\u0488\u0486\3\2\2\2\u0488")
        buf.write("\u0487\3\2\2\2\u0489\u00ad\3\2\2\2\u048a\u048c\5\u018c")
        buf.write("\u00c7\2\u048b\u048a\3\2\2\2\u048b\u048c\3\2\2\2\u048c")
        buf.write("\u048e\3\2\2\2\u048d\u048f\5\u016c\u00b7\2\u048e\u048d")
        buf.write("\3\2\2\2\u048e\u048f\3\2\2\2\u048f\u0490\3\2\2\2\u0490")
        buf.write("\u0491\7\35\2\2\u0491\u0492\5\u00b0Y\2\u0492\u00af\3\2")
        buf.write("\2\2\u0493\u0498\5\u00b2Z\2\u0494\u0495\7\u0093\2\2\u0495")
        buf.write("\u0497\5\u00b2Z\2\u0496\u0494\3\2\2\2\u0497\u049a\3\2")
        buf.write("\2\2\u0498\u0496\3\2\2\2\u0498\u0499\3\2\2\2\u0499\u00b1")
        buf.write("\3\2\2\2\u049a\u0498\3\2\2\2\u049b\u049d\5\u0172\u00ba")
        buf.write("\2\u049c\u049e\5\u00b4[\2\u049d\u049c\3\2\2\2\u049d\u049e")
        buf.write("\3\2\2\2\u049e\u00b3\3\2\2\2\u049f\u04a0\7\u009e\2\2\u04a0")
        buf.write("\u04a1\5\u0194\u00cb\2\u04a1\u00b5\3\2\2\2\u04a2\u04b3")
        buf.write("\5\u00b8]\2\u04a3\u04b0\5\u00ba^\2\u04a4\u04a5\5\u00b4")
        buf.write("[\2\u04a5\u04a6\5\u00caf\2\u04a6\u04b1\3\2\2\2\u04a7\u04ae")
        buf.write("\5\u020e\u0108\2\u04a8\u04af\5\u00bc_\2\u04a9\u04af\5")
        buf.write("\u00c4c\2\u04aa\u04ac\5\u00b4[\2\u04ab\u04aa\3\2\2\2\u04ab")
        buf.write("\u04ac\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad\u04af\5\u00ca")
        buf.write("f\2\u04ae\u04a8\3\2\2\2\u04ae\u04a9\3\2\2\2\u04ae\u04ab")
        buf.write("\3\2\2\2\u04af\u04b1\3\2\2\2\u04b0\u04a4\3\2\2\2\u04b0")
        buf.write("\u04a7\3\2\2\2\u04b1\u04b4\3\2\2\2\u04b2\u04b4\5\u00b0")
        buf.write("Y\2\u04b3\u04a3\3\2\2\2\u04b3\u04b2\3\2\2\2\u04b4\u00b7")
        buf.write("\3\2\2\2\u04b5\u04b7\5\u018c\u00c7\2\u04b6\u04b5\3\2\2")
        buf.write("\2\u04b6\u04b7\3\2\2\2\u04b7\u04b9\3\2\2\2\u04b8\u04ba")
        buf.write("\5\u016c\u00b7\2\u04b9\u04b8\3\2\2\2\u04b9\u04ba\3\2\2")
        buf.write("\2\u04ba\u04bb\3\2\2\2\u04bb\u04bc\7\36\2\2\u04bc\u00b9")
        buf.write("\3\2\2\2\u04bd\u04be\5\u0238\u011d\2\u04be\u00bb\3\2\2")
        buf.write("\2\u04bf\u04c7\7\u008d\2\2\u04c0\u04c2\5\u00be`\2\u04c1")
        buf.write("\u04c3\5\u00c0a\2\u04c2\u04c1\3\2\2\2\u04c2\u04c3\3\2")
        buf.write("\2\2\u04c3\u04c8\3\2\2\2\u04c4\u04c5\5\u00c0a\2\u04c5")
        buf.write("\u04c6\5\u00be`\2\u04c6\u04c8\3\2\2\2\u04c7\u04c0\3\2")
        buf.write("\2\2\u04c7\u04c4\3\2\2\2\u04c8\u04c9\3\2\2\2\u04c9\u04ca")
        buf.write("\7\u0090\2\2\u04ca\u04cd\3\2\2\2\u04cb\u04cd\5\u00a4S")
        buf.write("\2\u04cc\u04bf\3\2\2\2\u04cc\u04cb\3\2\2\2\u04cd\u00bd")
        buf.write("\3\2\2\2\u04ce\u04d0\5\u018c\u00c7\2\u04cf\u04ce\3\2\2")
        buf.write("\2\u04cf\u04d0\3\2\2\2\u04d0\u04d2\3\2\2\2\u04d1\u04d3")
        buf.write("\5\u0170\u00b9\2\u04d2\u04d1\3\2\2\2\u04d2\u04d3\3\2\2")
        buf.write("\2\u04d3\u04d4\3\2\2\2\u04d4\u04d6\7 \2\2\u04d5\u04d7")
        buf.write("\5\u00a4S\2\u04d6\u04d5\3\2\2\2\u04d6\u04d7\3\2\2\2\u04d7")
        buf.write("\u00bf\3\2\2\2\u04d8\u04da\5\u018c\u00c7\2\u04d9\u04d8")
        buf.write("\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04dc\3\2\2\2\u04db")
        buf.write("\u04dd\5\u0170\u00b9\2\u04dc\u04db\3\2\2\2\u04dc\u04dd")
        buf.write("\3\2\2\2\u04dd\u04de\3\2\2\2\u04de\u04e0\7!\2\2\u04df")
        buf.write("\u04e1\5\u00c2b\2\u04e0\u04df\3\2\2\2\u04e0\u04e1\3\2")
        buf.write("\2\2\u04e1\u04e3\3\2\2\2\u04e2\u04e4\5\u00a4S\2\u04e3")
        buf.write("\u04e2\3\2\2\2\u04e3\u04e4\3\2\2\2\u04e4\u00c1\3\2\2\2")
        buf.write("\u04e5\u04e6\7\u008e\2\2\u04e6\u04e7\5\u0238\u011d\2\u04e7")
        buf.write("\u04e8\7\u0091\2\2\u04e8\u00c3\3\2\2\2\u04e9\u04f1\7\u008d")
        buf.write("\2\2\u04ea\u04ec\5\u00c6d\2\u04eb\u04ed\5\u00c8e\2\u04ec")
        buf.write("\u04eb\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04f2\3\2\2\2")
        buf.write("\u04ee\u04ef\5\u00c8e\2\u04ef\u04f0\5\u00c6d\2\u04f0\u04f2")
        buf.write("\3\2\2\2\u04f1\u04ea\3\2\2\2\u04f1\u04ee\3\2\2\2\u04f2")
        buf.write("\u04f3\3\2\2\2\u04f3\u04f4\7\u0090\2\2\u04f4\u00c5\3\2")
        buf.write("\2\2\u04f5\u04f7\5\u018c\u00c7\2\u04f6\u04f5\3\2\2\2\u04f6")
        buf.write("\u04f7\3\2\2\2\u04f7\u04f9\3\2\2\2\u04f8\u04fa\5\u0170")
        buf.write("\u00b9\2\u04f9\u04f8\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa")
        buf.write("\u04fb\3\2\2\2\u04fb\u04fc\7 \2\2\u04fc\u00c7\3\2\2\2")
        buf.write("\u04fd\u04ff\5\u018c\u00c7\2\u04fe\u04fd\3\2\2\2\u04fe")
        buf.write("\u04ff\3\2\2\2\u04ff\u0501\3\2\2\2\u0500\u0502\5\u0170")
        buf.write("\u00b9\2\u0501\u0500\3\2\2\2\u0501\u0502\3\2\2\2\u0502")
        buf.write("\u0503\3\2\2\2\u0503\u0504\7!\2\2\u0504\u00c9\3\2\2\2")
        buf.write("\u0505\u050e\7\u008d\2\2\u0506\u0508\5\u00ccg\2\u0507")
        buf.write("\u0509\5\u00ceh\2\u0508\u0507\3\2\2\2\u0508\u0509\3\2")
        buf.write("\2\2\u0509\u050f\3\2\2\2\u050a\u050c\5\u00ceh\2\u050b")
        buf.write("\u050d\5\u00ccg\2\u050c\u050b\3\2\2\2\u050c\u050d\3\2")
        buf.write("\2\2\u050d\u050f\3\2\2\2\u050e\u0506\3\2\2\2\u050e\u050a")
        buf.write("\3\2\2\2\u050f\u0510\3\2\2\2\u0510\u0511\7\u0090\2\2\u0511")
        buf.write("\u00cb\3\2\2\2\u0512\u0514\5\u018c\u00c7\2\u0513\u0512")
        buf.write("\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0515\3\2\2\2\u0515")
        buf.write("\u0517\7\"\2\2\u0516\u0518\5\u00c2b\2\u0517\u0516\3\2")
        buf.write("\2\2\u0517\u0518\3\2\2\2\u0518\u0519\3\2\2\2\u0519\u051a")
        buf.write("\5\u00a4S\2\u051a\u00cd\3\2\2\2\u051b\u051d\5\u018c\u00c7")
        buf.write("\2\u051c\u051b\3\2\2\2\u051c\u051d\3\2\2\2\u051d\u051e")
        buf.write("\3\2\2\2\u051e\u0520\7#\2\2\u051f\u0521\5\u00c2b\2\u0520")
        buf.write("\u051f\3\2\2\2\u0520\u0521\3\2\2\2\u0521\u0522\3\2\2\2")
        buf.write("\u0522\u0523\5\u00a4S\2\u0523\u00cf\3\2\2\2\u0524\u0526")
        buf.write("\5\u018c\u00c7\2\u0525\u0524\3\2\2\2\u0525\u0526\3\2\2")
        buf.write("\2\u0526\u0528\3\2\2\2\u0527\u0529\5\u016e\u00b8\2\u0528")
        buf.write("\u0527\3\2\2\2\u0528\u0529\3\2\2\2\u0529\u052a\3\2\2\2")
        buf.write("\u052a\u052b\7=\2\2\u052b\u052d\5\u00d2j\2\u052c\u052e")
        buf.write("\5\u0088E\2\u052d\u052c\3\2\2\2\u052d\u052e\3\2\2\2\u052e")
        buf.write("\u052f\3\2\2\2\u052f\u0530\5\u00d4k\2\u0530\u00d1\3\2")
        buf.write("\2\2\u0531\u0532\5\u0238\u011d\2\u0532\u00d3\3\2\2\2\u0533")
        buf.write("\u0534\7\u009e\2\2\u0534\u0535\5\u020c\u0107\2\u0535\u00d5")
        buf.write("\3\2\2\2\u0536\u0537\5\u00d8m\2\u0537\u0539\5\u00dan\2")
        buf.write("\u0538\u053a\5\u0088E\2\u0539\u0538\3\2\2\2\u0539\u053a")
        buf.write("\3\2\2\2\u053a\u053b\3\2\2\2\u053b\u053d\5\u00dco\2\u053c")
        buf.write("\u053e\5\u008eH\2\u053d\u053c\3\2\2\2\u053d\u053e\3\2")
        buf.write("\2\2\u053e\u0540\3\2\2\2\u053f\u0541\5\u00e0q\2\u0540")
        buf.write("\u053f\3\2\2\2\u0540\u0541\3\2\2\2\u0541\u00d7\3\2\2\2")
        buf.write("\u0542\u0544\5\u018c\u00c7\2\u0543\u0542\3\2\2\2\u0543")
        buf.write("\u0544\3\2\2\2\u0544\u0546\3\2\2\2\u0545\u0547\5\u016c")
        buf.write("\u00b7\2\u0546\u0545\3\2\2\2\u0546\u0547\3\2\2\2\u0547")
        buf.write("\u0548\3\2\2\2\u0548\u0549\7\22\2\2\u0549\u00d9\3\2\2")
        buf.write("\2\u054a\u054d\5\u0238\u011d\2\u054b\u054d\5\u0256\u012c")
        buf.write("\2\u054c\u054a\3\2\2\2\u054c\u054b\3\2\2\2\u054d\u00db")
        buf.write("\3\2\2\2\u054e\u0553\5\u00e2r\2\u054f\u0551\7)\2\2\u0550")
        buf.write("\u054f\3\2\2\2\u0550\u0551\3\2\2\2\u0551\u0554\3\2\2\2")
        buf.write("\u0552\u0554\7*\2\2\u0553\u0550\3\2\2\2\u0553\u0552\3")
        buf.write("\2\2\2\u0554\u0556\3\2\2\2\u0555\u0557\5\u00dep\2\u0556")
        buf.write("\u0555\3\2\2\2\u0556\u0557\3\2\2\2\u0557\u00dd\3\2\2\2")
        buf.write("\u0558\u055a\5\u024a\u0126\2\u0559\u055b\5\u018c\u00c7")
        buf.write("\2\u055a\u0559\3\2\2\2\u055a\u055b\3\2\2\2\u055b\u055c")
        buf.write("\3\2\2\2\u055c\u055d\5\u020c\u0107\2\u055d\u00df\3\2\2")
        buf.write("\2\u055e\u055f\5\u00a4S\2\u055f\u00e1\3\2\2\2\u0560\u0562")
        buf.write("\7\u008e\2\2\u0561\u0563\5\u00e4s\2\u0562\u0561\3\2\2")
        buf.write("\2\u0562\u0563\3\2\2\2\u0563\u0564\3\2\2\2\u0564\u0565")
        buf.write("\7\u0091\2\2\u0565\u00e3\3\2\2\2\u0566\u056b\5\u00e6t")
        buf.write("\2\u0567\u0568\7\u0093\2\2\u0568\u056a\5\u00e6t\2\u0569")
        buf.write("\u0567\3\2\2\2\u056a\u056d\3\2\2\2\u056b\u0569\3\2\2\2")
        buf.write("\u056b\u056c\3\2\2\2\u056c\u00e5\3\2\2\2\u056d\u056b\3")
        buf.write("\2\2\2\u056e\u0570\5\u018c\u00c7\2\u056f\u056e\3\2\2\2")
        buf.write("\u056f\u0570\3\2\2\2\u0570\u0572\3\2\2\2\u0571\u0573\5")
        buf.write("\u00e8u\2\u0572\u0571\3\2\2\2\u0572\u0573\3\2\2\2\u0573")
        buf.write("\u0574\3\2\2\2\u0574\u0575\5\u00eav\2\u0575\u057a\5\u020e")
        buf.write("\u0108\2\u0576\u0578\5\u00ecw\2\u0577\u0576\3\2\2\2\u0577")
        buf.write("\u0578\3\2\2\2\u0578\u057b\3\2\2\2\u0579\u057b\5\u024c")
        buf.write("\u0127\2\u057a\u0577\3\2\2\2\u057a\u0579\3\2\2\2\u057b")
        buf.write("\u00e7\3\2\2\2\u057c\u057d\5\u0238\u011d\2\u057d\u00e9")
        buf.write("\3\2\2\2\u057e\u057f\5\u0238\u011d\2\u057f\u00eb\3\2\2")
        buf.write("\2\u0580\u0581\7\u009e\2\2\u0581\u0582\5\u0194\u00cb\2")
        buf.write("\u0582\u00ed\3\2\2\2\u0583\u0585\5\u018c\u00c7\2\u0584")
        buf.write("\u0583\3\2\2\2\u0584\u0585\3\2\2\2\u0585\u0587\3\2\2\2")
        buf.write("\u0586\u0588\5\u016e\u00b8\2\u0587\u0586\3\2\2\2\u0587")
        buf.write("\u0588\3\2\2\2\u0588\u058b\3\2\2\2\u0589\u058c\5\u00f0")
        buf.write("y\2\u058a\u058c\5\u0100\u0081\2\u058b\u0589\3\2\2\2\u058b")
        buf.write("\u058a\3\2\2\2\u058c\u00ef\3\2\2\2\u058d\u058f\7+\2\2")
        buf.write("\u058e\u058d\3\2\2\2\u058e\u058f\3\2\2\2\u058f\u0590\3")
        buf.write("\2\2\2\u0590\u0591\7\17\2\2\u0591\u0593\5\u00fc\177\2")
        buf.write("\u0592\u0594\5\u0088E\2\u0593\u0592\3\2\2\2\u0593\u0594")
        buf.write("\3\2\2\2\u0594\u0596\3\2\2\2\u0595\u0597\5\u0234\u011b")
        buf.write("\2\u0596\u0595\3\2\2\2\u0596\u0597\3\2\2\2\u0597\u0599")
        buf.write("\3\2\2\2\u0598\u059a\5\u008eH\2\u0599\u0598\3\2\2\2\u0599")
        buf.write("\u059a\3\2\2\2\u059a\u059b\3\2\2\2\u059b\u059d\7\u008d")
        buf.write("\2\2\u059c\u059e\5\u00f2z\2\u059d\u059c\3\2\2\2\u059d")
        buf.write("\u059e\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u05a0\7\u0090")
        buf.write("\2\2\u05a0\u00f1\3\2\2\2\u05a1\u05a3\5\u00f4{\2\u05a2")
        buf.write("\u05a1\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4\u05a2\3\2\2\2")
        buf.write("\u05a4\u05a5\3\2\2\2\u05a5\u00f3\3\2\2\2\u05a6\u05aa\5")
        buf.write("\u009eP\2\u05a7\u05aa\5\u00f6|\2\u05a8\u05aa\5X-\2\u05a9")
        buf.write("\u05a6\3\2\2\2\u05a9\u05a7\3\2\2\2\u05a9\u05a8\3\2\2\2")
        buf.write("\u05aa\u00f5\3\2\2\2\u05ab\u05ad\5\u018c\u00c7\2\u05ac")
        buf.write("\u05ab\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad\u05af\3\2\2\2")
        buf.write("\u05ae\u05b0\7+\2\2\u05af\u05ae\3\2\2\2\u05af\u05b0\3")
        buf.write("\2\2\2\u05b0\u05b1\3\2\2\2\u05b1\u05b2\7\6\2\2\u05b2\u05b3")
        buf.write("\5\u00f8}\2\u05b3\u00f7\3\2\2\2\u05b4\u05b9\5\u00fa~\2")
        buf.write("\u05b5\u05b6\7\u0093\2\2\u05b6\u05b8\5\u00fa~\2\u05b7")
        buf.write("\u05b5\3\2\2\2\u05b8\u05bb\3\2\2\2\u05b9\u05b7\3\2\2\2")
        buf.write("\u05b9\u05ba\3\2\2\2\u05ba\u00f9\3\2\2\2\u05bb\u05b9\3")
        buf.write("\2\2\2\u05bc\u05c6\5\u022e\u0118\2\u05bd\u05c3\5\u00fe")
        buf.write("\u0080\2\u05be\u05c4\5\u0214\u010b\2\u05bf\u05c0\7\u008e")
        buf.write("\2\2\u05c0\u05c1\5\u020c\u0107\2\u05c1\u05c2\7\u0091\2")
        buf.write("\2\u05c2\u05c4\3\2\2\2\u05c3\u05be\3\2\2\2\u05c3\u05bf")
        buf.write("\3\2\2\2\u05c3\u05c4\3\2\2\2\u05c4\u05c6\3\2\2\2\u05c5")
        buf.write("\u05bc\3\2\2\2\u05c5\u05bd\3\2\2\2\u05c6\u00fb\3\2\2\2")
        buf.write("\u05c7\u05c8\5\u0238\u011d\2\u05c8\u00fd\3\2\2\2\u05c9")
        buf.write("\u05ca\5\u0238\u011d\2\u05ca\u00ff\3\2\2\2\u05cb\u05cc")
        buf.write("\7\17\2\2\u05cc\u05ce\5\u00fc\177\2\u05cd\u05cf\5\u0088")
        buf.write("E\2\u05ce\u05cd\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf\u05d0")
        buf.write("\3\2\2\2\u05d0\u05d2\5\u0234\u011b\2\u05d1\u05d3\5\u008e")
        buf.write("H\2\u05d2\u05d1\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3\u05d4")
        buf.write("\3\2\2\2\u05d4\u05d5\7\u008d\2\2\u05d5\u05d6\5\u0102\u0082")
        buf.write("\2\u05d6\u05d7\7\u0090\2\2\u05d7\u0101\3\2\2\2\u05d8\u05da")
        buf.write("\5\u0104\u0083\2\u05d9\u05d8\3\2\2\2\u05da\u05db\3\2\2")
        buf.write("\2\u05db\u05d9\3\2\2\2\u05db\u05dc\3\2\2\2\u05dc\u0103")
        buf.write("\3\2\2\2\u05dd\u05e1\5\u009eP\2\u05de\u05e1\5\u0106\u0084")
        buf.write("\2\u05df\u05e1\5X-\2\u05e0\u05dd\3\2\2\2\u05e0\u05de\3")
        buf.write("\2\2\2\u05e0\u05df\3\2\2\2\u05e1\u0105\3\2\2\2\u05e2\u05e4")
        buf.write("\5\u018c\u00c7\2\u05e3\u05e2\3\2\2\2\u05e3\u05e4\3\2\2")
        buf.write("\2\u05e4\u05e5\3\2\2\2\u05e5\u05e6\7\6\2\2\u05e6\u05e7")
        buf.write("\5\u0108\u0085\2\u05e7\u0107\3\2\2\2\u05e8\u05ed\5\u010a")
        buf.write("\u0086\2\u05e9\u05ea\7\u0093\2\2\u05ea\u05ec\5\u010a\u0086")
        buf.write("\2\u05eb\u05e9\3\2\2\2\u05ec\u05ef\3\2\2\2\u05ed\u05eb")
        buf.write("\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ee\u0109\3\2\2\2\u05ef")
        buf.write("\u05ed\3\2\2\2\u05f0\u05f2\5\u00fe\u0080\2\u05f1\u05f3")
        buf.write("\5\u010c\u0087\2\u05f2\u05f1\3\2\2\2\u05f2\u05f3\3\2\2")
        buf.write("\2\u05f3\u010b\3\2\2\2\u05f4\u05f5\7\u009e\2\2\u05f5\u05f6")
        buf.write("\5\u010e\u0088\2\u05f6\u010d\3\2\2\2\u05f7\u05fb\5\u0266")
        buf.write("\u0134\2\u05f8\u05fb\5\u0272\u013a\2\u05f9\u05fb\5\u0268")
        buf.write("\u0135\2\u05fa\u05f7\3\2\2\2\u05fa\u05f8\3\2\2\2\u05fa")
        buf.write("\u05f9\3\2\2\2\u05fb\u010f\3\2\2\2\u05fc\u05fe\5\u018c")
        buf.write("\u00c7\2\u05fd\u05fc\3\2\2\2\u05fd\u05fe\3\2\2\2\u05fe")
        buf.write("\u0600\3\2\2\2\u05ff\u0601\5\u016e\u00b8\2\u0600\u05ff")
        buf.write("\3\2\2\2\u0600\u0601\3\2\2\2\u0601\u0602\3\2\2\2\u0602")
        buf.write("\u0603\7&\2\2\u0603\u0605\5\u0112\u008a\2\u0604\u0606")
        buf.write("\5\u0088E\2\u0605\u0604\3\2\2\2\u0605\u0606\3\2\2\2\u0606")
        buf.write("\u0608\3\2\2\2\u0607\u0609\5\u0234\u011b\2\u0608\u0607")
        buf.write("\3\2\2\2\u0608\u0609\3\2\2\2\u0609\u060b\3\2\2\2\u060a")
        buf.write("\u060c\5\u008eH\2\u060b\u060a\3\2\2\2\u060b\u060c\3\2")
        buf.write("\2\2\u060c\u060d\3\2\2\2\u060d\u060e\5\u0114\u008b\2\u060e")
        buf.write("\u0111\3\2\2\2\u060f\u0610\5\u0238\u011d\2\u0610\u0113")
        buf.write("\3\2\2\2\u0611\u0612\7\u008d\2\2\u0612\u0613\5\u0116\u008c")
        buf.write("\2\u0613\u0614\7\u0090\2\2\u0614\u0115\3\2\2\2\u0615\u0617")
        buf.write("\5\u0118\u008d\2\u0616\u0615\3\2\2\2\u0617\u061a\3\2\2")
        buf.write("\2\u0618\u0616\3\2\2\2\u0618\u0619\3\2\2\2\u0619\u0117")
        buf.write("\3\2\2\2\u061a\u0618\3\2\2\2\u061b\u061e\5\u009eP\2\u061c")
        buf.write("\u061e\5X-\2\u061d\u061b\3\2\2\2\u061d\u061c\3\2\2\2\u061e")
        buf.write("\u0119\3\2\2\2\u061f\u0621\5\u018c\u00c7\2\u0620\u061f")
        buf.write("\3\2\2\2\u0620\u0621\3\2\2\2\u0621\u062c\3\2\2\2\u0622")
        buf.write("\u0624\5\u016e\u00b8\2\u0623\u0622\3\2\2\2\u0623\u0624")
        buf.write("\3\2\2\2\u0624\u0626\3\2\2\2\u0625\u0627\7\27\2\2\u0626")
        buf.write("\u0625\3\2\2\2\u0626\u0627\3\2\2\2\u0627\u062d\3\2\2\2")
        buf.write("\u0628\u062a\7\27\2\2\u0629\u062b\5\u016e\u00b8\2\u062a")
        buf.write("\u0629\3\2\2\2\u062a\u062b\3\2\2\2\u062b\u062d\3\2\2\2")
        buf.write("\u062c\u0623\3\2\2\2\u062c\u0628\3\2\2\2\u062d\u062e\3")
        buf.write("\2\2\2\u062e\u062f\7\b\2\2\u062f\u0631\5\u011c\u008f\2")
        buf.write("\u0630\u0632\5\u0088E\2\u0631\u0630\3\2\2\2\u0631\u0632")
        buf.write("\3\2\2\2\u0632\u0634\3\2\2\2\u0633\u0635\5\u0234\u011b")
        buf.write("\2\u0634\u0633\3\2\2\2\u0634\u0635\3\2\2\2\u0635\u0637")
        buf.write("\3\2\2\2\u0636\u0638\5\u008eH\2\u0637\u0636\3\2\2\2\u0637")
        buf.write("\u0638\3\2\2\2\u0638\u0639\3\2\2\2\u0639\u063a\5\u011e")
        buf.write("\u0090\2\u063a\u011b\3\2\2\2\u063b\u063c\5\u0238\u011d")
        buf.write("\2\u063c\u011d\3\2\2\2\u063d\u063e\7\u008d\2\2\u063e\u063f")
        buf.write("\5\u0120\u0091\2\u063f\u0640\7\u0090\2\2\u0640\u011f\3")
        buf.write("\2\2\2\u0641\u0643\5\u0122\u0092\2\u0642\u0641\3\2\2\2")
        buf.write("\u0643\u0646\3\2\2\2\u0644\u0642\3\2\2\2\u0644\u0645\3")
        buf.write("\2\2\2\u0645\u0121\3\2\2\2\u0646\u0644\3\2\2\2\u0647\u064a")
        buf.write("\5\u009eP\2\u0648\u064a\5X-\2\u0649\u0647\3\2\2\2\u0649")
        buf.write("\u0648\3\2\2\2\u064a\u0123\3\2\2\2\u064b\u064d\5\u018c")
        buf.write("\u00c7\2\u064c\u064b\3\2\2\2\u064c\u064d\3\2\2\2\u064d")
        buf.write("\u064f\3\2\2\2\u064e\u0650\5\u016e\u00b8\2\u064f\u064e")
        buf.write("\3\2\2\2\u064f\u0650\3\2\2\2\u0650\u0651\3\2\2\2\u0651")
        buf.write("\u0652\7\37\2\2\u0652\u0656\5\u0126\u0094\2\u0653\u0654")
        buf.write("\7\u0094\2\2\u0654\u0657\7\b\2\2\u0655\u0657\5\u0234\u011b")
        buf.write("\2\u0656\u0653\3\2\2\2\u0656\u0655\3\2\2\2\u0656\u0657")
        buf.write("\3\2\2\2\u0657\u0659\3\2\2\2\u0658\u065a\5\u008eH\2\u0659")
        buf.write("\u0658\3\2\2\2\u0659\u065a\3\2\2\2\u065a\u065b\3\2\2\2")
        buf.write("\u065b\u065c\5\u0128\u0095\2\u065c\u0125\3\2\2\2\u065d")
        buf.write("\u065e\5\u0238\u011d\2\u065e\u0127\3\2\2\2\u065f\u0660")
        buf.write("\7\u008d\2\2\u0660\u0661\5\u012a\u0096\2\u0661\u0662\7")
        buf.write("\u0090\2\2\u0662\u0129\3\2\2\2\u0663\u0665\5\u012c\u0097")
        buf.write("\2\u0664\u0663\3\2\2\2\u0665\u0668\3\2\2\2\u0666\u0664")
        buf.write("\3\2\2\2\u0666\u0667\3\2\2\2\u0667\u012b\3\2\2\2\u0668")
        buf.write("\u0666\3\2\2\2\u0669\u066c\5\u012e\u0098\2\u066a\u066c")
        buf.write("\5X-\2\u066b\u0669\3\2\2\2\u066b\u066a\3\2\2\2\u066c\u012d")
        buf.write("\3\2\2\2\u066d\u0674\5\u0130\u0099\2\u066e\u0674\5\u0132")
        buf.write("\u009a\2\u066f\u0674\5\u0134\u009b\2\u0670\u0674\5\u0136")
        buf.write("\u009c\2\u0671\u0674\5\u0138\u009d\2\u0672\u0674\5\u00d0")
        buf.write("i\2\u0673\u066d\3\2\2\2\u0673\u066e\3\2\2\2\u0673\u066f")
        buf.write("\3\2\2\2\u0673\u0670\3\2\2\2\u0673\u0671\3\2\2\2\u0673")
        buf.write("\u0672\3\2\2\2\u0674\u012f\3\2\2\2\u0675\u0676\5\u00b8")
        buf.write("]\2\u0676\u0677\5\u00ba^\2\u0677\u0678\5\u020e\u0108\2")
        buf.write("\u0678\u0679\5\u00c4c\2\u0679\u0131\3\2\2\2\u067a\u067b")
        buf.write("\5\u00d8m\2\u067b\u067d\5\u00dan\2\u067c\u067e\5\u0088")
        buf.write("E\2\u067d\u067c\3\2\2\2\u067d\u067e\3\2\2\2\u067e\u067f")
        buf.write("\3\2\2\2\u067f\u0681\5\u00dco\2\u0680\u0682\5\u008eH\2")
        buf.write("\u0681\u0680\3\2\2\2\u0681\u0682\3\2\2\2\u0682\u0133\3")
        buf.write("\2\2\2\u0683\u0685\5\u013c\u009f\2\u0684\u0686\5\u0088")
        buf.write("E\2\u0685\u0684\3\2\2\2\u0685\u0686\3\2\2\2\u0686\u0687")
        buf.write("\3\2\2\2\u0687\u068c\5\u00e2r\2\u0688\u068a\7)\2\2\u0689")
        buf.write("\u0688\3\2\2\2\u0689\u068a\3\2\2\2\u068a\u068d\3\2\2\2")
        buf.write("\u068b\u068d\7*\2\2\u068c\u0689\3\2\2\2\u068c\u068b\3")
        buf.write("\2\2\2\u068d\u068f\3\2\2\2\u068e\u0690\5\u008eH\2\u068f")
        buf.write("\u068e\3\2\2\2\u068f\u0690\3\2\2\2\u0690\u0135\3\2\2\2")
        buf.write("\u0691\u0692\5\u014c\u00a7\2\u0692\u0694\5\u014e\u00a8")
        buf.write("\2\u0693\u0695\5\u008eH\2\u0694\u0693\3\2\2\2\u0694\u0695")
        buf.write("\3\2\2\2\u0695\u0696\3\2\2\2\u0696\u0697\5\u00c4c\2\u0697")
        buf.write("\u0137\3\2\2\2\u0698\u069a\5\u018c\u00c7\2\u0699\u0698")
        buf.write("\3\2\2\2\u0699\u069a\3\2\2\2\u069a\u069c\3\2\2\2\u069b")
        buf.write("\u069d\5\u016e\u00b8\2\u069c\u069b\3\2\2\2\u069c\u069d")
        buf.write("\3\2\2\2\u069d\u069e\3\2\2\2\u069e\u069f\7.\2\2\u069f")
        buf.write("\u06a1\5\u00d2j\2\u06a0\u06a2\5\u0234\u011b\2\u06a1\u06a0")
        buf.write("\3\2\2\2\u06a1\u06a2\3\2\2\2\u06a2\u06a4\3\2\2\2\u06a3")
        buf.write("\u06a5\5\u00d4k\2\u06a4\u06a3\3\2\2\2\u06a4\u06a5\3\2")
        buf.write("\2\2\u06a5\u06a7\3\2\2\2\u06a6\u06a8\5\u008eH\2\u06a7")
        buf.write("\u06a6\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8\u0139\3\2\2\2")
        buf.write("\u06a9\u06ab\5\u013c\u009f\2\u06aa\u06ac\5\u0088E\2\u06ab")
        buf.write("\u06aa\3\2\2\2\u06ab\u06ac\3\2\2\2\u06ac\u06ad\3\2\2\2")
        buf.write("\u06ad\u06af\5\u00e2r\2\u06ae\u06b0\t\n\2\2\u06af\u06ae")
        buf.write("\3\2\2\2\u06af\u06b0\3\2\2\2\u06b0\u06b2\3\2\2\2\u06b1")
        buf.write("\u06b3\5\u008eH\2\u06b2\u06b1\3\2\2\2\u06b2\u06b3\3\2")
        buf.write("\2\2\u06b3\u06b4\3\2\2\2\u06b4\u06b5\5\u013e\u00a0\2\u06b5")
        buf.write("\u013b\3\2\2\2\u06b6\u06b8\5\u018c\u00c7\2\u06b7\u06b6")
        buf.write("\3\2\2\2\u06b7\u06b8\3\2\2\2\u06b8\u06ba\3\2\2\2\u06b9")
        buf.write("\u06bb\5\u016c\u00b7\2\u06ba\u06b9\3\2\2\2\u06ba\u06bb")
        buf.write("\3\2\2\2\u06bb\u06bc\3\2\2\2\u06bc\u06be\7,\2\2\u06bd")
        buf.write("\u06bf\t\13\2\2\u06be\u06bd\3\2\2\2\u06be\u06bf\3\2\2")
        buf.write("\2\u06bf\u013d\3\2\2\2\u06c0\u06c1\5\u00a4S\2\u06c1\u013f")
        buf.write("\3\2\2\2\u06c2\u06c4\5\u018c\u00c7\2\u06c3\u06c2\3\2\2")
        buf.write("\2\u06c3\u06c4\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5\u06c6")
        buf.write("\7-\2\2\u06c6\u06c7\5\u00a4S\2\u06c7\u0141\3\2\2\2\u06c8")
        buf.write("\u06ca\5\u018c\u00c7\2\u06c9\u06c8\3\2\2\2\u06c9\u06ca")
        buf.write("\3\2\2\2\u06ca\u06cc\3\2\2\2\u06cb\u06cd\5\u016e\u00b8")
        buf.write("\2\u06cc\u06cb\3\2\2\2\u06cc\u06cd\3\2\2\2\u06cd\u06ce")
        buf.write("\3\2\2\2\u06ce\u06cf\7/\2\2\u06cf\u06d1\5\u0210\u0109")
        buf.write("\2\u06d0\u06d2\5\u0234\u011b\2\u06d1\u06d0\3\2\2\2\u06d1")
        buf.write("\u06d2\3\2\2\2\u06d2\u06d4\3\2\2\2\u06d3\u06d5\5\u008e")
        buf.write("H\2\u06d4\u06d3\3\2\2\2\u06d4\u06d5\3\2\2\2\u06d5\u06d6")
        buf.write("\3\2\2\2\u06d6\u06d7\5\u0144\u00a3\2\u06d7\u0143\3\2\2")
        buf.write("\2\u06d8\u06d9\7\u008d\2\2\u06d9\u06da\5\u0146\u00a4\2")
        buf.write("\u06da\u06db\7\u0090\2\2\u06db\u0145\3\2\2\2\u06dc\u06de")
        buf.write("\5\u0148\u00a5\2\u06dd\u06dc\3\2\2\2\u06de\u06e1\3\2\2")
        buf.write("\2\u06df\u06dd\3\2\2\2\u06df\u06e0\3\2\2\2\u06e0\u0147")
        buf.write("\3\2\2\2\u06e1\u06df\3\2\2\2\u06e2\u06e5\5\u009eP\2\u06e3")
        buf.write("\u06e5\5X-\2\u06e4\u06e2\3\2\2\2\u06e4\u06e3\3\2\2\2\u06e5")
        buf.write("\u0149\3\2\2\2\u06e6\u06e7\5\u014c\u00a7\2\u06e7\u06e9")
        buf.write("\5\u014e\u00a8\2\u06e8\u06ea\5\u008eH\2\u06e9\u06e8\3")
        buf.write("\2\2\2\u06e9\u06ea\3\2\2\2\u06ea\u06ee\3\2\2\2\u06eb\u06ef")
        buf.write("\5\u00a4S\2\u06ec\u06ef\5\u00bc_\2\u06ed\u06ef\5\u00c4")
        buf.write("c\2\u06ee\u06eb\3\2\2\2\u06ee\u06ec\3\2\2\2\u06ee\u06ed")
        buf.write("\3\2\2\2\u06ef\u014b\3\2\2\2\u06f0\u06f2\5\u018c\u00c7")
        buf.write("\2\u06f1\u06f0\3\2\2\2\u06f1\u06f2\3\2\2\2\u06f2\u06f4")
        buf.write("\3\2\2\2\u06f3\u06f5\5\u016c\u00b7\2\u06f4\u06f3\3\2\2")
        buf.write("\2\u06f4\u06f5\3\2\2\2\u06f5\u06f6\3\2\2\2\u06f6\u06f8")
        buf.write("\7\60\2\2\u06f7\u06f9\5\u0088E\2\u06f8\u06f7\3\2\2\2\u06f8")
        buf.write("\u06f9\3\2\2\2\u06f9\u06fa\3\2\2\2\u06fa\u06fb\5\u00e2")
        buf.write("r\2\u06fb\u014d\3\2\2\2\u06fc\u06fe\5\u024a\u0126\2\u06fd")
        buf.write("\u06ff\5\u018c\u00c7\2\u06fe\u06fd\3\2\2\2\u06fe\u06ff")
        buf.write("\3\2\2\2\u06ff\u0700\3\2\2\2\u0700\u0701\5\u020c\u0107")
        buf.write("\2\u0701\u014f\3\2\2\2\u0702\u0706\5\u0152\u00aa\2\u0703")
        buf.write("\u0706\5\u0154\u00ab\2\u0704\u0706\5\u0156\u00ac\2\u0705")
        buf.write("\u0702\3\2\2\2\u0705\u0703\3\2\2\2\u0705\u0704\3\2\2\2")
        buf.write("\u0706\u0151\3\2\2\2\u0707\u0708\7\61\2\2\u0708\u0709")
        buf.write("\7<\2\2\u0709\u070a\5\u0256\u012c\2\u070a\u0153\3\2\2")
        buf.write("\2\u070b\u070c\7;\2\2\u070c\u070d\7<\2\2\u070d\u070e\5")
        buf.write("\u0256\u012c\2\u070e\u0155\3\2\2\2\u070f\u0710\7\62\2")
        buf.write("\2\u0710\u0711\7<\2\2\u0711\u0713\5\u0256\u012c\2\u0712")
        buf.write("\u0714\5\u0158\u00ad\2\u0713\u0712\3\2\2\2\u0713\u0714")
        buf.write("\3\2\2\2\u0714\u0157\3\2\2\2\u0715\u0716\7\u0094\2\2\u0716")
        buf.write("\u0717\5\u0168\u00b5\2\u0717\u0159\3\2\2\2\u0718\u0719")
        buf.write("\7\66\2\2\u0719\u071a\5\u0168\u00b5\2\u071a\u071c\7\u008d")
        buf.write("\2\2\u071b\u071d\5\u015c\u00af\2\u071c\u071b\3\2\2\2\u071c")
        buf.write("\u071d\3\2\2\2\u071d\u071e\3\2\2\2\u071e\u071f\7\u0090")
        buf.write("\2\2\u071f\u015b\3\2\2\2\u0720\u0722\5\u015e\u00b0\2\u0721")
        buf.write("\u0720\3\2\2\2\u0722\u0723\3\2\2\2\u0723\u0721\3\2\2\2")
        buf.write("\u0723\u0724\3\2\2\2\u0724\u015d\3\2\2\2\u0725\u0729\5")
        buf.write("\u0160\u00b1\2\u0726\u0729\5\u0162\u00b2\2\u0727\u0729")
        buf.write("\5\u0164\u00b3\2\u0728\u0725\3\2\2\2\u0728\u0726\3\2\2")
        buf.write("\2\u0728\u0727\3\2\2\2\u0729\u015f\3\2\2\2\u072a\u072b")
        buf.write("\t\f\2\2\u072b\u072c\7\u0094\2\2\u072c\u072d\5\u0166\u00b4")
        buf.write("\2\u072d\u0161\3\2\2\2\u072e\u072f\79\2\2\u072f\u0730")
        buf.write("\7\u0094\2\2\u0730\u0731\5\u0268\u0135\2\u0731\u0163\3")
        buf.write("\2\2\2\u0732\u0733\7:\2\2\u0733\u0734\7\u0094\2\2\u0734")
        buf.write("\u0735\t\r\2\2\u0735\u0165\3\2\2\2\u0736\u073b\5\u0168")
        buf.write("\u00b5\2\u0737\u0738\7\u0093\2\2\u0738\u073a\5\u0168\u00b5")
        buf.write("\2\u0739\u0737\3\2\2\2\u073a\u073d\3\2\2\2\u073b\u0739")
        buf.write("\3\2\2\2\u073b\u073c\3\2\2\2\u073c\u0167\3\2\2\2\u073d")
        buf.write("\u073b\3\2\2\2\u073e\u0743\5\u0238\u011d\2\u073f\u0740")
        buf.write("\7\u008c\2\2\u0740\u0742\5\u0238\u011d\2\u0741\u073f\3")
        buf.write("\2\2\2\u0742\u0745\3\2\2\2\u0743\u0741\3\2\2\2\u0743\u0744")
        buf.write("\3\2\2\2\u0744\u0169\3\2\2\2\u0745\u0743\3\2\2\2\u0746")
        buf.write("\u075c\7\b\2\2\u0747\u075c\7D\2\2\u0748\u075c\7E\2\2\u0749")
        buf.write("\u075c\7\27\2\2\u074a\u075c\7\62\2\2\u074b\u075c\7F\2")
        buf.write("\2\u074c\u075c\7G\2\2\u074d\u075c\7H\2\2\u074e\u075c\7")
        buf.write(";\2\2\u074f\u075c\7\61\2\2\u0750\u075c\7I\2\2\u0751\u075c")
        buf.write("\7J\2\2\u0752\u0756\7L\2\2\u0753\u0754\7\u008e\2\2\u0754")
        buf.write("\u0755\t\16\2\2\u0755\u0757\7\u0091\2\2\u0756\u0753\3")
        buf.write("\2\2\2\u0756\u0757\3\2\2\2\u0757\u075c\3\2\2\2\u0758\u075c")
        buf.write("\7K\2\2\u0759\u075c\5\u016e\u00b8\2\u075a\u075c\5\u0170")
        buf.write("\u00b9\2\u075b\u0746\3\2\2\2\u075b\u0747\3\2\2\2\u075b")
        buf.write("\u0748\3\2\2\2\u075b\u0749\3\2\2\2\u075b\u074a\3\2\2\2")
        buf.write("\u075b\u074b\3\2\2\2\u075b\u074c\3\2\2\2\u075b\u074d\3")
        buf.write("\2\2\2\u075b\u074e\3\2\2\2\u075b\u074f\3\2\2\2\u075b\u0750")
        buf.write("\3\2\2\2\u075b\u0751\3\2\2\2\u075b\u0752\3\2\2\2\u075b")
        buf.write("\u0758\3\2\2\2\u075b\u0759\3\2\2\2\u075b\u075a\3\2\2\2")
        buf.write("\u075c\u016b\3\2\2\2\u075d\u075f\5\u016a\u00b6\2\u075e")
        buf.write("\u075d\3\2\2\2\u075f\u0760\3\2\2\2\u0760\u075e\3\2\2\2")
        buf.write("\u0760\u0761\3\2\2\2\u0761\u016d\3\2\2\2\u0762\u0766\t")
        buf.write("\17\2\2\u0763\u0764\7\u008e\2\2\u0764\u0765\7!\2\2\u0765")
        buf.write("\u0767\7\u0091\2\2\u0766\u0763\3\2\2\2\u0766\u0767\3\2")
        buf.write("\2\2\u0767\u016f\3\2\2\2\u0768\u0769\t\20\2\2\u0769\u0171")
        buf.write("\3\2\2\2\u076a\u076e\b\u00ba\1\2\u076b\u076f\5\u0174\u00bb")
        buf.write("\2\u076c\u076f\5\u0176\u00bc\2\u076d\u076f\5\u017a\u00be")
        buf.write("\2\u076e\u076b\3\2\2\2\u076e\u076c\3\2\2\2\u076e\u076d")
        buf.write("\3\2\2\2\u076f\u0771\3\2\2\2\u0770\u0772\5\u020e\u0108")
        buf.write("\2\u0771\u0770\3\2\2\2\u0771\u0772\3\2\2\2\u0772\u077a")
        buf.write("\3\2\2\2\u0773\u077a\5\u0178\u00bd\2\u0774\u077a\5\u0180")
        buf.write("\u00c1\2\u0775\u077a\5\u0182\u00c2\2\u0776\u0777\7R\2")
        buf.write("\2\u0777\u077a\5\u020c\u0107\2\u0778\u077a\5\u0184\u00c3")
        buf.write("\2\u0779\u076a\3\2\2\2\u0779\u0773\3\2\2\2\u0779\u0774")
        buf.write("\3\2\2\2\u0779\u0775\3\2\2\2\u0779\u0776\3\2\2\2\u0779")
        buf.write("\u0778\3\2\2\2\u077a\u0780\3\2\2\2\u077b\u077c\f\4\2\2")
        buf.write("\u077c\u077d\7\3\2\2\u077d\u077f\5\u020c\u0107\2\u077e")
        buf.write("\u077b\3\2\2\2\u077f\u0782\3\2\2\2\u0780\u077e\3\2\2\2")
        buf.write("\u0780\u0781\3\2\2\2\u0781\u0173\3\2\2\2\u0782\u0780\3")
        buf.write("\2\2\2\u0783\u0784\7\u0098\2\2\u0784\u0175\3\2\2\2\u0785")
        buf.write("\u0786\5\u0238\u011d\2\u0786\u0177\3\2\2\2\u0787\u0788")
        buf.write("\7\36\2\2\u0788\u078c\5\u0172\u00ba\2\u0789\u078a\7\35")
        buf.write("\2\2\u078a\u078c\5\u0172\u00ba\2\u078b\u0787\3\2\2\2\u078b")
        buf.write("\u0789\3\2\2\2\u078c\u0179\3\2\2\2\u078d\u078f\7\u008e")
        buf.write("\2\2\u078e\u0790\5\u017c\u00bf\2\u078f\u078e\3\2\2\2\u078f")
        buf.write("\u0790\3\2\2\2\u0790\u0791\3\2\2\2\u0791\u0792\7\u0091")
        buf.write("\2\2\u0792\u017b\3\2\2\2\u0793\u0798\5\u017e\u00c0\2\u0794")
        buf.write("\u0795\7\u0093\2\2\u0795\u0797\5\u017e\u00c0\2\u0796\u0794")
        buf.write("\3\2\2\2\u0797\u079a\3\2\2\2\u0798\u0796\3\2\2\2\u0798")
        buf.write("\u0799\3\2\2\2\u0799\u017d\3\2\2\2\u079a\u0798\3\2\2\2")
        buf.write("\u079b\u079c\5\u0238\u011d\2\u079c\u079d\7\u0094\2\2\u079d")
        buf.write("\u079f\3\2\2\2\u079e\u079b\3\2\2\2\u079e\u079f\3\2\2\2")
        buf.write("\u079f\u07a0\3\2\2\2\u07a0\u07a1\5\u0172\u00ba\2\u07a1")
        buf.write("\u017f\3\2\2\2\u07a2\u07a4\5\u0210\u0109\2\u07a3\u07a2")
        buf.write("\3\2\2\2\u07a3\u07a4\3\2\2\2\u07a4\u07a5\3\2\2\2\u07a5")
        buf.write("\u07a6\7\u008c\2\2\u07a6\u07a8\5\u00fe\u0080\2\u07a7\u07a9")
        buf.write("\5\u017a\u00be\2\u07a8\u07a7\3\2\2\2\u07a8\u07a9\3\2\2")
        buf.write("\2\u07a9\u0181\3\2\2\2\u07aa\u07ab\5\u0176\u00bc\2\u07ab")
        buf.write("\u07ac\7\u009a\2\2\u07ac\u0183\3\2\2\2\u07ad\u07ae\5\u0194")
        buf.write("\u00cb\2\u07ae\u0185\3\2\2\2\u07af\u07b0\7\u009b\2\2\u07b0")
        buf.write("\u07b2\5\u0188\u00c5\2\u07b1\u07b3\5\u018a\u00c6\2\u07b2")
        buf.write("\u07b1\3\2\2\2\u07b2\u07b3\3\2\2\2\u07b3\u0187\3\2\2\2")
        buf.write("\u07b4\u07b9\5\u0238\u011d\2\u07b5\u07b6\7\u008c\2\2\u07b6")
        buf.write("\u07b8\5\u0238\u011d\2\u07b7\u07b5\3\2\2\2\u07b8\u07bb")
        buf.write("\3\2\2\2\u07b9\u07b7\3\2\2\2\u07b9\u07ba\3\2\2\2\u07ba")
        buf.write("\u0189\3\2\2\2\u07bb\u07b9\3\2\2\2\u07bc\u07be\7\u008e")
        buf.write("\2\2\u07bd\u07bf\5\u018e\u00c8\2\u07be\u07bd\3\2\2\2\u07be")
        buf.write("\u07bf\3\2\2\2\u07bf\u07c0\3\2\2\2\u07c0\u07c1\7\u0091")
        buf.write("\2\2\u07c1\u018b\3\2\2\2\u07c2\u07c4\5\u0186\u00c4\2\u07c3")
        buf.write("\u07c2\3\2\2\2\u07c4\u07c5\3\2\2\2\u07c5\u07c3\3\2\2\2")
        buf.write("\u07c5\u07c6\3\2\2\2\u07c6\u018d\3\2\2\2\u07c7\u07c9\5")
        buf.write("\u0190\u00c9\2\u07c8\u07c7\3\2\2\2\u07c9\u07ca\3\2\2\2")
        buf.write("\u07ca\u07c8\3\2\2\2\u07ca\u07cb\3\2\2\2\u07cb\u018f\3")
        buf.write("\2\2\2\u07cc\u07ce\7\u008e\2\2\u07cd\u07cf\5\u018e\u00c8")
        buf.write("\2\u07ce\u07cd\3\2\2\2\u07ce\u07cf\3\2\2\2\u07cf\u07d0")
        buf.write("\3\2\2\2\u07d0\u07e1\7\u0091\2\2\u07d1\u07d3\7\u008f\2")
        buf.write("\2\u07d2\u07d4\5\u018e\u00c8\2\u07d3\u07d2\3\2\2\2\u07d3")
        buf.write("\u07d4\3\2\2\2\u07d4\u07d5\3\2\2\2\u07d5\u07e1\7\u0092")
        buf.write("\2\2\u07d6\u07d8\7\u008d\2\2\u07d7\u07d9\5\u018e\u00c8")
        buf.write("\2\u07d8\u07d7\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9\u07da")
        buf.write("\3\2\2\2\u07da\u07e1\7\u0090\2\2\u07db\u07e1\5\u0238\u011d")
        buf.write("\2\u07dc\u07e1\5\u023c\u011f\2\u07dd\u07e1\5\u0264\u0133")
        buf.write("\2\u07de\u07e1\5\u0256\u012c\2\u07df\u07e1\5\u0192\u00ca")
        buf.write("\2\u07e0\u07cc\3\2\2\2\u07e0\u07d1\3\2\2\2\u07e0\u07d6")
        buf.write("\3\2\2\2\u07e0\u07db\3\2\2\2\u07e0\u07dc\3\2\2\2\u07e0")
        buf.write("\u07dd\3\2\2\2\u07e0\u07de\3\2\2\2\u07e0\u07df\3\2\2\2")
        buf.write("\u07e1\u0191\3\2\2\2\u07e2\u07e9\t\21\2\2\u07e3\u07e9")
        buf.write("\5\u024a\u0126\2\u07e4\u07e5\6\u00ca\5\2\u07e5\u07e9\7")
        buf.write("\u009c\2\2\u07e6\u07e7\6\u00ca\6\2\u07e7\u07e9\7\u0099")
        buf.write("\2\2\u07e8\u07e2\3\2\2\2\u07e8\u07e3\3\2\2\2\u07e8\u07e4")
        buf.write("\3\2\2\2\u07e8\u07e6\3\2\2\2\u07e9\u0193\3\2\2\2\u07ea")
        buf.write("\u07ec\5\u019c\u00cf\2\u07eb\u07ea\3\2\2\2\u07eb\u07ec")
        buf.write("\3\2\2\2\u07ec\u07ed\3\2\2\2\u07ed\u07ef\5\u0198\u00cd")
        buf.write("\2\u07ee\u07f0\5\u01a0\u00d1\2\u07ef\u07ee\3\2\2\2\u07ef")
        buf.write("\u07f0\3\2\2\2\u07f0\u0195\3\2\2\2\u07f1\u07f6\5\u0194")
        buf.write("\u00cb\2\u07f2\u07f3\7\u0093\2\2\u07f3\u07f5\5\u0194\u00cb")
        buf.write("\2\u07f4\u07f2\3\2\2\2\u07f5\u07f8\3\2\2\2\u07f6\u07f4")
        buf.write("\3\2\2\2\u07f6\u07f7\3\2\2\2\u07f7\u0197\3\2\2\2\u07f8")
        buf.write("\u07f6\3\2\2\2\u07f9\u07fb\5\u0252\u012a\2\u07fa\u07f9")
        buf.write("\3\2\2\2\u07fa\u07fb\3\2\2\2\u07fb\u07fc\3\2\2\2\u07fc")
        buf.write("\u07ff\5\u01ec\u00f7\2\u07fd\u07ff\5\u019a\u00ce\2\u07fe")
        buf.write("\u07fa\3\2\2\2\u07fe\u07fd\3\2\2\2\u07ff\u0199\3\2\2\2")
        buf.write("\u0800\u0801\7\u009c\2\2\u0801\u0802\5\u0238\u011d\2\u0802")
        buf.write("\u019b\3\2\2\2\u0803\u0805\7S\2\2\u0804\u0806\t\13\2\2")
        buf.write("\u0805\u0804\3\2\2\2\u0805\u0806\3\2\2\2\u0806\u019d\3")
        buf.write("\2\2\2\u0807\u0808\5\u0250\u0129\2\u0808\u0809\5\u0198")
        buf.write("\u00cd\2\u0809\u0815\3\2\2\2\u080a\u080d\5\u023e\u0120")
        buf.write("\2\u080b\u080d\5\u01a2\u00d2\2\u080c\u080a\3\2\2\2\u080c")
        buf.write("\u080b\3\2\2\2\u080d\u080f\3\2\2\2\u080e\u0810\5\u019c")
        buf.write("\u00cf\2\u080f\u080e\3\2\2\2\u080f\u0810\3\2\2\2\u0810")
        buf.write("\u0811\3\2\2\2\u0811\u0812\5\u0198\u00cd\2\u0812\u0815")
        buf.write("\3\2\2\2\u0813\u0815\5\u01a4\u00d3\2\u0814\u0807\3\2\2")
        buf.write("\2\u0814\u080c\3\2\2\2\u0814\u0813\3\2\2\2\u0815\u019f")
        buf.write("\3\2\2\2\u0816\u0818\5\u019e\u00d0\2\u0817\u0816\3\2\2")
        buf.write("\2\u0818\u0819\3\2\2\2\u0819\u0817\3\2\2\2\u0819\u081a")
        buf.write("\3\2\2\2\u081a\u01a1\3\2\2\2\u081b\u081c\7\u009a\2\2\u081c")
        buf.write("\u081d\5\u0194\u00cb\2\u081d\u081e\7\u0094\2\2\u081e\u01a3")
        buf.write("\3\2\2\2\u081f\u0825\7R\2\2\u0820\u0822\7\3\2\2\u0821")
        buf.write("\u0823\t\13\2\2\u0822\u0821\3\2\2\2\u0822\u0823\3\2\2")
        buf.write("\2\u0823\u0825\3\2\2\2\u0824\u081f\3\2\2\2\u0824\u0820")
        buf.write("\3\2\2\2\u0825\u0826\3\2\2\2\u0826\u0827\5\u020c\u0107")
        buf.write("\2\u0827\u01a5\3\2\2\2\u0828\u082a\5\u01a8\u00d5\2\u0829")
        buf.write("\u082b\5\u0098M\2\u082a\u0829\3\2\2\2\u082a\u082b\3\2")
        buf.write("\2\2\u082b\u083b\3\2\2\2\u082c\u083b\5\u0226\u0114\2\u082d")
        buf.write("\u083b\5\u0228\u0115\2\u082e\u083b\5\u01aa\u00d6\2\u082f")
        buf.write("\u083b\5\u01ba\u00de\2\u0830\u083b\5\u01bc\u00df\2\u0831")
        buf.write("\u083b\5\u01be\u00e0\2\u0832\u083b\5\u01d2\u00ea\2\u0833")
        buf.write("\u083b\5\u01d4\u00eb\2\u0834\u083b\5\u01d6\u00ec\2\u0835")
        buf.write("\u083b\5\u01d0\u00e9\2\u0836\u083b\5\u01dc\u00ef\2\u0837")
        buf.write("\u083b\5\u01de\u00f0\2\u0838\u083b\5\u01e8\u00f5\2\u0839")
        buf.write("\u083b\5\u01ea\u00f6\2\u083a\u0828\3\2\2\2\u083a\u082c")
        buf.write("\3\2\2\2\u083a\u082d\3\2\2\2\u083a\u082e\3\2\2\2\u083a")
        buf.write("\u082f\3\2\2\2\u083a\u0830\3\2\2\2\u083a\u0831\3\2\2\2")
        buf.write("\u083a\u0832\3\2\2\2\u083a\u0833\3\2\2\2\u083a\u0834\3")
        buf.write("\2\2\2\u083a\u0835\3\2\2\2\u083a\u0836\3\2\2\2\u083a\u0837")
        buf.write("\3\2\2\2\u083a\u0838\3\2\2\2\u083a\u0839\3\2\2\2\u083b")
        buf.write("\u01a7\3\2\2\2\u083c\u0841\5\u0238\u011d\2\u083d\u083e")
        buf.write("\7\u008e\2\2\u083e\u083f\5\u0208\u0105\2\u083f\u0840\7")
        buf.write("\u0091\2\2\u0840\u0842\3\2\2\2\u0841\u083d\3\2\2\2\u0841")
        buf.write("\u0842\3\2\2\2\u0842\u01a9\3\2\2\2\u0843\u084f\5\u0264")
        buf.write("\u0133\2\u0844\u084f\5\u01ac\u00d7\2\u0845\u084f\5\u01b2")
        buf.write("\u00da\2\u0846\u084f\5\u01b8\u00dd\2\u0847\u084f\7}\2")
        buf.write("\2\u0848\u084f\7~\2\2\u0849\u084f\7\177\2\2\u084a\u084f")
        buf.write("\7\u0080\2\2\u084b\u084f\7\u0081\2\2\u084c\u084f\7\u0082")
        buf.write("\2\2\u084d\u084f\7\u0083\2\2\u084e\u0843\3\2\2\2\u084e")
        buf.write("\u0844\3\2\2\2\u084e\u0845\3\2\2\2\u084e\u0846\3\2\2\2")
        buf.write("\u084e\u0847\3\2\2\2\u084e\u0848\3\2\2\2\u084e\u0849\3")
        buf.write("\2\2\2\u084e\u084a\3\2\2\2\u084e\u084b\3\2\2\2\u084e\u084c")
        buf.write("\3\2\2\2\u084e\u084d\3\2\2\2\u084f\u01ab\3\2\2\2\u0850")
        buf.write("\u0852\7\u008f\2\2\u0851\u0853\5\u01ae\u00d8\2\u0852\u0851")
        buf.write("\3\2\2\2\u0852\u0853\3\2\2\2\u0853\u0854\3\2\2\2\u0854")
        buf.write("\u0855\7\u0092\2\2\u0855\u01ad\3\2\2\2\u0856\u085b\5\u01b0")
        buf.write("\u00d9\2\u0857\u0858\7\u0093\2\2\u0858\u085a\5\u01b0\u00d9")
        buf.write("\2\u0859\u0857\3\2\2\2\u085a\u085d\3\2\2\2\u085b\u0859")
        buf.write("\3\2\2\2\u085b\u085c\3\2\2\2\u085c\u085f\3\2\2\2\u085d")
        buf.write("\u085b\3\2\2\2\u085e\u0860\7\u0093\2\2\u085f\u085e\3\2")
        buf.write("\2\2\u085f\u0860\3\2\2\2\u0860\u01af\3\2\2\2\u0861\u0862")
        buf.write("\5\u0194\u00cb\2\u0862\u01b1\3\2\2\2\u0863\u0866\7\u008f")
        buf.write("\2\2\u0864\u0867\5\u01b4\u00db\2\u0865\u0867\7\u0094\2")
        buf.write("\2\u0866\u0864\3\2\2\2\u0866\u0865\3\2\2\2\u0867\u0868")
        buf.write("\3\2\2\2\u0868\u0869\7\u0092\2\2\u0869\u01b3\3\2\2\2\u086a")
        buf.write("\u086f\5\u01b6\u00dc\2\u086b\u086c\7\u0093\2\2\u086c\u086e")
        buf.write("\5\u01b6\u00dc\2\u086d\u086b\3\2\2\2\u086e\u0871\3\2\2")
        buf.write("\2\u086f\u086d\3\2\2\2\u086f\u0870\3\2\2\2\u0870\u0873")
        buf.write("\3\2\2\2\u0871\u086f\3\2\2\2\u0872\u0874\7\u0093\2\2\u0873")
        buf.write("\u0872\3\2\2\2\u0873\u0874\3\2\2\2\u0874\u01b5\3\2\2\2")
        buf.write("\u0875\u0876\5\u0194\u00cb\2\u0876\u0877\7\u0094\2\2\u0877")
        buf.write("\u0878\5\u0194\u00cb\2\u0878\u01b7\3\2\2\2\u0879\u087a")
        buf.write("\7\u0086\2\2\u087a\u087b\7\u008e\2\2\u087b\u087c\7W\2")
        buf.write("\2\u087c\u087d\7\u0094\2\2\u087d\u087e\5\u0194\u00cb\2")
        buf.write("\u087e\u087f\7\u0093\2\2\u087f\u0880\7Y\2\2\u0880\u0881")
        buf.write("\7\u0094\2\2\u0881\u0882\5\u0194\u00cb\2\u0882\u0883\7")
        buf.write("\u0093\2\2\u0883\u0884\7X\2\2\u0884\u0885\7\u0094\2\2")
        buf.write("\u0885\u0886\5\u0194\u00cb\2\u0886\u0887\7\u0093\2\2\u0887")
        buf.write("\u0888\7\4\2\2\u0888\u0889\7\u0094\2\2\u0889\u088a\5\u0194")
        buf.write("\u00cb\2\u088a\u088b\7\u0091\2\2\u088b\u089b\3\2\2\2\u088c")
        buf.write("\u088d\7\u0087\2\2\u088d\u088e\7\u008e\2\2\u088e\u088f")
        buf.write("\7Z\2\2\u088f\u0890\7\u0094\2\2\u0890\u0891\5\u0194\u00cb")
        buf.write("\2\u0891\u0892\7\u0091\2\2\u0892\u089b\3\2\2\2\u0893\u0894")
        buf.write("\7\u0088\2\2\u0894\u0895\7\u008e\2\2\u0895\u0896\7Z\2")
        buf.write("\2\u0896\u0897\7\u0094\2\2\u0897\u0898\5\u0194\u00cb\2")
        buf.write("\u0898\u0899\7\u0091\2\2\u0899\u089b\3\2\2\2\u089a\u0879")
        buf.write("\3\2\2\2\u089a\u088c\3\2\2\2\u089a\u0893\3\2\2\2\u089b")
        buf.write("\u01b9\3\2\2\2\u089c\u08a9\7a\2\2\u089d\u089e\7a\2\2\u089e")
        buf.write("\u089f\7\u008c\2\2\u089f\u08a9\5\u0238\u011d\2\u08a0\u08a1")
        buf.write("\7a\2\2\u08a1\u08a2\7\u008f\2\2\u08a2\u08a3\5\u01fe\u0100")
        buf.write("\2\u08a3\u08a4\7\u0092\2\2\u08a4\u08a9\3\2\2\2\u08a5\u08a6")
        buf.write("\7a\2\2\u08a6\u08a7\7\u008c\2\2\u08a7\u08a9\7,\2\2\u08a8")
        buf.write("\u089c\3\2\2\2\u08a8\u089d\3\2\2\2\u08a8\u08a0\3\2\2\2")
        buf.write("\u08a8\u08a5\3\2\2\2\u08a9\u01bb\3\2\2\2\u08aa\u08ab\7")
        buf.write("T\2\2\u08ab\u08ac\7\u008c\2\2\u08ac\u08b6\5\u0238\u011d")
        buf.write("\2\u08ad\u08ae\7T\2\2\u08ae\u08af\7\u008f\2\2\u08af\u08b0")
        buf.write("\5\u01fe\u0100\2\u08b0\u08b1\7\u0092\2\2\u08b1\u08b6\3")
        buf.write("\2\2\2\u08b2\u08b3\7T\2\2\u08b3\u08b4\7\u008c\2\2\u08b4")
        buf.write("\u08b6\7,\2\2\u08b5\u08aa\3\2\2\2\u08b5\u08ad\3\2\2\2")
        buf.write("\u08b5\u08b2\3\2\2\2\u08b6\u01bd\3\2\2\2\u08b7\u08b9\7")
        buf.write("\u008d\2\2\u08b8\u08ba\5\u01c0\u00e1\2\u08b9\u08b8\3\2")
        buf.write("\2\2\u08b9\u08ba\3\2\2\2\u08ba\u08bc\3\2\2\2\u08bb\u08bd")
        buf.write("\5\6\4\2\u08bc\u08bb\3\2\2\2\u08bc\u08bd\3\2\2\2\u08bd")
        buf.write("\u08be\3\2\2\2\u08be\u08bf\7\u0090\2\2\u08bf\u01bf\3\2")
        buf.write("\2\2\u08c0\u08c2\5\u01c8\u00e5\2\u08c1\u08c0\3\2\2\2\u08c1")
        buf.write("\u08c2\3\2\2\2\u08c2\u08c3\3\2\2\2\u08c3\u08c5\5\u01c2")
        buf.write("\u00e2\2\u08c4\u08c6\7)\2\2\u08c5\u08c4\3\2\2\2\u08c5")
        buf.write("\u08c6\3\2\2\2\u08c6\u08c8\3\2\2\2\u08c7\u08c9\5\u00de")
        buf.write("p\2\u08c8\u08c7\3\2\2\2\u08c8\u08c9\3\2\2\2\u08c9\u08ca")
        buf.write("\3\2\2\2\u08ca\u08cb\7\23\2\2\u08cb\u08d0\3\2\2\2\u08cc")
        buf.write("\u08cd\5\u01c8\u00e5\2\u08cd\u08ce\7\23\2\2\u08ce\u08d0")
        buf.write("\3\2\2\2\u08cf\u08c1\3\2\2\2\u08cf\u08cc\3\2\2\2\u08d0")
        buf.write("\u01c1\3\2\2\2\u08d1\u08d3\7\u008e\2\2\u08d2\u08d4\5\u01c4")
        buf.write("\u00e3\2\u08d3\u08d2\3\2\2\2\u08d3\u08d4\3\2\2\2\u08d4")
        buf.write("\u08d5\3\2\2\2\u08d5\u08d8\7\u0091\2\2\u08d6\u08d8\5\u023a")
        buf.write("\u011e\2\u08d7\u08d1\3\2\2\2\u08d7\u08d6\3\2\2\2\u08d8")
        buf.write("\u01c3\3\2\2\2\u08d9\u08de\5\u01c6\u00e4\2\u08da\u08db")
        buf.write("\7\u0093\2\2\u08db\u08dd\5\u01c6\u00e4\2\u08dc\u08da\3")
        buf.write("\2\2\2\u08dd\u08e0\3\2\2\2\u08de\u08dc\3\2\2\2\u08de\u08df")
        buf.write("\3\2\2\2\u08df\u01c5\3\2\2\2\u08e0\u08de\3\2\2\2\u08e1")
        buf.write("\u08e6\5\u0238\u011d\2\u08e2\u08e4\5\u020e\u0108\2\u08e3")
        buf.write("\u08e5\5\u024c\u0127\2\u08e4\u08e3\3\2\2\2\u08e4\u08e5")
        buf.write("\3\2\2\2\u08e5\u08e7\3\2\2\2\u08e6\u08e2\3\2\2\2\u08e6")
        buf.write("\u08e7\3\2\2\2\u08e7\u01c7\3\2\2\2\u08e8\u08e9\7\u008f")
        buf.write("\2\2\u08e9\u08ea\5\u01ca\u00e6\2\u08ea\u08eb\7\u0092\2")
        buf.write("\2\u08eb\u01c9\3\2\2\2\u08ec\u08f1\5\u01cc\u00e7\2\u08ed")
        buf.write("\u08ee\7\u0093\2\2\u08ee\u08f0\5\u01cc\u00e7\2\u08ef\u08ed")
        buf.write("\3\2\2\2\u08f0\u08f3\3\2\2\2\u08f1\u08ef\3\2\2\2\u08f1")
        buf.write("\u08f2\3\2\2\2\u08f2\u01cb\3\2\2\2\u08f3\u08f1\3\2\2\2")
        buf.write("\u08f4\u08f6\5\u01ce\u00e8\2\u08f5\u08f4\3\2\2\2\u08f5")
        buf.write("\u08f6\3\2\2\2\u08f6\u08fe\3\2\2\2\u08f7\u08f9\5\u0238")
        buf.write("\u011d\2\u08f8\u08fa\7\u009e\2\2\u08f9\u08f8\3\2\2\2\u08f9")
        buf.write("\u08fa\3\2\2\2\u08fa\u08fb\3\2\2\2\u08fb\u08fc\5\u0194")
        buf.write("\u00cb\2\u08fc\u08ff\3\2\2\2\u08fd\u08ff\5\u01ba\u00de")
        buf.write("\2\u08fe\u08f7\3\2\2\2\u08fe\u08fd\3\2\2\2\u08ff\u01cd")
        buf.write("\3\2\2\2\u0900\u0908\7K\2\2\u0901\u0905\7L\2\2\u0902\u0903")
        buf.write("\7\u008e\2\2\u0903\u0904\t\16\2\2\u0904\u0906\7\u0091")
        buf.write("\2\2\u0905\u0902\3\2\2\2\u0905\u0906\3\2\2\2\u0906\u0908")
        buf.write("\3\2\2\2\u0907\u0900\3\2\2\2\u0907\u0901\3\2\2\2\u0908")
        buf.write("\u01cf\3\2\2\2\u0909\u090c\7\u008c\2\2\u090a\u090d\5\u0238")
        buf.write("\u011d\2\u090b\u090d\5\u023c\u011f\2\u090c\u090a\3\2\2")
        buf.write("\2\u090c\u090b\3\2\2\2\u090d\u0910\3\2\2\2\u090e\u090f")
        buf.write("\7\u008c\2\2\u090f\u0911\5\u01ec\u00f7\2\u0910\u090e\3")
        buf.write("\2\2\2\u0910\u0911\3\2\2\2\u0911\u01d1\3\2\2\2\u0912\u0913")
        buf.write("\7\u008e\2\2\u0913\u0914\5\u0256\u012c\2\u0914\u0915\7")
        buf.write("\u0091\2\2\u0915\u01d3\3\2\2\2\u0916\u0917\7\u008e\2\2")
        buf.write("\u0917\u0918\5\u0194\u00cb\2\u0918\u0919\7\u0091\2\2\u0919")
        buf.write("\u01d5\3\2\2\2\u091a\u091b\7\u008e\2\2\u091b\u0923\7\u0091")
        buf.write("\2\2\u091c\u091d\7\u008e\2\2\u091d\u091e\5\u01da\u00ee")
        buf.write("\2\u091e\u091f\7\u0093\2\2\u091f\u0920\5\u01d8\u00ed\2")
        buf.write("\u0920\u0921\7\u0091\2\2\u0921\u0923\3\2\2\2\u0922\u091a")
        buf.write("\3\2\2\2\u0922\u091c\3\2\2\2\u0923\u01d7\3\2\2\2\u0924")
        buf.write("\u0929\5\u01da\u00ee\2\u0925\u0926\7\u0093\2\2\u0926\u0928")
        buf.write("\5\u01da\u00ee\2\u0927\u0925\3\2\2\2\u0928\u092b\3\2\2")
        buf.write("\2\u0929\u0927\3\2\2\2\u0929\u092a\3\2\2\2\u092a\u01d9")
        buf.write("\3\2\2\2\u092b\u0929\3\2\2\2\u092c\u092d\5\u0238\u011d")
        buf.write("\2\u092d\u092e\7\u0094\2\2\u092e\u0930\3\2\2\2\u092f\u092c")
        buf.write("\3\2\2\2\u092f\u0930\3\2\2\2\u0930\u0931\3\2\2\2\u0931")
        buf.write("\u0932\5\u0194\u00cb\2\u0932\u01db\3\2\2\2\u0933\u0934")
        buf.write("\7\u0098\2\2\u0934\u01dd\3\2\2\2\u0935\u0937\7\u00a9\2")
        buf.write("\2\u0936\u0938\5\u020c\u0107\2\u0937\u0936\3\2\2\2\u0937")
        buf.write("\u0938\3\2\2\2\u0938\u0939\3\2\2\2\u0939\u093a\7\u008c")
        buf.write("\2\2\u093a\u093b\5\u01e0\u00f1\2\u093b\u01df\3\2\2\2\u093c")
        buf.write("\u0941\5\u01e2\u00f2\2\u093d\u093e\7\u008c\2\2\u093e\u0940")
        buf.write("\5\u01e2\u00f2\2\u093f\u093d\3\2\2\2\u0940\u0943\3\2\2")
        buf.write("\2\u0941\u093f\3\2\2\2\u0941\u0942\3\2\2\2\u0942\u01e1")
        buf.write("\3\2\2\2\u0943\u0941\3\2\2\2\u0944\u0946\5\u0238\u011d")
        buf.write("\2\u0945\u0947\5\u01e4\u00f3\2\u0946\u0945\3\2\2\2\u0946")
        buf.write("\u0947\3\2\2\2\u0947\u094a\3\2\2\2\u0948\u094a\5\u01e4")
        buf.write("\u00f3\2\u0949\u0944\3\2\2\2\u0949\u0948\3\2\2\2\u094a")
        buf.write("\u01e3\3\2\2\2\u094b\u094d\5\u01e6\u00f4\2\u094c\u094b")
        buf.write("\3\2\2\2\u094d\u094e\3\2\2\2\u094e\u094c\3\2\2\2\u094e")
        buf.write("\u094f\3\2\2\2\u094f\u01e5\3\2\2\2\u0950\u0958\7\u009a")
        buf.write("\2\2\u0951\u0958\7\u0099\2\2\u0952\u0958\7a\2\2\u0953")
        buf.write("\u0954\7\u008f\2\2\u0954\u0955\5\u01fe\u0100\2\u0955\u0956")
        buf.write("\7\u0092\2\2\u0956\u0958\3\2\2\2\u0957\u0950\3\2\2\2\u0957")
        buf.write("\u0951\3\2\2\2\u0957\u0952\3\2\2\2\u0957\u0953\3\2\2\2")
        buf.write("\u0958\u01e7\3\2\2\2\u0959\u095a\7\u0084\2\2\u095a\u095d")
        buf.write("\7\u008e\2\2\u095b\u095c\t\22\2\2\u095c\u095e\7\u0094")
        buf.write("\2\2\u095d\u095b\3\2\2\2\u095d\u095e\3\2\2\2\u095e\u095f")
        buf.write("\3\2\2\2\u095f\u0960\5\u0194\u00cb\2\u0960\u0961\7\u0091")
        buf.write("\2\2\u0961\u01e9\3\2\2\2\u0962\u0963\7\u0085\2\2\u0963")
        buf.write("\u0964\7\u008e\2\2\u0964\u0965\5\u0194\u00cb\2\u0965\u0966")
        buf.write("\7\u0091\2\2\u0966\u01eb\3\2\2\2\u0967\u0971\5\u01a6\u00d4")
        buf.write("\2\u0968\u0970\5\u01ee\u00f8\2\u0969\u0970\5\u01f0\u00f9")
        buf.write("\2\u096a\u0970\5\u01f2\u00fa\2\u096b\u0970\5\u01f4\u00fb")
        buf.write("\2\u096c\u0970\5\u01f6\u00fc\2\u096d\u0970\5\u01f8\u00fd")
        buf.write("\2\u096e\u0970\5\u01fa\u00fe\2\u096f\u0968\3\2\2\2\u096f")
        buf.write("\u0969\3\2\2\2\u096f\u096a\3\2\2\2\u096f\u096b\3\2\2\2")
        buf.write("\u096f\u096c\3\2\2\2\u096f\u096d\3\2\2\2\u096f\u096e\3")
        buf.write("\2\2\2\u0970\u0973\3\2\2\2\u0971\u096f\3\2\2\2\u0971\u0972")
        buf.write("\3\2\2\2\u0972\u0977\3\2\2\2\u0973\u0971\3\2\2\2\u0974")
        buf.write("\u0976\5\u0254\u012b\2\u0975\u0974\3\2\2\2\u0976\u0979")
        buf.write("\3\2\2\2\u0977\u0978\3\2\2\2\u0977\u0975\3\2\2\2\u0978")
        buf.write("\u01ed\3\2\2\2\u0979\u0977\3\2\2\2\u097a\u097c\5\u01fc")
        buf.write("\u00ff\2\u097b\u097a\3\2\2\2\u097b\u097c\3\2\2\2\u097c")
        buf.write("\u097d\3\2\2\2\u097d\u0980\5\u0202\u0102\2\u097e\u0980")
        buf.write("\5\u01fc\u00ff\2\u097f\u097b\3\2\2\2\u097f\u097e\3\2\2")
        buf.write("\2\u0980\u01ef\3\2\2\2\u0981\u0982\7\u008c\2\2\u0982\u0987")
        buf.write("\7,\2\2\u0983\u0984\7\u008e\2\2\u0984\u0985\5\u0208\u0105")
        buf.write("\2\u0985\u0986\7\u0091\2\2\u0986\u0988\3\2\2\2\u0987\u0983")
        buf.write("\3\2\2\2\u0987\u0988\3\2\2\2\u0988\u01f1\3\2\2\2\u0989")
        buf.write("\u0993\7\u008c\2\2\u098a\u0994\7\u00ae\2\2\u098b\u0991")
        buf.write("\5\u0238\u011d\2\u098c\u0992\5\u0098M\2\u098d\u098e\7")
        buf.write("\u008e\2\2\u098e\u098f\5\u0208\u0105\2\u098f\u0990\7\u0091")
        buf.write("\2\2\u0990\u0992\3\2\2\2\u0991\u098c\3\2\2\2\u0991\u098d")
        buf.write("\3\2\2\2\u0991\u0992\3\2\2\2\u0992\u0994\3\2\2\2\u0993")
        buf.write("\u098a\3\2\2\2\u0993\u098b\3\2\2\2\u0994\u01f3\3\2\2\2")
        buf.write("\u0995\u0996\7\u008c\2\2\u0996\u0997\7a\2\2\u0997\u01f5")
        buf.write("\3\2\2\2\u0998\u0999\7\u008f\2\2\u0999\u099a\5\u01fe\u0100")
        buf.write("\2\u099a\u099b\7\u0092\2\2\u099b\u01f7\3\2\2\2\u099c\u099d")
        buf.write("\6\u00fd\7\2\u099d\u099e\7\u0099\2\2\u099e\u01f9\3\2\2")
        buf.write("\2\u099f\u09a0\6\u00fe\b\2\u09a0\u09a1\7\u009a\2\2\u09a1")
        buf.write("\u01fb\3\2\2\2\u09a2\u09a4\7\u008e\2\2\u09a3\u09a5\5\u01fe")
        buf.write("\u0100\2\u09a4\u09a3\3\2\2\2\u09a4\u09a5\3\2\2\2\u09a5")
        buf.write("\u09a6\3\2\2\2\u09a6\u09a7\7\u0091\2\2\u09a7\u01fd\3\2")
        buf.write("\2\2\u09a8\u09ad\5\u0200\u0101\2\u09a9\u09aa\7\u0093\2")
        buf.write("\2\u09aa\u09ac\5\u0200\u0101\2\u09ab\u09a9\3\2\2\2\u09ac")
        buf.write("\u09af\3\2\2\2\u09ad\u09ab\3\2\2\2\u09ad\u09ae\3\2\2\2")
        buf.write("\u09ae\u01ff\3\2\2\2\u09af\u09ad\3\2\2\2\u09b0\u09b2\5")
        buf.write("\u020a\u0106\2\u09b1\u09b0\3\2\2\2\u09b1\u09b2\3\2\2\2")
        buf.write("\u09b2\u09b6\3\2\2\2\u09b3\u09b7\5\u0238\u011d\2\u09b4")
        buf.write("\u09b7\5\u0194\u00cb\2\u09b5\u09b7\5\u0256\u012c\2\u09b6")
        buf.write("\u09b3\3\2\2\2\u09b6\u09b4\3\2\2\2\u09b6\u09b5\3\2\2\2")
        buf.write("\u09b7\u0201\3\2\2\2\u09b8\u09ba\5\u01be\u00e0\2\u09b9")
        buf.write("\u09bb\5\u0204\u0103\2\u09ba\u09b9\3\2\2\2\u09ba\u09bb")
        buf.write("\3\2\2\2\u09bb\u0203\3\2\2\2\u09bc\u09be\5\u0206\u0104")
        buf.write("\2\u09bd\u09bc\3\2\2\2\u09be\u09bf\3\2\2\2\u09bf\u09bd")
        buf.write("\3\2\2\2\u09bf\u09c0\3\2\2\2\u09c0\u0205\3\2\2\2\u09c1")
        buf.write("\u09c2\5\u0238\u011d\2\u09c2\u09c3\7\u0094\2\2\u09c3\u09c4")
        buf.write("\5\u01be\u00e0\2\u09c4\u0207\3\2\2\2\u09c5\u09c7\5\u020a")
        buf.write("\u0106\2\u09c6\u09c5\3\2\2\2\u09c7\u09c8\3\2\2\2\u09c8")
        buf.write("\u09c6\3\2\2\2\u09c8\u09c9\3\2\2\2\u09c9\u0209\3\2\2\2")
        buf.write("\u09ca\u09cb\5\u0238\u011d\2\u09cb\u09cc\7\u0094\2\2\u09cc")
        buf.write("\u020b\3\2\2\2\u09cd\u09ce\b\u0107\1\2\u09ce\u09dc\5\u021c")
        buf.write("\u010f\2\u09cf\u09dc\5\u0226\u0114\2\u09d0\u09dc\5\u0228")
        buf.write("\u0115\2\u09d1\u09dc\5\u022a\u0116\2\u09d2\u09dc\5\u0210")
        buf.write("\u0109\2\u09d3\u09dc\5\u0214\u010b\2\u09d4\u09dc\5\u022e")
        buf.write("\u0118\2\u09d5\u09dc\5\u0230\u0119\2\u09d6\u09dc\5\u0232")
        buf.write("\u011a\2\u09d7\u09d8\7\u008e\2\2\u09d8\u09d9\5\u020c\u0107")
        buf.write("\2\u09d9\u09da\7\u0091\2\2\u09da\u09dc\3\2\2\2\u09db\u09cd")
        buf.write("\3\2\2\2\u09db\u09cf\3\2\2\2\u09db\u09d0\3\2\2\2\u09db")
        buf.write("\u09d1\3\2\2\2\u09db\u09d2\3\2\2\2\u09db\u09d3\3\2\2\2")
        buf.write("\u09db\u09d4\3\2\2\2\u09db\u09d5\3\2\2\2\u09db\u09d6\3")
        buf.write("\2\2\2\u09db\u09d7\3\2\2\2\u09dc\u09ea\3\2\2\2\u09dd\u09e6")
        buf.write("\f\6\2\2\u09de\u09df\6\u0107\n\2\u09df\u09e7\7\u009a\2")
        buf.write("\2\u09e0\u09e1\6\u0107\13\2\u09e1\u09e7\7\u0099\2\2\u09e2")
        buf.write("\u09e3\7\u008c\2\2\u09e3\u09e7\7_\2\2\u09e4\u09e5\7\u008c")
        buf.write("\2\2\u09e5\u09e7\7\37\2\2\u09e6\u09de\3\2\2\2\u09e6\u09e0")
        buf.write("\3\2\2\2\u09e6\u09e2\3\2\2\2\u09e6\u09e4\3\2\2\2\u09e7")
        buf.write("\u09e9\3\2\2\2\u09e8\u09dd\3\2\2\2\u09e9\u09ec\3\2\2\2")
        buf.write("\u09ea\u09e8\3\2\2\2\u09ea\u09eb\3\2\2\2\u09eb\u020d\3")
        buf.write("\2\2\2\u09ec\u09ea\3\2\2\2\u09ed\u09ef\7\u0094\2\2\u09ee")
        buf.write("\u09f0\5\u018c\u00c7\2\u09ef\u09ee\3\2\2\2\u09ef\u09f0")
        buf.write("\3\2\2\2\u09f0\u09f2\3\2\2\2\u09f1\u09f3\7]\2\2\u09f2")
        buf.write("\u09f1\3\2\2\2\u09f2\u09f3\3\2\2\2\u09f3\u09f4\3\2\2\2")
        buf.write("\u09f4\u09f5\5\u020c\u0107\2\u09f5\u020f\3\2\2\2\u09f6")
        buf.write("\u09f8\5\u0212\u010a\2\u09f7\u09f9\5\u0098M\2\u09f8\u09f7")
        buf.write("\3\2\2\2\u09f8\u09f9\3\2\2\2\u09f9\u09fc\3\2\2\2\u09fa")
        buf.write("\u09fb\7\u008c\2\2\u09fb\u09fd\5\u0210\u0109\2\u09fc\u09fa")
        buf.write("\3\2\2\2\u09fc\u09fd\3\2\2\2\u09fd\u0211\3\2\2\2\u09fe")
        buf.write("\u09ff\5\u0238\u011d\2\u09ff\u0213\3\2\2\2\u0a00\u0a02")
        buf.write("\7\u008e\2\2\u0a01\u0a03\5\u0216\u010c\2\u0a02\u0a01\3")
        buf.write("\2\2\2\u0a02\u0a03\3\2\2\2\u0a03\u0a04\3\2\2\2\u0a04\u0a05")
        buf.write("\7\u0091\2\2\u0a05\u0215\3\2\2\2\u0a06\u0a0b\5\u0218\u010d")
        buf.write("\2\u0a07\u0a08\7\u0093\2\2\u0a08\u0a0a\5\u0218\u010d\2")
        buf.write("\u0a09\u0a07\3\2\2\2\u0a0a\u0a0d\3\2\2\2\u0a0b\u0a09\3")
        buf.write("\2\2\2\u0a0b\u0a0c\3\2\2\2\u0a0c\u0217\3\2\2\2\u0a0d\u0a0b")
        buf.write("\3\2\2\2\u0a0e\u0a0f\5\u021a\u010e\2\u0a0f\u0a10\5\u020e")
        buf.write("\u0108\2\u0a10\u0a13\3\2\2\2\u0a11\u0a13\5\u020c\u0107")
        buf.write("\2\u0a12\u0a0e\3\2\2\2\u0a12\u0a11\3\2\2\2\u0a13\u0a16")
        buf.write("\3\2\2\2\u0a14\u0a15\7\u009e\2\2\u0a15\u0a17\5\u0194\u00cb")
        buf.write("\2\u0a16\u0a14\3\2\2\2\u0a16\u0a17\3\2\2\2\u0a17\u0219")
        buf.write("\3\2\2\2\u0a18\u0a1a\5\u0238\u011d\2\u0a19\u0a18\3\2\2")
        buf.write("\2\u0a1a\u0a1b\3\2\2\2\u0a1b\u0a19\3\2\2\2\u0a1b\u0a1c")
        buf.write("\3\2\2\2\u0a1c\u021b\3\2\2\2\u0a1d\u0a1f\5\u018c\u00c7")
        buf.write("\2\u0a1e\u0a1d\3\2\2\2\u0a1e\u0a1f\3\2\2\2\u0a1f\u0a20")
        buf.write("\3\2\2\2\u0a20\u0a22\5\u021e\u0110\2\u0a21\u0a23\7)\2")
        buf.write("\2\u0a22\u0a21\3\2\2\2\u0a22\u0a23\3\2\2\2\u0a23\u0a24")
        buf.write("\3\2\2\2\u0a24\u0a25\5\u024a\u0126\2\u0a25\u0a26\5\u020c")
        buf.write("\u0107\2\u0a26\u021d\3\2\2\2\u0a27\u0a2c\7\u008e\2\2\u0a28")
        buf.write("\u0a2a\5\u0220\u0111\2\u0a29\u0a2b\5\u024c\u0127\2\u0a2a")
        buf.write("\u0a29\3\2\2\2\u0a2a\u0a2b\3\2\2\2\u0a2b\u0a2d\3\2\2\2")
        buf.write("\u0a2c\u0a28\3\2\2\2\u0a2c\u0a2d\3\2\2\2\u0a2d\u0a2e\3")
        buf.write("\2\2\2\u0a2e\u0a2f\7\u0091\2\2\u0a2f\u021f\3\2\2\2\u0a30")
        buf.write("\u0a35\5\u0222\u0112\2\u0a31\u0a32\7\u0093\2\2\u0a32\u0a34")
        buf.write("\5\u0222\u0112\2\u0a33\u0a31\3\2\2\2\u0a34\u0a37\3\2\2")
        buf.write("\2\u0a35\u0a33\3\2\2\2\u0a35\u0a36\3\2\2\2\u0a36\u0221")
        buf.write("\3\2\2\2\u0a37\u0a35\3\2\2\2\u0a38\u0a3a\5\u018c\u00c7")
        buf.write("\2\u0a39\u0a38\3\2\2\2\u0a39\u0a3a\3\2\2\2\u0a3a\u0a3c")
        buf.write("\3\2\2\2\u0a3b\u0a3d\7]\2\2\u0a3c\u0a3b\3\2\2\2\u0a3c")
        buf.write("\u0a3d\3\2\2\2\u0a3d\u0a3e\3\2\2\2\u0a3e\u0a43\5\u020c")
        buf.write("\u0107\2\u0a3f\u0a40\5\u0224\u0113\2\u0a40\u0a41\5\u020e")
        buf.write("\u0108\2\u0a41\u0a43\3\2\2\2\u0a42\u0a39\3\2\2\2\u0a42")
        buf.write("\u0a3f\3\2\2\2\u0a43\u0223\3\2\2\2\u0a44\u0a46\5\u0238")
        buf.write("\u011d\2\u0a45\u0a44\3\2\2\2\u0a46\u0a47\3\2\2\2\u0a47")
        buf.write("\u0a45\3\2\2\2\u0a47\u0a48\3\2\2\2\u0a48\u0225\3\2\2\2")
        buf.write("\u0a49\u0a4a\7\u008f\2\2\u0a4a\u0a4b\5\u020c\u0107\2\u0a4b")
        buf.write("\u0a4c\7\u0092\2\2\u0a4c\u0227\3\2\2\2\u0a4d\u0a4e\7\u008f")
        buf.write("\2\2\u0a4e\u0a4f\5\u020c\u0107\2\u0a4f\u0a50\7\u0094\2")
        buf.write("\2\u0a50\u0a51\5\u020c\u0107\2\u0a51\u0a52\7\u0092\2\2")
        buf.write("\u0a52\u0229\3\2\2\2\u0a53\u0a58\5\u0210\u0109\2\u0a54")
        buf.write("\u0a55\7\u009c\2\2\u0a55\u0a57\5\u0210\u0109\2\u0a56\u0a54")
        buf.write("\3\2\2\2\u0a57\u0a5a\3\2\2\2\u0a58\u0a56\3\2\2\2\u0a58")
        buf.write("\u0a59\3\2\2\2\u0a59\u0a5c\3\2\2\2\u0a5a\u0a58\3\2\2\2")
        buf.write("\u0a5b\u0a5d\5\u022c\u0117\2\u0a5c\u0a5b\3\2\2\2\u0a5c")
        buf.write("\u0a5d\3\2\2\2\u0a5d\u022b\3\2\2\2\u0a5e\u0a5f\6\u0117")
        buf.write("\f\2\u0a5f\u0a60\7\u009c\2\2\u0a60\u022d\3\2\2\2\u0a61")
        buf.write("\u0a62\7^\2\2\u0a62\u0a63\5\u020c\u0107\2\u0a63\u022f")
        buf.write("\3\2\2\2\u0a64\u0a65\7U\2\2\u0a65\u0231\3\2\2\2\u0a66")
        buf.write("\u0a67\7b\2\2\u0a67\u0233\3\2\2\2\u0a68\u0a69\7\u0094")
        buf.write("\2\2\u0a69\u0a6a\5\u0236\u011c\2\u0a6a\u0235\3\2\2\2\u0a6b")
        buf.write("\u0a70\5\u0210\u0109\2\u0a6c\u0a6d\7\u0093\2\2\u0a6d\u0a6f")
        buf.write("\5\u0210\u0109\2\u0a6e\u0a6c\3\2\2\2\u0a6f\u0a72\3\2\2")
        buf.write("\2\u0a70\u0a6e\3\2\2\2\u0a70\u0a71\3\2\2\2\u0a71\u0237")
        buf.write("\3\2\2\2\u0a72\u0a70\3\2\2\2\u0a73\u0a7d\t\23\2\2\u0a74")
        buf.write("\u0a7d\7\u008b\2\2\u0a75\u0a79\7\u00a7\2\2\u0a76\u0a7a")
        buf.write("\5\u023c\u011f\2\u0a77\u0a7a\7\u008b\2\2\u0a78\u0a7a\7")
        buf.write("\u00a8\2\2\u0a79\u0a76\3\2\2\2\u0a79\u0a77\3\2\2\2\u0a79")
        buf.write("\u0a78\3\2\2\2\u0a7a\u0a7b\3\2\2\2\u0a7b\u0a7d\7\u00a7")
        buf.write("\2\2\u0a7c\u0a73\3\2\2\2\u0a7c\u0a74\3\2\2\2\u0a7c\u0a75")
        buf.write("\3\2\2\2\u0a7d\u0239\3\2\2\2\u0a7e\u0a83\5\u0238\u011d")
        buf.write("\2\u0a7f\u0a80\7\u0093\2\2\u0a80\u0a82\5\u0238\u011d\2")
        buf.write("\u0a81\u0a7f\3\2\2\2\u0a82\u0a85\3\2\2\2\u0a83\u0a81\3")
        buf.write("\2\2\2\u0a83\u0a84\3\2\2\2\u0a84\u023b\3\2\2\2\u0a85\u0a83")
        buf.write("\3\2\2\2\u0a86\u0a87\t\24\2\2\u0a87\u023d\3\2\2\2\u0a88")
        buf.write("\u0a89\6\u0120\r\2\u0a89\u0a8a\7\u009e\2\2\u0a8a\u023f")
        buf.write("\3\2\2\2\u0a8b\u0a8c\6\u0121\16\2\u0a8c\u0a8d\7\u009d")
        buf.write("\2\2\u0a8d\u0241\3\2\2\2\u0a8e\u0a8f\6\u0122\17\2\u0a8f")
        buf.write("\u0a90\7\u009c\2\2\u0a90\u0a91\7\u009c\2\2\u0a91\u0243")
        buf.write("\3\2\2\2\u0a92\u0a93\6\u0123\20\2\u0a93\u0a94\7\u009f")
        buf.write("\2\2\u0a94\u0a95\7\u009f\2\2\u0a95\u0245\3\2\2\2\u0a96")
        buf.write("\u0a97\6\u0124\21\2\u0a97\u0a98\7\u0097\2\2\u0a98\u0a99")
        buf.write("\7\u009e\2\2\u0a99\u0247\3\2\2\2\u0a9a\u0a9b\6\u0125\22")
        buf.write("\2\u0a9b\u0a9c\7\u0096\2\2\u0a9c\u0249\3\2\2\2\u0a9d\u0a9e")
        buf.write("\6\u0126\23\2\u0a9e\u0a9f\7\u009d\2\2\u0a9f\u0aa0\7\u0097")
        buf.write("\2\2\u0aa0\u024b\3\2\2\2\u0aa1\u0aa2\6\u0127\24\2\u0aa2")
        buf.write("\u0aa3\7\u008c\2\2\u0aa3\u0aa4\7\u008c\2\2\u0aa4\u0aa5")
        buf.write("\7\u008c\2\2\u0aa5\u024d\3\2\2\2\u0aa6\u0aa7\6\u0128\25")
        buf.write("\2\u0aa7\u0aa8\7\u009e\2\2\u0aa8\u0aa9\7\u009e\2\2\u0aa9")
        buf.write("\u024f\3\2\2\2\u0aaa\u0aab\6\u0129\26\2\u0aab\u0aac\5")
        buf.write("\u0256\u012c\2\u0aac\u0251\3\2\2\2\u0aad\u0aae\6\u012a")
        buf.write("\27\2\u0aae\u0aaf\5\u0256\u012c\2\u0aaf\u0253\3\2\2\2")
        buf.write("\u0ab0\u0ab1\6\u012b\30\2\u0ab1\u0ab2\5\u0256\u012c\2")
        buf.write("\u0ab2\u0255\3\2\2\2\u0ab3\u0ab5\5\u0258\u012d\2\u0ab4")
        buf.write("\u0ab6\5\u025c\u012f\2\u0ab5\u0ab4\3\2\2\2\u0ab5\u0ab6")
        buf.write("\3\2\2\2\u0ab6\u0abb\3\2\2\2\u0ab7\u0ab8\5\u025e\u0130")
        buf.write("\2\u0ab8\u0ab9\5\u0262\u0132\2\u0ab9\u0abb\3\2\2\2\u0aba")
        buf.write("\u0ab3\3\2\2\2\u0aba\u0ab7\3\2\2\2\u0abb\u0257\3\2\2\2")
        buf.write("\u0abc\u0abf\t\25\2\2\u0abd\u0abf\7\u00aa\2\2\u0abe\u0abc")
        buf.write("\3\2\2\2\u0abe\u0abd\3\2\2\2\u0abf\u0259\3\2\2\2\u0ac0")
        buf.write("\u0ac3\5\u0258\u012d\2\u0ac1\u0ac3\7\u00ab\2\2\u0ac2\u0ac0")
        buf.write("\3\2\2\2\u0ac2\u0ac1\3\2\2\2\u0ac3\u025b\3\2\2\2\u0ac4")
        buf.write("\u0ac5\6\u012f\31\2\u0ac5\u0ac7\5\u025a\u012e\2\u0ac6")
        buf.write("\u0ac4\3\2\2\2\u0ac7\u0ac8\3\2\2\2\u0ac8\u0ac6\3\2\2\2")
        buf.write("\u0ac8\u0ac9\3\2\2\2\u0ac9\u025d\3\2\2\2\u0aca\u0acb\7")
        buf.write("\u008c\2\2\u0acb\u025f\3\2\2\2\u0acc\u0acf\7\u008c\2\2")
        buf.write("\u0acd\u0acf\5\u025a\u012e\2\u0ace\u0acc\3\2\2\2\u0ace")
        buf.write("\u0acd\3\2\2\2\u0acf\u0261\3\2\2\2\u0ad0\u0ad1\6\u0132")
        buf.write("\32\2\u0ad1\u0ad3\5\u0260\u0131\2\u0ad2\u0ad0\3\2\2\2")
        buf.write("\u0ad3\u0ad4\3\2\2\2\u0ad4\u0ad2\3\2\2\2\u0ad4\u0ad5\3")
        buf.write("\2\2\2\u0ad5\u0263\3\2\2\2\u0ad6\u0adb\5\u0266\u0134\2")
        buf.write("\u0ad7\u0adb\5\u026e\u0138\2\u0ad8\u0adb\5\u0268\u0135")
        buf.write("\2\u0ad9\u0adb\5\u026a\u0136\2\u0ada\u0ad6\3\2\2\2\u0ada")
        buf.write("\u0ad7\3\2\2\2\u0ada\u0ad8\3\2\2\2\u0ada\u0ad9\3\2\2\2")
        buf.write("\u0adb\u0265\3\2\2\2\u0adc\u0ade\5\u0240\u0121\2\u0add")
        buf.write("\u0adc\3\2\2\2\u0add\u0ade\3\2\2\2\u0ade\u0adf\3\2\2\2")
        buf.write("\u0adf\u0ae5\5\u026c\u0137\2\u0ae0\u0ae2\5\u0240\u0121")
        buf.write("\2\u0ae1\u0ae0\3\2\2\2\u0ae1\u0ae2\3\2\2\2\u0ae2\u0ae3")
        buf.write("\3\2\2\2\u0ae3\u0ae5\7\u00b1\2\2\u0ae4\u0add\3\2\2\2\u0ae4")
        buf.write("\u0ae1\3\2\2\2\u0ae5\u0267\3\2\2\2\u0ae6\u0ae7\t\26\2")
        buf.write("\2\u0ae7\u0269\3\2\2\2\u0ae8\u0ae9\7\\\2\2\u0ae9\u026b")
        buf.write("\3\2\2\2\u0aea\u0aeb\t\27\2\2\u0aeb\u026d\3\2\2\2\u0aec")
        buf.write("\u0af0\5\u0270\u0139\2\u0aed\u0af0\5\u0274\u013b\2\u0aee")
        buf.write("\u0af0\5\u0272\u013a\2\u0aef\u0aec\3\2\2\2\u0aef\u0aed")
        buf.write("\3\2\2\2\u0aef\u0aee\3\2\2\2\u0af0\u026f\3\2\2\2\u0af1")
        buf.write("\u0af3\7\u00b6\2\2\u0af2\u0af4\7\u00c3\2\2\u0af3\u0af2")
        buf.write("\3\2\2\2\u0af4\u0af5\3\2\2\2\u0af5\u0af3\3\2\2\2\u0af5")
        buf.write("\u0af6\3\2\2\2\u0af6\u0af7\3\2\2\2\u0af7\u0b00\7\u00c2")
        buf.write("\2\2\u0af8\u0afa\7\u00b7\2\2\u0af9\u0afb\7\u00c1\2\2\u0afa")
        buf.write("\u0af9\3\2\2\2\u0afb\u0afc\3\2\2\2\u0afc\u0afa\3\2\2\2")
        buf.write("\u0afc\u0afd\3\2\2\2\u0afd\u0afe\3\2\2\2\u0afe\u0b00\7")
        buf.write("\u00c0\2\2\u0aff\u0af1\3\2\2\2\u0aff\u0af8\3\2\2\2\u0b00")
        buf.write("\u0271\3\2\2\2\u0b01\u0b05\7\u00b9\2\2\u0b02\u0b04\7\u00bc")
        buf.write("\2\2\u0b03\u0b02\3\2\2\2\u0b04\u0b07\3\2\2\2\u0b05\u0b03")
        buf.write("\3\2\2\2\u0b05\u0b06\3\2\2\2\u0b06\u0b08\3\2\2\2\u0b07")
        buf.write("\u0b05\3\2\2\2\u0b08\u0b12\7\u00bb\2\2\u0b09\u0b0d\7\u00b8")
        buf.write("\2\2\u0b0a\u0b0c\7\u00bf\2\2\u0b0b\u0b0a\3\2\2\2\u0b0c")
        buf.write("\u0b0f\3\2\2\2\u0b0d\u0b0b\3\2\2\2\u0b0d\u0b0e\3\2\2\2")
        buf.write("\u0b0e\u0b10\3\2\2\2\u0b0f\u0b0d\3\2\2\2\u0b10\u0b12\7")
        buf.write("\u00be\2\2\u0b11\u0b01\3\2\2\2\u0b11\u0b09\3\2\2\2\u0b12")
        buf.write("\u0273\3\2\2\2\u0b13\u0b21\7\u00b9\2\2\u0b14\u0b20\7\u00bc")
        buf.write("\2\2\u0b15\u0b1b\7\u00ba\2\2\u0b16\u0b1c\5\u0194\u00cb")
        buf.write("\2\u0b17\u0b18\5\u01da\u00ee\2\u0b18\u0b19\7\u0093\2\2")
        buf.write("\u0b19\u0b1a\5\u01d8\u00ed\2\u0b1a\u0b1c\3\2\2\2\u0b1b")
        buf.write("\u0b16\3\2\2\2\u0b1b\u0b17\3\2\2\2\u0b1c\u0b1d\3\2\2\2")
        buf.write("\u0b1d\u0b1e\7\u0091\2\2\u0b1e\u0b20\3\2\2\2\u0b1f\u0b14")
        buf.write("\3\2\2\2\u0b1f\u0b15\3\2\2\2\u0b20\u0b23\3\2\2\2\u0b21")
        buf.write("\u0b1f\3\2\2\2\u0b21\u0b22\3\2\2\2\u0b22\u0b24\3\2\2\2")
        buf.write("\u0b23\u0b21\3\2\2\2\u0b24\u0b38\7\u00bb\2\2\u0b25\u0b33")
        buf.write("\7\u00b8\2\2\u0b26\u0b32\7\u00bf\2\2\u0b27\u0b2d\7\u00bd")
        buf.write("\2\2\u0b28\u0b2e\5\u0194\u00cb\2\u0b29\u0b2a\5\u01da\u00ee")
        buf.write("\2\u0b2a\u0b2b\7\u0093\2\2\u0b2b\u0b2c\5\u01d8\u00ed\2")
        buf.write("\u0b2c\u0b2e\3\2\2\2\u0b2d\u0b28\3\2\2\2\u0b2d\u0b29\3")
        buf.write("\2\2\2\u0b2e\u0b2f\3\2\2\2\u0b2f\u0b30\7\u0091\2\2\u0b30")
        buf.write("\u0b32\3\2\2\2\u0b31\u0b26\3\2\2\2\u0b31\u0b27\3\2\2\2")
        buf.write("\u0b32\u0b35\3\2\2\2\u0b33\u0b31\3\2\2\2\u0b33\u0b34\3")
        buf.write("\2\2\2\u0b34\u0b36\3\2\2\2\u0b35\u0b33\3\2\2\2\u0b36\u0b38")
        buf.write("\7\u00be\2\2\u0b37\u0b13\3\2\2\2\u0b37\u0b25\3\2\2\2\u0b38")
        buf.write("\u0275\3\2\2\2\u0167\u0277\u0283\u0286\u0289\u0291\u0296")
        buf.write("\u029a\u02a0\u02ad\u02b4\u02c6\u02cc\u02d2\u02dd\u02e3")
        buf.write("\u02e7\u02ec\u02ef\u02f7\u02fc\u0300\u0304\u0310\u0313")
        buf.write("\u031a\u031e\u0323\u0327\u032e\u033a\u033e\u0342\u0348")
        buf.write("\u0353\u0358\u035c\u0367\u036c\u0371\u0375\u0378\u037f")
        buf.write("\u0384\u0389\u038d\u0399\u039e\u03a4\u03b5\u03c4\u03c8")
        buf.write("\u03cd\u03d8\u03e7\u0400\u0407\u0410\u0412\u041d\u0424")
        buf.write("\u0426\u0430\u0435\u043b\u0441\u044c\u0460\u0463\u0468")
        buf.write("\u046b\u046f\u0474\u0478\u0483\u0488\u048b\u048e\u0498")
        buf.write("\u049d\u04ab\u04ae\u04b0\u04b3\u04b6\u04b9\u04c2\u04c7")
        buf.write("\u04cc\u04cf\u04d2\u04d6\u04d9\u04dc\u04e0\u04e3\u04ec")
        buf.write("\u04f1\u04f6\u04f9\u04fe\u0501\u0508\u050c\u050e\u0513")
        buf.write("\u0517\u051c\u0520\u0525\u0528\u052d\u0539\u053d\u0540")
        buf.write("\u0543\u0546\u054c\u0550\u0553\u0556\u055a\u0562\u056b")
        buf.write("\u056f\u0572\u0577\u057a\u0584\u0587\u058b\u058e\u0593")
        buf.write("\u0596\u0599\u059d\u05a4\u05a9\u05ac\u05af\u05b9\u05c3")
        buf.write("\u05c5\u05ce\u05d2\u05db\u05e0\u05e3\u05ed\u05f2\u05fa")
        buf.write("\u05fd\u0600\u0605\u0608\u060b\u0618\u061d\u0620\u0623")
        buf.write("\u0626\u062a\u062c\u0631\u0634\u0637\u0644\u0649\u064c")
        buf.write("\u064f\u0656\u0659\u0666\u066b\u0673\u067d\u0681\u0685")
        buf.write("\u0689\u068c\u068f\u0694\u0699\u069c\u06a1\u06a4\u06a7")
        buf.write("\u06ab\u06af\u06b2\u06b7\u06ba\u06be\u06c3\u06c9\u06cc")
        buf.write("\u06d1\u06d4\u06df\u06e4\u06e9\u06ee\u06f1\u06f4\u06f8")
        buf.write("\u06fe\u0705\u0713\u071c\u0723\u0728\u073b\u0743\u0756")
        buf.write("\u075b\u0760\u0766\u076e\u0771\u0779\u0780\u078b\u078f")
        buf.write("\u0798\u079e\u07a3\u07a8\u07b2\u07b9\u07be\u07c5\u07ca")
        buf.write("\u07ce\u07d3\u07d8\u07e0\u07e8\u07eb\u07ef\u07f6\u07fa")
        buf.write("\u07fe\u0805\u080c\u080f\u0814\u0819\u0822\u0824\u082a")
        buf.write("\u083a\u0841\u084e\u0852\u085b\u085f\u0866\u086f\u0873")
        buf.write("\u089a\u08a8\u08b5\u08b9\u08bc\u08c1\u08c5\u08c8\u08cf")
        buf.write("\u08d3\u08d7\u08de\u08e4\u08e6\u08f1\u08f5\u08f9\u08fe")
        buf.write("\u0905\u0907\u090c\u0910\u0922\u0929\u092f\u0937\u0941")
        buf.write("\u0946\u0949\u094e\u0957\u095d\u096f\u0971\u0977\u097b")
        buf.write("\u097f\u0987\u0991\u0993\u09a4\u09ad\u09b1\u09b6\u09ba")
        buf.write("\u09bf\u09c8\u09db\u09e6\u09ea\u09ef\u09f2\u09f8\u09fc")
        buf.write("\u0a02\u0a0b\u0a12\u0a16\u0a1b\u0a1e\u0a22\u0a2a\u0a2c")
        buf.write("\u0a35\u0a39\u0a3c\u0a42\u0a47\u0a58\u0a5c\u0a70\u0a79")
        buf.write("\u0a7c\u0a83\u0ab5\u0aba\u0abe\u0ac2\u0ac8\u0ace\u0ad4")
        buf.write("\u0ada\u0add\u0ae1\u0ae4\u0aef\u0af5\u0afc\u0aff\u0b05")
        buf.write("\u0b0d\u0b11\u0b1b\u0b1f\u0b21\u0b2d\u0b31\u0b33\u0b37")
        return buf.getvalue()

@PARSERS.register('swift')
class Swift5Parser ( Parser ):

    grammarFileName = "Swift5Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'as'", "'alpha'", "'break'", "'case'", 
                     "'catch'", "'class'", "'continue'", "'default'", "'defer'", 
                     "'do'", "'guard'", "'else'", "'enum'", "'for'", "'fallthrough'", 
                     "'func'", "'in'", "'if'", "'import'", "'internal'", 
                     "'final'", "'open'", "'private'", "'public'", "'where'", 
                     "'while'", "'let'", "'var'", "'protocol'", "'get'", 
                     "'set'", "'willSet'", "'didSet'", "'repeat'", "'switch'", 
                     "'struct'", "'return'", "'throw'", "'throws'", "'rethrows'", 
                     "'indirect'", "'init'", "'deinit'", "'associatedtype'", 
                     "'extension'", "'subscript'", "'prefix'", "'infix'", 
                     "'left'", "'right'", "'none'", "'precedencegroup'", 
                     "'higherThan'", "'lowerThan'", "'assignment'", "'associativity'", 
                     "'postfix'", "'operator'", "'typealias'", "'os'", "'arch'", 
                     "'swift'", "'compiler'", "'canImport'", "'targetEnvironment'", 
                     "'convenience'", "'dynamic'", "'lazy'", "'optional'", 
                     "'override'", "'required'", "'static'", "'weak'", "'unowned'", 
                     "'safe'", "'unsafe'", "'mutating'", "'nonmutating'", 
                     "'fileprivate'", "'is'", "'try'", "'super'", "'Any'", 
                     "'false'", "'red'", "'blue'", "'green'", "'resourceName'", 
                     "'true'", "'nil'", "'inout'", "'some'", "'Type'", "'precedence'", 
                     "'self'", "'Self'", "'macOS'", "'iOS'", "'OSX'", "'watchOS'", 
                     "'tvOS'", "'Linux'", "'Windows'", "'i386'", "'x86_64'", 
                     "'arm'", "'arm64'", "'simulator'", "'macCatalyst'", 
                     "'iOSApplicationExtension'", "'macCatalystApplicationExtension'", 
                     "'macOSApplicationExtension'", "'#sourceLocation'", 
                     "'file'", "'line'", "'#error'", "'#warning'", "'#available'", 
                     "'#if'", "'#elseif'", "'#else'", "'#endif'", "'#file'", 
                     "'#fileID'", "'#filePath'", "'#line'", "'#column'", 
                     "'#function'", "'#dsohandle'", "'#selector'", "'#keyPath'", 
                     "'#colorLiteral'", "'#fileLiteral'", "'#imageLiteral'", 
                     "'getter'", "'setter'", "<INVALID>", "'.'", "'{'", 
                     "'('", "'['", "'}'", "')'", "']'", "','", "':'", "';'", 
                     "'<'", "'>'", "'_'", "'!'", "'?'", "'@'", "'&'", "'-'", 
                     "'='", "'|'", "'/'", "'+'", "'*'", "'%'", "'^'", "'~'", 
                     "'#'", "'`'", "'$'", "'\\'" ]

    symbolicNames = [ "<INVALID>", "AS", "ALPHA", "BREAK", "CASE", "CATCH", 
                      "CLASS", "CONTINUE", "DEFAULT", "DEFER", "DO", "GUARD", 
                      "ELSE", "ENUM", "FOR", "FALLTHROUGH", "FUNC", "IN", 
                      "IF", "IMPORT", "INTERNAL", "FINAL", "OPEN", "PRIVATE", 
                      "PUBLIC", "WHERE", "WHILE", "LET", "VAR", "PROTOCOL", 
                      "GET", "SET", "WILL_SET", "DID_SET", "REPEAT", "SWITCH", 
                      "STRUCT", "RETURN", "THROW", "THROWS", "RETHROWS", 
                      "INDIRECT", "INIT", "DEINIT", "ASSOCIATED_TYPE", "EXTENSION", 
                      "SUBSCRIPT", "PREFIX", "INFIX", "LEFT", "RIGHT", "NONE", 
                      "PRECEDENCE_GROUP", "HIGHER_THAN", "LOWER_THAN", "ASSIGNMENT", 
                      "ASSOCIATIVITY", "POSTFIX", "OPERATOR", "TYPEALIAS", 
                      "OS", "ARCH", "SWIFT", "COMPILER", "CAN_IMPORT", "TARGET_ENVIRONMENT", 
                      "CONVENIENCE", "DYNAMIC", "LAZY", "OPTIONAL", "OVERRIDE", 
                      "REQUIRED", "STATIC", "WEAK", "UNOWNED", "SAFE", "UNSAFE", 
                      "MUTATING", "NONMUTATING", "FILE_PRIVATE", "IS", "TRY", 
                      "SUPER", "ANY", "FALSE", "RED", "BLUE", "GREEN", "RESOURCE_NAME", 
                      "TRUE", "NIL", "INOUT", "SOME", "TYPE", "PRECEDENCE", 
                      "SELF", "SELF_BIG", "MAC_OS", "I_OS", "OSX", "WATCH_OS", 
                      "TV_OS", "LINUX", "WINDOWS", "I386", "X86_64", "ARM", 
                      "ARM64", "SIMULATOR", "MAC_CATALYST", "I_OS_APPLICATION_EXTENSION", 
                      "MAC_CATALYST_APPLICATION_EXTENSION", "MAC_OS_APPLICATION_EXTENSION", 
                      "SOURCE_LOCATION", "FILE", "LINE", "ERROR", "WARNING", 
                      "AVAILABLE", "HASH_IF", "HASH_ELSEIF", "HASH_ELSE", 
                      "HASH_ENDIF", "HASH_FILE", "HASH_FILE_ID", "HASH_FILE_PATH", 
                      "HASH_LINE", "HASH_COLUMN", "HASH_FUNCTION", "HASH_DSO_HANDLE", 
                      "HASH_SELECTOR", "HASH_KEYPATH", "HASH_COLOR_LITERAL", 
                      "HASH_FILE_LITERAL", "HASH_IMAGE_LITERAL", "GETTER", 
                      "SETTER", "Identifier", "DOT", "LCURLY", "LPAREN", 
                      "LBRACK", "RCURLY", "RPAREN", "RBRACK", "COMMA", "COLON", 
                      "SEMI", "LT", "GT", "UNDERSCORE", "BANG", "QUESTION", 
                      "AT", "AND", "SUB", "EQUAL", "OR", "DIV", "ADD", "MUL", 
                      "MOD", "CARET", "TILDE", "HASH", "BACKTICK", "DOLLAR", 
                      "BACKSLASH", "Operator_head_other", "Operator_following_character", 
                      "Binary_literal", "Octal_literal", "Decimal_digits", 
                      "Decimal_literal", "Hexadecimal_literal", "Floating_point_literal", 
                      "WS", "HASHBANG", "Block_comment", "Line_comment", 
                      "Multi_line_extended_string_open", "Single_line_extended_string_open", 
                      "Multi_line_string_open", "Single_line_string_open", 
                      "Interpolataion_single_line", "Single_line_string_close", 
                      "Quoted_single_line_text", "Interpolataion_multi_line", 
                      "Multi_line_string_close", "Quoted_multi_line_text", 
                      "Single_line_extended_string_close", "Quoted_single_line_extended_text", 
                      "Multi_line_extended_string_close", "Quoted_multi_line_extended_text" ]

    RULE_top_level = 0
    RULE_statement = 1
    RULE_statements = 2
    RULE_loop_statement = 3
    RULE_for_in_statement = 4
    RULE_while_statement = 5
    RULE_condition_list = 6
    RULE_condition = 7
    RULE_case_condition = 8
    RULE_optional_binding_condition = 9
    RULE_repeat_while_statement = 10
    RULE_branch_statement = 11
    RULE_if_statement = 12
    RULE_else_clause = 13
    RULE_guard_statement = 14
    RULE_switch_statement = 15
    RULE_switch_cases = 16
    RULE_switch_case = 17
    RULE_case_label = 18
    RULE_case_item_list = 19
    RULE_default_label = 20
    RULE_where_clause = 21
    RULE_where_expression = 22
    RULE_conditional_switch_case = 23
    RULE_switch_if_directive_clause = 24
    RULE_switch_elseif_directive_clauses = 25
    RULE_switch_elseif_directive_clause = 26
    RULE_switch_else_directive_clause = 27
    RULE_labeled_statement = 28
    RULE_statement_label = 29
    RULE_label_name = 30
    RULE_control_transfer_statement = 31
    RULE_break_statement = 32
    RULE_continue_statement = 33
    RULE_fallthrough_statement = 34
    RULE_return_statement = 35
    RULE_throw_statement = 36
    RULE_defer_statement = 37
    RULE_do_statement = 38
    RULE_catch_clauses = 39
    RULE_catch_clause = 40
    RULE_catch_pattern_list = 41
    RULE_catch_pattern = 42
    RULE_compiler_control_statement = 43
    RULE_conditional_compilation_block = 44
    RULE_if_directive_clause = 45
    RULE_elseif_directive_clauses = 46
    RULE_elseif_directive_clause = 47
    RULE_else_directive_clause = 48
    RULE_compilation_condition = 49
    RULE_platform_condition = 50
    RULE_swift_version = 51
    RULE_swift_version_continuation = 52
    RULE_operating_system = 53
    RULE_architecture = 54
    RULE_module_name = 55
    RULE_environment = 56
    RULE_line_control_statement = 57
    RULE_line_number = 58
    RULE_file_name = 59
    RULE_diagnostic_statement = 60
    RULE_diagnostic_message = 61
    RULE_availability_condition = 62
    RULE_availability_arguments = 63
    RULE_availability_argument = 64
    RULE_platform_name = 65
    RULE_platform_version = 66
    RULE_generic_parameter_clause = 67
    RULE_generic_parameter_list = 68
    RULE_generic_parameter = 69
    RULE_generic_where_clause = 70
    RULE_requirement_list = 71
    RULE_requirement = 72
    RULE_conformance_requirement = 73
    RULE_same_type_requirement = 74
    RULE_generic_argument_clause = 75
    RULE_generic_argument_list = 76
    RULE_generic_argument = 77
    RULE_declaration = 78
    RULE_declarations = 79
    RULE_top_level_declaration = 80
    RULE_code_block = 81
    RULE_import_declaration = 82
    RULE_import_kind = 83
    RULE_import_path = 84
    RULE_import_path_identifier = 85
    RULE_constant_declaration = 86
    RULE_pattern_initializer_list = 87
    RULE_pattern_initializer = 88
    RULE_initializer = 89
    RULE_variable_declaration = 90
    RULE_variable_declaration_head = 91
    RULE_variable_name = 92
    RULE_getter_setter_block = 93
    RULE_getter_clause = 94
    RULE_setter_clause = 95
    RULE_setter_name = 96
    RULE_getter_setter_keyword_block = 97
    RULE_getter_keyword_clause = 98
    RULE_setter_keyword_clause = 99
    RULE_willSet_didSet_block = 100
    RULE_willSet_clause = 101
    RULE_didSet_clause = 102
    RULE_typealias_declaration = 103
    RULE_typealias_name = 104
    RULE_typealias_assignment = 105
    RULE_function_declaration = 106
    RULE_function_head = 107
    RULE_function_name = 108
    RULE_function_signature = 109
    RULE_function_result = 110
    RULE_function_body = 111
    RULE_parameter_clause = 112
    RULE_parameter_list = 113
    RULE_parameter = 114
    RULE_external_parameter_name = 115
    RULE_local_parameter_name = 116
    RULE_default_argument_clause = 117
    RULE_enum_declaration = 118
    RULE_union_style_enum = 119
    RULE_union_style_enum_members = 120
    RULE_union_style_enum_member = 121
    RULE_union_style_enum_case_clause = 122
    RULE_union_style_enum_case_list = 123
    RULE_union_style_enum_case = 124
    RULE_enum_name = 125
    RULE_enum_case_name = 126
    RULE_raw_value_style_enum = 127
    RULE_raw_value_style_enum_members = 128
    RULE_raw_value_style_enum_member = 129
    RULE_raw_value_style_enum_case_clause = 130
    RULE_raw_value_style_enum_case_list = 131
    RULE_raw_value_style_enum_case = 132
    RULE_raw_value_assignment = 133
    RULE_raw_value_literal = 134
    RULE_struct_declaration = 135
    RULE_struct_name = 136
    RULE_struct_body = 137
    RULE_struct_members = 138
    RULE_struct_member = 139
    RULE_class_declaration = 140
    RULE_class_name = 141
    RULE_class_body = 142
    RULE_class_members = 143
    RULE_class_member = 144
    RULE_protocol_declaration = 145
    RULE_protocol_name = 146
    RULE_protocol_body = 147
    RULE_protocol_members = 148
    RULE_protocol_member = 149
    RULE_protocol_member_declaration = 150
    RULE_protocol_property_declaration = 151
    RULE_protocol_method_declaration = 152
    RULE_protocol_initializer_declaration = 153
    RULE_protocol_subscript_declaration = 154
    RULE_protocol_associated_type_declaration = 155
    RULE_initializer_declaration = 156
    RULE_initializer_head = 157
    RULE_initializer_body = 158
    RULE_deinitializer_declaration = 159
    RULE_extension_declaration = 160
    RULE_extension_body = 161
    RULE_extension_members = 162
    RULE_extension_member = 163
    RULE_subscript_declaration = 164
    RULE_subscript_head = 165
    RULE_subscript_result = 166
    RULE_operator_declaration = 167
    RULE_prefix_operator_declaration = 168
    RULE_postfix_operator_declaration = 169
    RULE_infix_operator_declaration = 170
    RULE_infix_operator_group = 171
    RULE_precedence_group_declaration = 172
    RULE_precedence_group_attributes = 173
    RULE_precedence_group_attribute = 174
    RULE_precedence_group_relation = 175
    RULE_precedence_group_assignment = 176
    RULE_precedence_group_associativity = 177
    RULE_precedence_group_names = 178
    RULE_precedence_group_name = 179
    RULE_declaration_modifier = 180
    RULE_declaration_modifiers = 181
    RULE_access_level_modifier = 182
    RULE_mutation_modifier = 183
    RULE_pattern = 184
    RULE_wildcard_pattern = 185
    RULE_identifier_pattern = 186
    RULE_value_binding_pattern = 187
    RULE_tuple_pattern = 188
    RULE_tuple_pattern_element_list = 189
    RULE_tuple_pattern_element = 190
    RULE_enum_case_pattern = 191
    RULE_optional_pattern = 192
    RULE_expression_pattern = 193
    RULE_attribute = 194
    RULE_attribute_name = 195
    RULE_attribute_argument_clause = 196
    RULE_attributes = 197
    RULE_balanced_tokens = 198
    RULE_balanced_token = 199
    RULE_balanced_token_punctuation = 200
    RULE_expression = 201
    RULE_expression_list = 202
    RULE_prefix_expression = 203
    RULE_in_out_expression = 204
    RULE_try_operator = 205
    RULE_binary_expression = 206
    RULE_binary_expressions = 207
    RULE_conditional_operator = 208
    RULE_type_casting_operator = 209
    RULE_primary_expression = 210
    RULE_unqualified_name = 211
    RULE_literal_expression = 212
    RULE_array_literal = 213
    RULE_array_literal_items = 214
    RULE_array_literal_item = 215
    RULE_dictionary_literal = 216
    RULE_dictionary_literal_items = 217
    RULE_dictionary_literal_item = 218
    RULE_playground_literal = 219
    RULE_self_expression = 220
    RULE_superclass_expression = 221
    RULE_closure_expression = 222
    RULE_closure_signature = 223
    RULE_closure_parameter_clause = 224
    RULE_closure_parameter_list = 225
    RULE_closure_parameter = 226
    RULE_capture_list = 227
    RULE_capture_list_items = 228
    RULE_capture_list_item = 229
    RULE_capture_specifier = 230
    RULE_implicit_member_expression = 231
    RULE_parenthesized_operator = 232
    RULE_parenthesized_expression = 233
    RULE_tuple_expression = 234
    RULE_tuple_element_list = 235
    RULE_tuple_element = 236
    RULE_wildcard_expression = 237
    RULE_key_path_expression = 238
    RULE_key_path_components = 239
    RULE_key_path_component = 240
    RULE_key_path_postfixes = 241
    RULE_key_path_postfix = 242
    RULE_selector_expression = 243
    RULE_key_path_string_expression = 244
    RULE_postfix_expression = 245
    RULE_function_call_suffix = 246
    RULE_initializer_suffix = 247
    RULE_explicit_member_suffix = 248
    RULE_postfix_self_suffix = 249
    RULE_subscript_suffix = 250
    RULE_forced_value_suffix = 251
    RULE_optional_chaining_suffix = 252
    RULE_function_call_argument_clause = 253
    RULE_function_call_argument_list = 254
    RULE_function_call_argument = 255
    RULE_trailing_closures = 256
    RULE_labeled_trailing_closures = 257
    RULE_labeled_trailing_closure = 258
    RULE_argument_names = 259
    RULE_argument_name = 260
    RULE_type = 261
    RULE_type_annotation = 262
    RULE_type_identifier = 263
    RULE_type_name = 264
    RULE_tuple_type = 265
    RULE_tuple_type_element_list = 266
    RULE_tuple_type_element = 267
    RULE_element_name = 268
    RULE_function_type = 269
    RULE_function_type_argument_clause = 270
    RULE_function_type_argument_list = 271
    RULE_function_type_argument = 272
    RULE_argument_label = 273
    RULE_array_type = 274
    RULE_dictionary_type = 275
    RULE_protocol_composition_type = 276
    RULE_trailing_composition_and = 277
    RULE_opaque_type = 278
    RULE_any_type = 279
    RULE_self_type = 280
    RULE_type_inheritance_clause = 281
    RULE_type_inheritance_list = 282
    RULE_identifier = 283
    RULE_identifier_list = 284
    RULE_keyword = 285
    RULE_assignment_operator = 286
    RULE_negate_prefix_operator = 287
    RULE_compilation_condition_AND = 288
    RULE_compilation_condition_OR = 289
    RULE_compilation_condition_GE = 290
    RULE_compilation_condition_L = 291
    RULE_arrow_operator = 292
    RULE_range_operator = 293
    RULE_same_type_equals = 294
    RULE_binary_operator = 295
    RULE_prefix_operator = 296
    RULE_postfix_operator = 297
    RULE_operator = 298
    RULE_operator_head = 299
    RULE_operator_character = 300
    RULE_operator_characters = 301
    RULE_dot_operator_head = 302
    RULE_dot_operator_character = 303
    RULE_dot_operator_characters = 304
    RULE_literal = 305
    RULE_numeric_literal = 306
    RULE_boolean_literal = 307
    RULE_nil_literal = 308
    RULE_integer_literal = 309
    RULE_string_literal = 310
    RULE_extended_string_literal = 311
    RULE_static_string_literal = 312
    RULE_interpolated_string_literal = 313

    ruleNames =  [ "top_level", "statement", "statements", "loop_statement", 
                   "for_in_statement", "while_statement", "condition_list", 
                   "condition", "case_condition", "optional_binding_condition", 
                   "repeat_while_statement", "branch_statement", "if_statement", 
                   "else_clause", "guard_statement", "switch_statement", 
                   "switch_cases", "switch_case", "case_label", "case_item_list", 
                   "default_label", "where_clause", "where_expression", 
                   "conditional_switch_case", "switch_if_directive_clause", 
                   "switch_elseif_directive_clauses", "switch_elseif_directive_clause", 
                   "switch_else_directive_clause", "labeled_statement", 
                   "statement_label", "label_name", "control_transfer_statement", 
                   "break_statement", "continue_statement", "fallthrough_statement", 
                   "return_statement", "throw_statement", "defer_statement", 
                   "do_statement", "catch_clauses", "catch_clause", "catch_pattern_list", 
                   "catch_pattern", "compiler_control_statement", "conditional_compilation_block", 
                   "if_directive_clause", "elseif_directive_clauses", "elseif_directive_clause", 
                   "else_directive_clause", "compilation_condition", "platform_condition", 
                   "swift_version", "swift_version_continuation", "operating_system", 
                   "architecture", "module_name", "environment", "line_control_statement", 
                   "line_number", "file_name", "diagnostic_statement", "diagnostic_message", 
                   "availability_condition", "availability_arguments", "availability_argument", 
                   "platform_name", "platform_version", "generic_parameter_clause", 
                   "generic_parameter_list", "generic_parameter", "generic_where_clause", 
                   "requirement_list", "requirement", "conformance_requirement", 
                   "same_type_requirement", "generic_argument_clause", "generic_argument_list", 
                   "generic_argument", "declaration", "declarations", "top_level_declaration", 
                   "code_block", "import_declaration", "import_kind", "import_path", 
                   "import_path_identifier", "constant_declaration", "pattern_initializer_list", 
                   "pattern_initializer", "initializer", "variable_declaration", 
                   "variable_declaration_head", "variable_name", "getter_setter_block", 
                   "getter_clause", "setter_clause", "setter_name", "getter_setter_keyword_block", 
                   "getter_keyword_clause", "setter_keyword_clause", "willSet_didSet_block", 
                   "willSet_clause", "didSet_clause", "typealias_declaration", 
                   "typealias_name", "typealias_assignment", "function_declaration", 
                   "function_head", "function_name", "function_signature", 
                   "function_result", "function_body", "parameter_clause", 
                   "parameter_list", "parameter", "external_parameter_name", 
                   "local_parameter_name", "default_argument_clause", "enum_declaration", 
                   "union_style_enum", "union_style_enum_members", "union_style_enum_member", 
                   "union_style_enum_case_clause", "union_style_enum_case_list", 
                   "union_style_enum_case", "enum_name", "enum_case_name", 
                   "raw_value_style_enum", "raw_value_style_enum_members", 
                   "raw_value_style_enum_member", "raw_value_style_enum_case_clause", 
                   "raw_value_style_enum_case_list", "raw_value_style_enum_case", 
                   "raw_value_assignment", "raw_value_literal", "struct_declaration", 
                   "struct_name", "struct_body", "struct_members", "struct_member", 
                   "class_declaration", "class_name", "class_body", "class_members", 
                   "class_member", "protocol_declaration", "protocol_name", 
                   "protocol_body", "protocol_members", "protocol_member", 
                   "protocol_member_declaration", "protocol_property_declaration", 
                   "protocol_method_declaration", "protocol_initializer_declaration", 
                   "protocol_subscript_declaration", "protocol_associated_type_declaration", 
                   "initializer_declaration", "initializer_head", "initializer_body", 
                   "deinitializer_declaration", "extension_declaration", 
                   "extension_body", "extension_members", "extension_member", 
                   "subscript_declaration", "subscript_head", "subscript_result", 
                   "operator_declaration", "prefix_operator_declaration", 
                   "postfix_operator_declaration", "infix_operator_declaration", 
                   "infix_operator_group", "precedence_group_declaration", 
                   "precedence_group_attributes", "precedence_group_attribute", 
                   "precedence_group_relation", "precedence_group_assignment", 
                   "precedence_group_associativity", "precedence_group_names", 
                   "precedence_group_name", "declaration_modifier", "declaration_modifiers", 
                   "access_level_modifier", "mutation_modifier", "pattern", 
                   "wildcard_pattern", "identifier_pattern", "value_binding_pattern", 
                   "tuple_pattern", "tuple_pattern_element_list", "tuple_pattern_element", 
                   "enum_case_pattern", "optional_pattern", "expression_pattern", 
                   "attribute", "attribute_name", "attribute_argument_clause", 
                   "attributes", "balanced_tokens", "balanced_token", "balanced_token_punctuation", 
                   "expression", "expression_list", "prefix_expression", 
                   "in_out_expression", "try_operator", "binary_expression", 
                   "binary_expressions", "conditional_operator", "type_casting_operator", 
                   "primary_expression", "unqualified_name", "literal_expression", 
                   "array_literal", "array_literal_items", "array_literal_item", 
                   "dictionary_literal", "dictionary_literal_items", "dictionary_literal_item", 
                   "playground_literal", "self_expression", "superclass_expression", 
                   "closure_expression", "closure_signature", "closure_parameter_clause", 
                   "closure_parameter_list", "closure_parameter", "capture_list", 
                   "capture_list_items", "capture_list_item", "capture_specifier", 
                   "implicit_member_expression", "parenthesized_operator", 
                   "parenthesized_expression", "tuple_expression", "tuple_element_list", 
                   "tuple_element", "wildcard_expression", "key_path_expression", 
                   "key_path_components", "key_path_component", "key_path_postfixes", 
                   "key_path_postfix", "selector_expression", "key_path_string_expression", 
                   "postfix_expression", "function_call_suffix", "initializer_suffix", 
                   "explicit_member_suffix", "postfix_self_suffix", "subscript_suffix", 
                   "forced_value_suffix", "optional_chaining_suffix", "function_call_argument_clause", 
                   "function_call_argument_list", "function_call_argument", 
                   "trailing_closures", "labeled_trailing_closures", "labeled_trailing_closure", 
                   "argument_names", "argument_name", "type", "type_annotation", 
                   "type_identifier", "type_name", "tuple_type", "tuple_type_element_list", 
                   "tuple_type_element", "element_name", "function_type", 
                   "function_type_argument_clause", "function_type_argument_list", 
                   "function_type_argument", "argument_label", "array_type", 
                   "dictionary_type", "protocol_composition_type", "trailing_composition_and", 
                   "opaque_type", "any_type", "self_type", "type_inheritance_clause", 
                   "type_inheritance_list", "identifier", "identifier_list", 
                   "keyword", "assignment_operator", "negate_prefix_operator", 
                   "compilation_condition_AND", "compilation_condition_OR", 
                   "compilation_condition_GE", "compilation_condition_L", 
                   "arrow_operator", "range_operator", "same_type_equals", 
                   "binary_operator", "prefix_operator", "postfix_operator", 
                   "operator", "operator_head", "operator_character", "operator_characters", 
                   "dot_operator_head", "dot_operator_character", "dot_operator_characters", 
                   "literal", "numeric_literal", "boolean_literal", "nil_literal", 
                   "integer_literal", "string_literal", "extended_string_literal", 
                   "static_string_literal", "interpolated_string_literal" ]

    EOF = Token.EOF
    AS=1
    ALPHA=2
    BREAK=3
    CASE=4
    CATCH=5
    CLASS=6
    CONTINUE=7
    DEFAULT=8
    DEFER=9
    DO=10
    GUARD=11
    ELSE=12
    ENUM=13
    FOR=14
    FALLTHROUGH=15
    FUNC=16
    IN=17
    IF=18
    IMPORT=19
    INTERNAL=20
    FINAL=21
    OPEN=22
    PRIVATE=23
    PUBLIC=24
    WHERE=25
    WHILE=26
    LET=27
    VAR=28
    PROTOCOL=29
    GET=30
    SET=31
    WILL_SET=32
    DID_SET=33
    REPEAT=34
    SWITCH=35
    STRUCT=36
    RETURN=37
    THROW=38
    THROWS=39
    RETHROWS=40
    INDIRECT=41
    INIT=42
    DEINIT=43
    ASSOCIATED_TYPE=44
    EXTENSION=45
    SUBSCRIPT=46
    PREFIX=47
    INFIX=48
    LEFT=49
    RIGHT=50
    NONE=51
    PRECEDENCE_GROUP=52
    HIGHER_THAN=53
    LOWER_THAN=54
    ASSIGNMENT=55
    ASSOCIATIVITY=56
    POSTFIX=57
    OPERATOR=58
    TYPEALIAS=59
    OS=60
    ARCH=61
    SWIFT=62
    COMPILER=63
    CAN_IMPORT=64
    TARGET_ENVIRONMENT=65
    CONVENIENCE=66
    DYNAMIC=67
    LAZY=68
    OPTIONAL=69
    OVERRIDE=70
    REQUIRED=71
    STATIC=72
    WEAK=73
    UNOWNED=74
    SAFE=75
    UNSAFE=76
    MUTATING=77
    NONMUTATING=78
    FILE_PRIVATE=79
    IS=80
    TRY=81
    SUPER=82
    ANY=83
    FALSE=84
    RED=85
    BLUE=86
    GREEN=87
    RESOURCE_NAME=88
    TRUE=89
    NIL=90
    INOUT=91
    SOME=92
    TYPE=93
    PRECEDENCE=94
    SELF=95
    SELF_BIG=96
    MAC_OS=97
    I_OS=98
    OSX=99
    WATCH_OS=100
    TV_OS=101
    LINUX=102
    WINDOWS=103
    I386=104
    X86_64=105
    ARM=106
    ARM64=107
    SIMULATOR=108
    MAC_CATALYST=109
    I_OS_APPLICATION_EXTENSION=110
    MAC_CATALYST_APPLICATION_EXTENSION=111
    MAC_OS_APPLICATION_EXTENSION=112
    SOURCE_LOCATION=113
    FILE=114
    LINE=115
    ERROR=116
    WARNING=117
    AVAILABLE=118
    HASH_IF=119
    HASH_ELSEIF=120
    HASH_ELSE=121
    HASH_ENDIF=122
    HASH_FILE=123
    HASH_FILE_ID=124
    HASH_FILE_PATH=125
    HASH_LINE=126
    HASH_COLUMN=127
    HASH_FUNCTION=128
    HASH_DSO_HANDLE=129
    HASH_SELECTOR=130
    HASH_KEYPATH=131
    HASH_COLOR_LITERAL=132
    HASH_FILE_LITERAL=133
    HASH_IMAGE_LITERAL=134
    GETTER=135
    SETTER=136
    Identifier=137
    DOT=138
    LCURLY=139
    LPAREN=140
    LBRACK=141
    RCURLY=142
    RPAREN=143
    RBRACK=144
    COMMA=145
    COLON=146
    SEMI=147
    LT=148
    GT=149
    UNDERSCORE=150
    BANG=151
    QUESTION=152
    AT=153
    AND=154
    SUB=155
    EQUAL=156
    OR=157
    DIV=158
    ADD=159
    MUL=160
    MOD=161
    CARET=162
    TILDE=163
    HASH=164
    BACKTICK=165
    DOLLAR=166
    BACKSLASH=167
    Operator_head_other=168
    Operator_following_character=169
    Binary_literal=170
    Octal_literal=171
    Decimal_digits=172
    Decimal_literal=173
    Hexadecimal_literal=174
    Floating_point_literal=175
    WS=176
    HASHBANG=177
    Block_comment=178
    Line_comment=179
    Multi_line_extended_string_open=180
    Single_line_extended_string_open=181
    Multi_line_string_open=182
    Single_line_string_open=183
    Interpolataion_single_line=184
    Single_line_string_close=185
    Quoted_single_line_text=186
    Interpolataion_multi_line=187
    Multi_line_string_close=188
    Quoted_multi_line_text=189
    Single_line_extended_string_close=190
    Quoted_single_line_extended_text=191
    Multi_line_extended_string_close=192
    Quoted_multi_line_extended_text=193

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        #self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class Top_levelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Swift5Parser.EOF, 0)

        def statements(self):
            return self.getTypedRuleContext(Swift5Parser.StatementsContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_top_level

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_level" ):
                listener.enterTop_level(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_level" ):
                listener.exitTop_level(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTop_level" ):
                return visitor.visitTop_level(self)
            else:
                return visitor.visitChildren(self)




    def top_level(self):

        localctx = Swift5Parser.Top_levelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_top_level)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 628
                self.statements()


            self.state = 631
            self.match(Swift5Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loop_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Loop_statementContext,0)


        def declaration(self):
            return self.getTypedRuleContext(Swift5Parser.DeclarationContext,0)


        def branch_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Branch_statementContext,0)


        def labeled_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Labeled_statementContext,0)


        def control_transfer_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Control_transfer_statementContext,0)


        def defer_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Defer_statementContext,0)


        def do_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Do_statementContext,0)


        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(Swift5Parser.SEMI, 0)

        def compiler_control_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Compiler_control_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)

    def statement(self):

        localctx = Swift5Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statement)
        try:
            self.state = 647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 641
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                if la_ == 1:
                    self.state = 633
                    self.loop_statement()
                    pass

                elif la_ == 2:
                    self.state = 634
                    self.declaration()
                    pass

                elif la_ == 3:
                    self.state = 635
                    self.branch_statement()
                    pass

                elif la_ == 4:
                    self.state = 636
                    self.labeled_statement()
                    pass

                elif la_ == 5:
                    self.state = 637
                    self.control_transfer_statement()
                    pass

                elif la_ == 6:
                    self.state = 638
                    self.defer_statement()
                    pass

                elif la_ == 7:
                    self.state = 639
                    self.do_statement()
                    pass

                elif la_ == 8:
                    self.state = 640
                    self.expression()
                    pass


                self.state = 644
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 643
                    self.match(Swift5Parser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 646
                self.compiler_control_statement()
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementsContext(ParserRuleContext):
        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexBefore = -1

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.StatementContext,i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatements" ):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)

    def statements(self):
        localctx = Swift5Parser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 649
                    print(localctx)
                    print(localctx.)
                    print(localctx.indexBefore)
                    if not SwiftSupport.isSeparatedStatement(localctx, localctx.indexBefore):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "SwiftSupport.isSeparatedStatement(_input, $indexBefore)")
                    self.state = 650
                    self.statement()
                    localctx.indexBefore =  _input.index()
                else:
                    raise NoViableAltException(self)
                self.state = 655 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Loop_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_in_statement(self):
            return self.getTypedRuleContext(Swift5Parser.For_in_statementContext,0)


        def while_statement(self):
            return self.getTypedRuleContext(Swift5Parser.While_statementContext,0)


        def repeat_while_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Repeat_while_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_loop_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop_statement" ):
                listener.enterLoop_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop_statement" ):
                listener.exitLoop_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop_statement" ):
                return visitor.visitLoop_statement(self)
            else:
                return visitor.visitChildren(self)




    def loop_statement(self):

        localctx = Swift5Parser.Loop_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_loop_statement)
        try:
            self.state = 660
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 657
                self.for_in_statement()
                pass
            elif token in [Swift5Parser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 658
                self.while_statement()
                pass
            elif token in [Swift5Parser.REPEAT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 659
                self.repeat_while_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_in_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Swift5Parser.FOR, 0)

        def pattern(self):
            return self.getTypedRuleContext(Swift5Parser.PatternContext,0)


        def IN(self):
            return self.getToken(Swift5Parser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def CASE(self):
            return self.getToken(Swift5Parser.CASE, 0)

        def where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Where_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_for_in_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_in_statement" ):
                listener.enterFor_in_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_in_statement" ):
                listener.exitFor_in_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_in_statement" ):
                return visitor.visitFor_in_statement(self)
            else:
                return visitor.visitChildren(self)




    def for_in_statement(self):

        localctx = Swift5Parser.For_in_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_for_in_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.match(Swift5Parser.FOR)
            self.state = 664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 663
                self.match(Swift5Parser.CASE)


            self.state = 666
            self.pattern(0)
            self.state = 667
            self.match(Swift5Parser.IN)
            self.state = 668
            self.expression()
            self.state = 670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.WHERE:
                self.state = 669
                self.where_clause()


            self.state = 672
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Swift5Parser.WHILE, 0)

        def condition_list(self):
            return self.getTypedRuleContext(Swift5Parser.Condition_listContext,0)


        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_statement" ):
                return visitor.visitWhile_statement(self)
            else:
                return visitor.visitChildren(self)




    def while_statement(self):

        localctx = Swift5Parser.While_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_while_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(Swift5Parser.WHILE)
            self.state = 675
            self.condition_list()
            self.state = 676
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.ConditionContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.ConditionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_condition_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_list" ):
                listener.enterCondition_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_list" ):
                listener.exitCondition_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition_list" ):
                return visitor.visitCondition_list(self)
            else:
                return visitor.visitChildren(self)




    def condition_list(self):

        localctx = Swift5Parser.Condition_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_condition_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.condition()
            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Swift5Parser.COMMA:
                self.state = 679
                self.match(Swift5Parser.COMMA)
                self.state = 680
                self.condition()
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def availability_condition(self):
            return self.getTypedRuleContext(Swift5Parser.Availability_conditionContext,0)


        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def case_condition(self):
            return self.getTypedRuleContext(Swift5Parser.Case_conditionContext,0)


        def optional_binding_condition(self):
            return self.getTypedRuleContext(Swift5Parser.Optional_binding_conditionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = Swift5Parser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_condition)
        try:
            self.state = 690
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 686
                self.availability_condition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 687
                self.expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 688
                self.case_condition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 689
                self.optional_binding_condition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(Swift5Parser.CASE, 0)

        def pattern(self):
            return self.getTypedRuleContext(Swift5Parser.PatternContext,0)


        def initializer(self):
            return self.getTypedRuleContext(Swift5Parser.InitializerContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_case_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_condition" ):
                listener.enterCase_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_condition" ):
                listener.exitCase_condition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_condition" ):
                return visitor.visitCase_condition(self)
            else:
                return visitor.visitChildren(self)




    def case_condition(self):

        localctx = Swift5Parser.Case_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_case_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.match(Swift5Parser.CASE)
            self.state = 693
            self.pattern(0)
            self.state = 694
            self.initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Optional_binding_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(Swift5Parser.PatternContext,0)


        def initializer(self):
            return self.getTypedRuleContext(Swift5Parser.InitializerContext,0)


        def LET(self):
            return self.getToken(Swift5Parser.LET, 0)

        def VAR(self):
            return self.getToken(Swift5Parser.VAR, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_optional_binding_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptional_binding_condition" ):
                listener.enterOptional_binding_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptional_binding_condition" ):
                listener.exitOptional_binding_condition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptional_binding_condition" ):
                return visitor.visitOptional_binding_condition(self)
            else:
                return visitor.visitChildren(self)




    def optional_binding_condition(self):

        localctx = Swift5Parser.Optional_binding_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_optional_binding_condition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            _la = self._input.LA(1)
            if not(_la==Swift5Parser.LET or _la==Swift5Parser.VAR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 697
            self.pattern(0)
            self.state = 698
            self.initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Repeat_while_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEAT(self):
            return self.getToken(Swift5Parser.REPEAT, 0)

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def WHILE(self):
            return self.getToken(Swift5Parser.WHILE, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_repeat_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeat_while_statement" ):
                listener.enterRepeat_while_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeat_while_statement" ):
                listener.exitRepeat_while_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepeat_while_statement" ):
                return visitor.visitRepeat_while_statement(self)
            else:
                return visitor.visitChildren(self)




    def repeat_while_statement(self):

        localctx = Swift5Parser.Repeat_while_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_repeat_while_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(Swift5Parser.REPEAT)
            self.state = 701
            self.code_block()
            self.state = 702
            self.match(Swift5Parser.WHILE)
            self.state = 703
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Branch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_statement(self):
            return self.getTypedRuleContext(Swift5Parser.If_statementContext,0)


        def guard_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Guard_statementContext,0)


        def switch_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_branch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBranch_statement" ):
                listener.enterBranch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBranch_statement" ):
                listener.exitBranch_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBranch_statement" ):
                return visitor.visitBranch_statement(self)
            else:
                return visitor.visitChildren(self)




    def branch_statement(self):

        localctx = Swift5Parser.Branch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_branch_statement)
        try:
            self.state = 708
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 705
                self.if_statement()
                pass
            elif token in [Swift5Parser.GUARD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 706
                self.guard_statement()
                pass
            elif token in [Swift5Parser.SWITCH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 707
                self.switch_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Swift5Parser.IF, 0)

        def condition_list(self):
            return self.getTypedRuleContext(Swift5Parser.Condition_listContext,0)


        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def else_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Else_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_statement" ):
                return visitor.visitIf_statement(self)
            else:
                return visitor.visitChildren(self)




    def if_statement(self):

        localctx = Swift5Parser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_if_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.match(Swift5Parser.IF)
            self.state = 711
            self.condition_list()
            self.state = 712
            self.code_block()
            self.state = 714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 713
                self.else_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(Swift5Parser.ELSE, 0)

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(Swift5Parser.If_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_else_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_clause" ):
                listener.enterElse_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_clause" ):
                listener.exitElse_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_clause" ):
                return visitor.visitElse_clause(self)
            else:
                return visitor.visitChildren(self)




    def else_clause(self):

        localctx = Swift5Parser.Else_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_else_clause)
        try:
            self.state = 720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 716
                self.match(Swift5Parser.ELSE)
                self.state = 717
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 718
                self.match(Swift5Parser.ELSE)
                self.state = 719
                self.if_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Guard_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GUARD(self):
            return self.getToken(Swift5Parser.GUARD, 0)

        def condition_list(self):
            return self.getTypedRuleContext(Swift5Parser.Condition_listContext,0)


        def ELSE(self):
            return self.getToken(Swift5Parser.ELSE, 0)

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_guard_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuard_statement" ):
                listener.enterGuard_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuard_statement" ):
                listener.exitGuard_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuard_statement" ):
                return visitor.visitGuard_statement(self)
            else:
                return visitor.visitChildren(self)




    def guard_statement(self):

        localctx = Swift5Parser.Guard_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_guard_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(Swift5Parser.GUARD)
            self.state = 723
            self.condition_list()
            self.state = 724
            self.match(Swift5Parser.ELSE)
            self.state = 725
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(Swift5Parser.SWITCH, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def switch_cases(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_casesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_switch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_statement" ):
                listener.enterSwitch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_statement" ):
                listener.exitSwitch_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_statement" ):
                return visitor.visitSwitch_statement(self)
            else:
                return visitor.visitChildren(self)




    def switch_statement(self):

        localctx = Swift5Parser.Switch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_switch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.match(Swift5Parser.SWITCH)
            self.state = 728
            self.expression()
            self.state = 729
            self.match(Swift5Parser.LCURLY)
            self.state = 731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.CASE or _la==Swift5Parser.DEFAULT or _la==Swift5Parser.HASH_IF or _la==Swift5Parser.AT:
                self.state = 730
                self.switch_cases()


            self.state = 733
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_casesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_case(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_caseContext,0)


        def switch_cases(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_casesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_switch_cases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_cases" ):
                listener.enterSwitch_cases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_cases" ):
                listener.exitSwitch_cases(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_cases" ):
                return visitor.visitSwitch_cases(self)
            else:
                return visitor.visitChildren(self)




    def switch_cases(self):

        localctx = Swift5Parser.Switch_casesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_switch_cases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.switch_case()
            self.state = 737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.CASE or _la==Swift5Parser.DEFAULT or _la==Swift5Parser.HASH_IF or _la==Swift5Parser.AT:
                self.state = 736
                self.switch_cases()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_caseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statements(self):
            return self.getTypedRuleContext(Swift5Parser.StatementsContext,0)


        def case_label(self):
            return self.getTypedRuleContext(Swift5Parser.Case_labelContext,0)


        def default_label(self):
            return self.getTypedRuleContext(Swift5Parser.Default_labelContext,0)


        def conditional_switch_case(self):
            return self.getTypedRuleContext(Swift5Parser.Conditional_switch_caseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_switch_case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_case" ):
                listener.enterSwitch_case(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_case" ):
                listener.exitSwitch_case(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_case" ):
                return visitor.visitSwitch_case(self)
            else:
                return visitor.visitChildren(self)




    def switch_case(self):

        localctx = Swift5Parser.Switch_caseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_switch_case)
        try:
            self.state = 746
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.CASE, Swift5Parser.DEFAULT, Swift5Parser.AT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 741
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 739
                    self.case_label()
                    pass

                elif la_ == 2:
                    self.state = 740
                    self.default_label()
                    pass


                self.state = 743
                self.statements()
                pass
            elif token in [Swift5Parser.HASH_IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 745
                self.conditional_switch_case()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_labelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(Swift5Parser.CASE, 0)

        def case_item_list(self):
            return self.getTypedRuleContext(Swift5Parser.Case_item_listContext,0)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_case_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_label" ):
                listener.enterCase_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_label" ):
                listener.exitCase_label(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_label" ):
                return visitor.visitCase_label(self)
            else:
                return visitor.visitChildren(self)




    def case_label(self):

        localctx = Swift5Parser.Case_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_case_label)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 748
                self.attributes()


            self.state = 751
            self.match(Swift5Parser.CASE)
            self.state = 752
            self.case_item_list()
            self.state = 753
            self.match(Swift5Parser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_item_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.PatternContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.PatternContext,i)


        def where_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Where_clauseContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Where_clauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_case_item_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_item_list" ):
                listener.enterCase_item_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_item_list" ):
                listener.exitCase_item_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_item_list" ):
                return visitor.visitCase_item_list(self)
            else:
                return visitor.visitChildren(self)




    def case_item_list(self):

        localctx = Swift5Parser.Case_item_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_case_item_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.pattern(0)
            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.WHERE:
                self.state = 756
                self.where_clause()


            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Swift5Parser.COMMA:
                self.state = 759
                self.match(Swift5Parser.COMMA)
                self.state = 760
                self.pattern(0)
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Swift5Parser.WHERE:
                    self.state = 761
                    self.where_clause()


                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_labelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(Swift5Parser.DEFAULT, 0)

        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_default_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_label" ):
                listener.enterDefault_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_label" ):
                listener.exitDefault_label(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_label" ):
                return visitor.visitDefault_label(self)
            else:
                return visitor.visitChildren(self)




    def default_label(self):

        localctx = Swift5Parser.Default_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_default_label)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 769
                self.attributes()


            self.state = 772
            self.match(Swift5Parser.DEFAULT)
            self.state = 773
            self.match(Swift5Parser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(Swift5Parser.WHERE, 0)

        def where_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Where_expressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhere_clause" ):
                return visitor.visitWhere_clause(self)
            else:
                return visitor.visitChildren(self)




    def where_clause(self):

        localctx = Swift5Parser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.match(Swift5Parser.WHERE)
            self.state = 776
            self.where_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_where_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_expression" ):
                listener.enterWhere_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_expression" ):
                listener.exitWhere_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhere_expression" ):
                return visitor.visitWhere_expression(self)
            else:
                return visitor.visitChildren(self)




    def where_expression(self):

        localctx = Swift5Parser.Where_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_where_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_switch_caseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_if_directive_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_if_directive_clauseContext,0)


        def HASH_ENDIF(self):
            return self.getToken(Swift5Parser.HASH_ENDIF, 0)

        def switch_elseif_directive_clauses(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_elseif_directive_clausesContext,0)


        def switch_else_directive_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_else_directive_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_conditional_switch_case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_switch_case" ):
                listener.enterConditional_switch_case(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_switch_case" ):
                listener.exitConditional_switch_case(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_switch_case" ):
                return visitor.visitConditional_switch_case(self)
            else:
                return visitor.visitChildren(self)




    def conditional_switch_case(self):

        localctx = Swift5Parser.Conditional_switch_caseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_conditional_switch_case)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self.switch_if_directive_clause()
            self.state = 782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.HASH_ELSEIF:
                self.state = 781
                self.switch_elseif_directive_clauses()


            self.state = 785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.HASH_ELSE:
                self.state = 784
                self.switch_else_directive_clause()


            self.state = 787
            self.match(Swift5Parser.HASH_ENDIF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_if_directive_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH_IF(self):
            return self.getToken(Swift5Parser.HASH_IF, 0)

        def compilation_condition(self):
            return self.getTypedRuleContext(Swift5Parser.Compilation_conditionContext,0)


        def switch_cases(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_casesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_switch_if_directive_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_if_directive_clause" ):
                listener.enterSwitch_if_directive_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_if_directive_clause" ):
                listener.exitSwitch_if_directive_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_if_directive_clause" ):
                return visitor.visitSwitch_if_directive_clause(self)
            else:
                return visitor.visitChildren(self)




    def switch_if_directive_clause(self):

        localctx = Swift5Parser.Switch_if_directive_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_switch_if_directive_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.match(Swift5Parser.HASH_IF)
            self.state = 790
            self.compilation_condition(0)
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.CASE or _la==Swift5Parser.DEFAULT or _la==Swift5Parser.HASH_IF or _la==Swift5Parser.AT:
                self.state = 791
                self.switch_cases()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_elseif_directive_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elseif_directive_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Elseif_directive_clauseContext,0)


        def switch_elseif_directive_clauses(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_elseif_directive_clausesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_switch_elseif_directive_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_elseif_directive_clauses" ):
                listener.enterSwitch_elseif_directive_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_elseif_directive_clauses" ):
                listener.exitSwitch_elseif_directive_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_elseif_directive_clauses" ):
                return visitor.visitSwitch_elseif_directive_clauses(self)
            else:
                return visitor.visitChildren(self)




    def switch_elseif_directive_clauses(self):

        localctx = Swift5Parser.Switch_elseif_directive_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_switch_elseif_directive_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.elseif_directive_clause()
            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.HASH_ELSEIF:
                self.state = 795
                self.switch_elseif_directive_clauses()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_elseif_directive_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH_ELSEIF(self):
            return self.getToken(Swift5Parser.HASH_ELSEIF, 0)

        def compilation_condition(self):
            return self.getTypedRuleContext(Swift5Parser.Compilation_conditionContext,0)


        def switch_cases(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_casesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_switch_elseif_directive_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_elseif_directive_clause" ):
                listener.enterSwitch_elseif_directive_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_elseif_directive_clause" ):
                listener.exitSwitch_elseif_directive_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_elseif_directive_clause" ):
                return visitor.visitSwitch_elseif_directive_clause(self)
            else:
                return visitor.visitChildren(self)




    def switch_elseif_directive_clause(self):

        localctx = Swift5Parser.Switch_elseif_directive_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_switch_elseif_directive_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(Swift5Parser.HASH_ELSEIF)
            self.state = 799
            self.compilation_condition(0)
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.CASE or _la==Swift5Parser.DEFAULT or _la==Swift5Parser.HASH_IF or _la==Swift5Parser.AT:
                self.state = 800
                self.switch_cases()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_else_directive_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH_ELSE(self):
            return self.getToken(Swift5Parser.HASH_ELSE, 0)

        def switch_cases(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_casesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_switch_else_directive_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_else_directive_clause" ):
                listener.enterSwitch_else_directive_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_else_directive_clause" ):
                listener.exitSwitch_else_directive_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_else_directive_clause" ):
                return visitor.visitSwitch_else_directive_clause(self)
            else:
                return visitor.visitChildren(self)




    def switch_else_directive_clause(self):

        localctx = Swift5Parser.Switch_else_directive_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_switch_else_directive_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.match(Swift5Parser.HASH_ELSE)
            self.state = 805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.CASE or _la==Swift5Parser.DEFAULT or _la==Swift5Parser.HASH_IF or _la==Swift5Parser.AT:
                self.state = 804
                self.switch_cases()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Labeled_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_label(self):
            return self.getTypedRuleContext(Swift5Parser.Statement_labelContext,0)


        def loop_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Loop_statementContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(Swift5Parser.If_statementContext,0)


        def switch_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_statementContext,0)


        def do_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Do_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_labeled_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeled_statement" ):
                listener.enterLabeled_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeled_statement" ):
                listener.exitLabeled_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeled_statement" ):
                return visitor.visitLabeled_statement(self)
            else:
                return visitor.visitChildren(self)




    def labeled_statement(self):

        localctx = Swift5Parser.Labeled_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_labeled_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.statement_label()
            self.state = 812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.FOR, Swift5Parser.WHILE, Swift5Parser.REPEAT]:
                self.state = 808
                self.loop_statement()
                pass
            elif token in [Swift5Parser.IF]:
                self.state = 809
                self.if_statement()
                pass
            elif token in [Swift5Parser.SWITCH]:
                self.state = 810
                self.switch_statement()
                pass
            elif token in [Swift5Parser.DO]:
                self.state = 811
                self.do_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_labelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def label_name(self):
            return self.getTypedRuleContext(Swift5Parser.Label_nameContext,0)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_statement_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_label" ):
                listener.enterStatement_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_label" ):
                listener.exitStatement_label(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement_label" ):
                return visitor.visitStatement_label(self)
            else:
                return visitor.visitChildren(self)




    def statement_label(self):

        localctx = Swift5Parser.Statement_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_statement_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.label_name()
            self.state = 815
            self.match(Swift5Parser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Label_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_label_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_name" ):
                listener.enterLabel_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_name" ):
                listener.exitLabel_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel_name" ):
                return visitor.visitLabel_name(self)
            else:
                return visitor.visitChildren(self)




    def label_name(self):

        localctx = Swift5Parser.Label_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_label_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Control_transfer_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Break_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Continue_statementContext,0)


        def fallthrough_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Fallthrough_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Return_statementContext,0)


        def throw_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Throw_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_control_transfer_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControl_transfer_statement" ):
                listener.enterControl_transfer_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControl_transfer_statement" ):
                listener.exitControl_transfer_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControl_transfer_statement" ):
                return visitor.visitControl_transfer_statement(self)
            else:
                return visitor.visitChildren(self)




    def control_transfer_statement(self):

        localctx = Swift5Parser.Control_transfer_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_control_transfer_statement)
        try:
            self.state = 824
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.BREAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                self.break_statement()
                pass
            elif token in [Swift5Parser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 820
                self.continue_statement()
                pass
            elif token in [Swift5Parser.FALLTHROUGH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 821
                self.fallthrough_statement()
                pass
            elif token in [Swift5Parser.RETURN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 822
                self.return_statement()
                pass
            elif token in [Swift5Parser.THROW]:
                self.enterOuterAlt(localctx, 5)
                self.state = 823
                self.throw_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Swift5Parser.BREAK, 0)

        def label_name(self):
            return self.getTypedRuleContext(Swift5Parser.Label_nameContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_break_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_statement" ):
                listener.enterBreak_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_statement" ):
                listener.exitBreak_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_statement" ):
                return visitor.visitBreak_statement(self)
            else:
                return visitor.visitChildren(self)




    def break_statement(self):

        localctx = Swift5Parser.Break_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_break_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.match(Swift5Parser.BREAK)
            self.state = 828
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 827
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(Swift5Parser.CONTINUE, 0)

        def label_name(self):
            return self.getTypedRuleContext(Swift5Parser.Label_nameContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_continue_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_statement" ):
                listener.enterContinue_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_statement" ):
                listener.exitContinue_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_statement" ):
                return visitor.visitContinue_statement(self)
            else:
                return visitor.visitChildren(self)




    def continue_statement(self):

        localctx = Swift5Parser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_continue_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.match(Swift5Parser.CONTINUE)
            self.state = 832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 831
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fallthrough_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FALLTHROUGH(self):
            return self.getToken(Swift5Parser.FALLTHROUGH, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_fallthrough_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFallthrough_statement" ):
                listener.enterFallthrough_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFallthrough_statement" ):
                listener.exitFallthrough_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFallthrough_statement" ):
                return visitor.visitFallthrough_statement(self)
            else:
                return visitor.visitChildren(self)




    def fallthrough_statement(self):

        localctx = Swift5Parser.Fallthrough_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_fallthrough_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(Swift5Parser.FALLTHROUGH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(Swift5Parser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_return_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_statement" ):
                return visitor.visitReturn_statement(self)
            else:
                return visitor.visitChildren(self)




    def return_statement(self):

        localctx = Swift5Parser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_return_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.match(Swift5Parser.RETURN)
            self.state = 838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 837
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(Swift5Parser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_throw_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_statement" ):
                listener.enterThrow_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_statement" ):
                listener.exitThrow_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrow_statement" ):
                return visitor.visitThrow_statement(self)
            else:
                return visitor.visitChildren(self)




    def throw_statement(self):

        localctx = Swift5Parser.Throw_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_throw_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.match(Swift5Parser.THROW)
            self.state = 841
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Defer_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFER(self):
            return self.getToken(Swift5Parser.DEFER, 0)

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_defer_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefer_statement" ):
                listener.enterDefer_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefer_statement" ):
                listener.exitDefer_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefer_statement" ):
                return visitor.visitDefer_statement(self)
            else:
                return visitor.visitChildren(self)




    def defer_statement(self):

        localctx = Swift5Parser.Defer_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_defer_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.match(Swift5Parser.DEFER)
            self.state = 844
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Do_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(Swift5Parser.DO, 0)

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def catch_clauses(self):
            return self.getTypedRuleContext(Swift5Parser.Catch_clausesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_do_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo_statement" ):
                listener.enterDo_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo_statement" ):
                listener.exitDo_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDo_statement" ):
                return visitor.visitDo_statement(self)
            else:
                return visitor.visitChildren(self)




    def do_statement(self):

        localctx = Swift5Parser.Do_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_do_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(Swift5Parser.DO)
            self.state = 847
            self.code_block()
            self.state = 849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 848
                self.catch_clauses()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catch_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catch_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Catch_clauseContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Catch_clauseContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_catch_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_clauses" ):
                listener.enterCatch_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_clauses" ):
                listener.exitCatch_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatch_clauses" ):
                return visitor.visitCatch_clauses(self)
            else:
                return visitor.visitChildren(self)




    def catch_clauses(self):

        localctx = Swift5Parser.Catch_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_catch_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 851
                    self.catch_clause()

                else:
                    raise NoViableAltException(self)
                self.state = 854 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catch_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(Swift5Parser.CATCH, 0)

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def catch_pattern_list(self):
            return self.getTypedRuleContext(Swift5Parser.Catch_pattern_listContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_catch_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_clause" ):
                listener.enterCatch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_clause" ):
                listener.exitCatch_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatch_clause" ):
                return visitor.visitCatch_clause(self)
            else:
                return visitor.visitChildren(self)




    def catch_clause(self):

        localctx = Swift5Parser.Catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_catch_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.match(Swift5Parser.CATCH)
            self.state = 858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 857
                self.catch_pattern_list()


            self.state = 860
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catch_pattern_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catch_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Catch_patternContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Catch_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_catch_pattern_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_pattern_list" ):
                listener.enterCatch_pattern_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_pattern_list" ):
                listener.exitCatch_pattern_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatch_pattern_list" ):
                return visitor.visitCatch_pattern_list(self)
            else:
                return visitor.visitChildren(self)




    def catch_pattern_list(self):

        localctx = Swift5Parser.Catch_pattern_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_catch_pattern_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.catch_pattern()
            self.state = 869
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 863
                    self.catch_pattern()
                    self.state = 864
                    self.match(Swift5Parser.COMMA)
                    self.state = 865
                    self.catch_pattern() 
                self.state = 871
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catch_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(Swift5Parser.PatternContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Where_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_catch_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_pattern" ):
                listener.enterCatch_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_pattern" ):
                listener.exitCatch_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatch_pattern" ):
                return visitor.visitCatch_pattern(self)
            else:
                return visitor.visitChildren(self)




    def catch_pattern(self):

        localctx = Swift5Parser.Catch_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_catch_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.pattern(0)
            self.state = 874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 873
                self.where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compiler_control_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_compilation_block(self):
            return self.getTypedRuleContext(Swift5Parser.Conditional_compilation_blockContext,0)


        def line_control_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Line_control_statementContext,0)


        def diagnostic_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Diagnostic_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_compiler_control_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompiler_control_statement" ):
                listener.enterCompiler_control_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompiler_control_statement" ):
                listener.exitCompiler_control_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompiler_control_statement" ):
                return visitor.visitCompiler_control_statement(self)
            else:
                return visitor.visitChildren(self)




    def compiler_control_statement(self):

        localctx = Swift5Parser.Compiler_control_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_compiler_control_statement)
        try:
            self.state = 879
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.HASH_IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 876
                self.conditional_compilation_block()
                pass
            elif token in [Swift5Parser.SOURCE_LOCATION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 877
                self.line_control_statement()
                pass
            elif token in [Swift5Parser.ERROR, Swift5Parser.WARNING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 878
                self.diagnostic_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_compilation_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_directive_clause(self):
            return self.getTypedRuleContext(Swift5Parser.If_directive_clauseContext,0)


        def HASH_ENDIF(self):
            return self.getToken(Swift5Parser.HASH_ENDIF, 0)

        def elseif_directive_clauses(self):
            return self.getTypedRuleContext(Swift5Parser.Elseif_directive_clausesContext,0)


        def else_directive_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Else_directive_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_conditional_compilation_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_compilation_block" ):
                listener.enterConditional_compilation_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_compilation_block" ):
                listener.exitConditional_compilation_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_compilation_block" ):
                return visitor.visitConditional_compilation_block(self)
            else:
                return visitor.visitChildren(self)




    def conditional_compilation_block(self):

        localctx = Swift5Parser.Conditional_compilation_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_conditional_compilation_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.if_directive_clause()
            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.HASH_ELSEIF:
                self.state = 882
                self.elseif_directive_clauses()


            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.HASH_ELSE:
                self.state = 885
                self.else_directive_clause()


            self.state = 888
            self.match(Swift5Parser.HASH_ENDIF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_directive_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH_IF(self):
            return self.getToken(Swift5Parser.HASH_IF, 0)

        def compilation_condition(self):
            return self.getTypedRuleContext(Swift5Parser.Compilation_conditionContext,0)


        def statements(self):
            return self.getTypedRuleContext(Swift5Parser.StatementsContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_if_directive_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_directive_clause" ):
                listener.enterIf_directive_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_directive_clause" ):
                listener.exitIf_directive_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_directive_clause" ):
                return visitor.visitIf_directive_clause(self)
            else:
                return visitor.visitChildren(self)




    def if_directive_clause(self):

        localctx = Swift5Parser.If_directive_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_if_directive_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.match(Swift5Parser.HASH_IF)
            self.state = 891
            self.compilation_condition(0)
            self.state = 893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 892
                self.statements()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elseif_directive_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elseif_directive_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Elseif_directive_clauseContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Elseif_directive_clauseContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_elseif_directive_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseif_directive_clauses" ):
                listener.enterElseif_directive_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseif_directive_clauses" ):
                listener.exitElseif_directive_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseif_directive_clauses" ):
                return visitor.visitElseif_directive_clauses(self)
            else:
                return visitor.visitChildren(self)




    def elseif_directive_clauses(self):

        localctx = Swift5Parser.Elseif_directive_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_elseif_directive_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 895
                self.elseif_directive_clause()
                self.state = 898 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Swift5Parser.HASH_ELSEIF):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elseif_directive_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH_ELSEIF(self):
            return self.getToken(Swift5Parser.HASH_ELSEIF, 0)

        def compilation_condition(self):
            return self.getTypedRuleContext(Swift5Parser.Compilation_conditionContext,0)


        def statements(self):
            return self.getTypedRuleContext(Swift5Parser.StatementsContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_elseif_directive_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseif_directive_clause" ):
                listener.enterElseif_directive_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseif_directive_clause" ):
                listener.exitElseif_directive_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseif_directive_clause" ):
                return visitor.visitElseif_directive_clause(self)
            else:
                return visitor.visitChildren(self)




    def elseif_directive_clause(self):

        localctx = Swift5Parser.Elseif_directive_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_elseif_directive_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.match(Swift5Parser.HASH_ELSEIF)
            self.state = 901
            self.compilation_condition(0)
            self.state = 903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 902
                self.statements()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_directive_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH_ELSE(self):
            return self.getToken(Swift5Parser.HASH_ELSE, 0)

        def statements(self):
            return self.getTypedRuleContext(Swift5Parser.StatementsContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_else_directive_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_directive_clause" ):
                listener.enterElse_directive_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_directive_clause" ):
                listener.exitElse_directive_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_directive_clause" ):
                return visitor.visitElse_directive_clause(self)
            else:
                return visitor.visitChildren(self)




    def else_directive_clause(self):

        localctx = Swift5Parser.Else_directive_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_else_directive_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.match(Swift5Parser.HASH_ELSE)
            self.state = 907
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 906
                self.statements()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compilation_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def platform_condition(self):
            return self.getTypedRuleContext(Swift5Parser.Platform_conditionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def boolean_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Boolean_literalContext,0)


        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def compilation_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Compilation_conditionContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Compilation_conditionContext,i)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def BANG(self):
            return self.getToken(Swift5Parser.BANG, 0)

        def compilation_condition_AND(self):
            return self.getTypedRuleContext(Swift5Parser.Compilation_condition_ANDContext,0)


        def compilation_condition_OR(self):
            return self.getTypedRuleContext(Swift5Parser.Compilation_condition_ORContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_compilation_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_condition" ):
                listener.enterCompilation_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_condition" ):
                listener.exitCompilation_condition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilation_condition" ):
                return visitor.visitCompilation_condition(self)
            else:
                return visitor.visitChildren(self)



    def compilation_condition(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Swift5Parser.Compilation_conditionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_compilation_condition, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 910
                self.platform_condition()
                pass

            elif la_ == 2:
                self.state = 911
                self.identifier()
                pass

            elif la_ == 3:
                self.state = 912
                self.boolean_literal()
                pass

            elif la_ == 4:
                self.state = 913
                self.match(Swift5Parser.LPAREN)
                self.state = 914
                self.compilation_condition(0)
                self.state = 915
                self.match(Swift5Parser.RPAREN)
                pass

            elif la_ == 5:
                self.state = 917
                self.match(Swift5Parser.BANG)
                self.state = 918
                self.compilation_condition(2)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 930
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Swift5Parser.Compilation_conditionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_compilation_condition)
                    self.state = 921
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 924
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                    if la_ == 1:
                        self.state = 922
                        self.compilation_condition_AND()
                        pass

                    elif la_ == 2:
                        self.state = 923
                        self.compilation_condition_OR()
                        pass


                    self.state = 926
                    self.compilation_condition(2) 
                self.state = 932
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Platform_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OS(self):
            return self.getToken(Swift5Parser.OS, 0)

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def operating_system(self):
            return self.getTypedRuleContext(Swift5Parser.Operating_systemContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def ARCH(self):
            return self.getToken(Swift5Parser.ARCH, 0)

        def architecture(self):
            return self.getTypedRuleContext(Swift5Parser.ArchitectureContext,0)


        def swift_version(self):
            return self.getTypedRuleContext(Swift5Parser.Swift_versionContext,0)


        def SWIFT(self):
            return self.getToken(Swift5Parser.SWIFT, 0)

        def COMPILER(self):
            return self.getToken(Swift5Parser.COMPILER, 0)

        def compilation_condition_GE(self):
            return self.getTypedRuleContext(Swift5Parser.Compilation_condition_GEContext,0)


        def compilation_condition_L(self):
            return self.getTypedRuleContext(Swift5Parser.Compilation_condition_LContext,0)


        def CAN_IMPORT(self):
            return self.getToken(Swift5Parser.CAN_IMPORT, 0)

        def module_name(self):
            return self.getTypedRuleContext(Swift5Parser.Module_nameContext,0)


        def TARGET_ENVIRONMENT(self):
            return self.getToken(Swift5Parser.TARGET_ENVIRONMENT, 0)

        def environment(self):
            return self.getTypedRuleContext(Swift5Parser.EnvironmentContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_platform_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlatform_condition" ):
                listener.enterPlatform_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlatform_condition" ):
                listener.exitPlatform_condition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlatform_condition" ):
                return visitor.visitPlatform_condition(self)
            else:
                return visitor.visitChildren(self)




    def platform_condition(self):

        localctx = Swift5Parser.Platform_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_platform_condition)
        self._la = 0 # Token type
        try:
            self.state = 962
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.OS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 933
                self.match(Swift5Parser.OS)
                self.state = 934
                self.match(Swift5Parser.LPAREN)
                self.state = 935
                self.operating_system()
                self.state = 936
                self.match(Swift5Parser.RPAREN)
                pass
            elif token in [Swift5Parser.ARCH]:
                self.enterOuterAlt(localctx, 2)
                self.state = 938
                self.match(Swift5Parser.ARCH)
                self.state = 939
                self.match(Swift5Parser.LPAREN)
                self.state = 940
                self.architecture()
                self.state = 941
                self.match(Swift5Parser.RPAREN)
                pass
            elif token in [Swift5Parser.SWIFT, Swift5Parser.COMPILER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 943
                _la = self._input.LA(1)
                if not(_la==Swift5Parser.SWIFT or _la==Swift5Parser.COMPILER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 944
                self.match(Swift5Parser.LPAREN)
                self.state = 947
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 945
                    self.compilation_condition_GE()
                    pass

                elif la_ == 2:
                    self.state = 946
                    self.compilation_condition_L()
                    pass


                self.state = 949
                self.swift_version()
                self.state = 950
                self.match(Swift5Parser.RPAREN)
                pass
            elif token in [Swift5Parser.CAN_IMPORT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 952
                self.match(Swift5Parser.CAN_IMPORT)
                self.state = 953
                self.match(Swift5Parser.LPAREN)
                self.state = 954
                self.module_name()
                self.state = 955
                self.match(Swift5Parser.RPAREN)
                pass
            elif token in [Swift5Parser.TARGET_ENVIRONMENT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 957
                self.match(Swift5Parser.TARGET_ENVIRONMENT)
                self.state = 958
                self.match(Swift5Parser.LPAREN)
                self.state = 959
                self.environment()
                self.state = 960
                self.match(Swift5Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Swift_versionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decimal_digits(self):
            return self.getToken(Swift5Parser.Decimal_digits, 0)

        def swift_version_continuation(self):
            return self.getTypedRuleContext(Swift5Parser.Swift_version_continuationContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_swift_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwift_version" ):
                listener.enterSwift_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwift_version" ):
                listener.exitSwift_version(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwift_version" ):
                return visitor.visitSwift_version(self)
            else:
                return visitor.visitChildren(self)




    def swift_version(self):

        localctx = Swift5Parser.Swift_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_swift_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self.match(Swift5Parser.Decimal_digits)
            self.state = 966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.DOT:
                self.state = 965
                self.swift_version_continuation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Swift_version_continuationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def Decimal_digits(self):
            return self.getToken(Swift5Parser.Decimal_digits, 0)

        def swift_version_continuation(self):
            return self.getTypedRuleContext(Swift5Parser.Swift_version_continuationContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_swift_version_continuation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwift_version_continuation" ):
                listener.enterSwift_version_continuation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwift_version_continuation" ):
                listener.exitSwift_version_continuation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwift_version_continuation" ):
                return visitor.visitSwift_version_continuation(self)
            else:
                return visitor.visitChildren(self)




    def swift_version_continuation(self):

        localctx = Swift5Parser.Swift_version_continuationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_swift_version_continuation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.match(Swift5Parser.DOT)
            self.state = 969
            self.match(Swift5Parser.Decimal_digits)
            self.state = 971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.DOT:
                self.state = 970
                self.swift_version_continuation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operating_systemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAC_OS(self):
            return self.getToken(Swift5Parser.MAC_OS, 0)

        def I_OS(self):
            return self.getToken(Swift5Parser.I_OS, 0)

        def OSX(self):
            return self.getToken(Swift5Parser.OSX, 0)

        def WATCH_OS(self):
            return self.getToken(Swift5Parser.WATCH_OS, 0)

        def TV_OS(self):
            return self.getToken(Swift5Parser.TV_OS, 0)

        def LINUX(self):
            return self.getToken(Swift5Parser.LINUX, 0)

        def WINDOWS(self):
            return self.getToken(Swift5Parser.WINDOWS, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_operating_system

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperating_system" ):
                listener.enterOperating_system(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperating_system" ):
                listener.exitOperating_system(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperating_system" ):
                return visitor.visitOperating_system(self)
            else:
                return visitor.visitChildren(self)




    def operating_system(self):

        localctx = Swift5Parser.Operating_systemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_operating_system)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            _la = self._input.LA(1)
            if not(((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (Swift5Parser.MAC_OS - 97)) | (1 << (Swift5Parser.I_OS - 97)) | (1 << (Swift5Parser.OSX - 97)) | (1 << (Swift5Parser.WATCH_OS - 97)) | (1 << (Swift5Parser.TV_OS - 97)) | (1 << (Swift5Parser.LINUX - 97)) | (1 << (Swift5Parser.WINDOWS - 97)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArchitectureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def I386(self):
            return self.getToken(Swift5Parser.I386, 0)

        def X86_64(self):
            return self.getToken(Swift5Parser.X86_64, 0)

        def ARM(self):
            return self.getToken(Swift5Parser.ARM, 0)

        def ARM64(self):
            return self.getToken(Swift5Parser.ARM64, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_architecture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArchitecture" ):
                listener.enterArchitecture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArchitecture" ):
                listener.exitArchitecture(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArchitecture" ):
                return visitor.visitArchitecture(self)
            else:
                return visitor.visitChildren(self)




    def architecture(self):

        localctx = Swift5Parser.ArchitectureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_architecture)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            _la = self._input.LA(1)
            if not(((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (Swift5Parser.I386 - 104)) | (1 << (Swift5Parser.X86_64 - 104)) | (1 << (Swift5Parser.ARM - 104)) | (1 << (Swift5Parser.ARM64 - 104)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.DOT)
            else:
                return self.getToken(Swift5Parser.DOT, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_module_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_name" ):
                listener.enterModule_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_name" ):
                listener.exitModule_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModule_name" ):
                return visitor.visitModule_name(self)
            else:
                return visitor.visitChildren(self)




    def module_name(self):

        localctx = Swift5Parser.Module_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_module_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.identifier()
            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Swift5Parser.DOT:
                self.state = 978
                self.match(Swift5Parser.DOT)
                self.state = 979
                self.identifier()
                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnvironmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIMULATOR(self):
            return self.getToken(Swift5Parser.SIMULATOR, 0)

        def MAC_CATALYST(self):
            return self.getToken(Swift5Parser.MAC_CATALYST, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_environment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnvironment" ):
                listener.enterEnvironment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnvironment" ):
                listener.exitEnvironment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnvironment" ):
                return visitor.visitEnvironment(self)
            else:
                return visitor.visitChildren(self)




    def environment(self):

        localctx = Swift5Parser.EnvironmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_environment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            _la = self._input.LA(1)
            if not(_la==Swift5Parser.SIMULATOR or _la==Swift5Parser.MAC_CATALYST):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Line_control_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOURCE_LOCATION(self):
            return self.getToken(Swift5Parser.SOURCE_LOCATION, 0)

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def FILE(self):
            return self.getToken(Swift5Parser.FILE, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COLON)
            else:
                return self.getToken(Swift5Parser.COLON, i)

        def file_name(self):
            return self.getTypedRuleContext(Swift5Parser.File_nameContext,0)


        def COMMA(self):
            return self.getToken(Swift5Parser.COMMA, 0)

        def LINE(self):
            return self.getToken(Swift5Parser.LINE, 0)

        def line_number(self):
            return self.getTypedRuleContext(Swift5Parser.Line_numberContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_line_control_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLine_control_statement" ):
                listener.enterLine_control_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLine_control_statement" ):
                listener.exitLine_control_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLine_control_statement" ):
                return visitor.visitLine_control_statement(self)
            else:
                return visitor.visitChildren(self)




    def line_control_statement(self):

        localctx = Swift5Parser.Line_control_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_line_control_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self.match(Swift5Parser.SOURCE_LOCATION)
            self.state = 988
            self.match(Swift5Parser.LPAREN)
            self.state = 997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.FILE:
                self.state = 989
                self.match(Swift5Parser.FILE)
                self.state = 990
                self.match(Swift5Parser.COLON)
                self.state = 991
                self.file_name()
                self.state = 992
                self.match(Swift5Parser.COMMA)
                self.state = 993
                self.match(Swift5Parser.LINE)
                self.state = 994
                self.match(Swift5Parser.COLON)
                self.state = 995
                self.line_number()


            self.state = 999
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Line_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decimal_literal(self):
            return self.getToken(Swift5Parser.Decimal_literal, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_line_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLine_number" ):
                listener.enterLine_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLine_number" ):
                listener.exitLine_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLine_number" ):
                return visitor.visitLine_number(self)
            else:
                return visitor.visitChildren(self)




    def line_number(self):

        localctx = Swift5Parser.Line_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_line_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.match(Swift5Parser.Decimal_literal)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def static_string_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Static_string_literalContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_file_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_name" ):
                listener.enterFile_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_name" ):
                listener.exitFile_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_name" ):
                return visitor.visitFile_name(self)
            else:
                return visitor.visitChildren(self)




    def file_name(self):

        localctx = Swift5Parser.File_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_file_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003
            self.static_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diagnostic_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def diagnostic_message(self):
            return self.getTypedRuleContext(Swift5Parser.Diagnostic_messageContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def ERROR(self):
            return self.getToken(Swift5Parser.ERROR, 0)

        def WARNING(self):
            return self.getToken(Swift5Parser.WARNING, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_diagnostic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagnostic_statement" ):
                listener.enterDiagnostic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagnostic_statement" ):
                listener.exitDiagnostic_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiagnostic_statement" ):
                return visitor.visitDiagnostic_statement(self)
            else:
                return visitor.visitChildren(self)




    def diagnostic_statement(self):

        localctx = Swift5Parser.Diagnostic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_diagnostic_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            _la = self._input.LA(1)
            if not(_la==Swift5Parser.ERROR or _la==Swift5Parser.WARNING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1006
            self.match(Swift5Parser.LPAREN)
            self.state = 1007
            self.diagnostic_message()
            self.state = 1008
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diagnostic_messageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def static_string_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Static_string_literalContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_diagnostic_message

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagnostic_message" ):
                listener.enterDiagnostic_message(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagnostic_message" ):
                listener.exitDiagnostic_message(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiagnostic_message" ):
                return visitor.visitDiagnostic_message(self)
            else:
                return visitor.visitChildren(self)




    def diagnostic_message(self):

        localctx = Swift5Parser.Diagnostic_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_diagnostic_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.static_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Availability_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVAILABLE(self):
            return self.getToken(Swift5Parser.AVAILABLE, 0)

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def availability_arguments(self):
            return self.getTypedRuleContext(Swift5Parser.Availability_argumentsContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_availability_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAvailability_condition" ):
                listener.enterAvailability_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAvailability_condition" ):
                listener.exitAvailability_condition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAvailability_condition" ):
                return visitor.visitAvailability_condition(self)
            else:
                return visitor.visitChildren(self)




    def availability_condition(self):

        localctx = Swift5Parser.Availability_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_availability_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.match(Swift5Parser.AVAILABLE)
            self.state = 1013
            self.match(Swift5Parser.LPAREN)
            self.state = 1014
            self.availability_arguments()
            self.state = 1015
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Availability_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def availability_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Availability_argumentContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Availability_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_availability_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAvailability_arguments" ):
                listener.enterAvailability_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAvailability_arguments" ):
                listener.exitAvailability_arguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAvailability_arguments" ):
                return visitor.visitAvailability_arguments(self)
            else:
                return visitor.visitChildren(self)




    def availability_arguments(self):

        localctx = Swift5Parser.Availability_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_availability_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.availability_argument()
            self.state = 1022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Swift5Parser.COMMA:
                self.state = 1018
                self.match(Swift5Parser.COMMA)
                self.state = 1019
                self.availability_argument()
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Availability_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def platform_name(self):
            return self.getTypedRuleContext(Swift5Parser.Platform_nameContext,0)


        def platform_version(self):
            return self.getTypedRuleContext(Swift5Parser.Platform_versionContext,0)


        def MUL(self):
            return self.getToken(Swift5Parser.MUL, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_availability_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAvailability_argument" ):
                listener.enterAvailability_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAvailability_argument" ):
                listener.exitAvailability_argument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAvailability_argument" ):
                return visitor.visitAvailability_argument(self)
            else:
                return visitor.visitChildren(self)




    def availability_argument(self):

        localctx = Swift5Parser.Availability_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_availability_argument)
        try:
            self.state = 1029
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.MAC_OS, Swift5Parser.I_OS, Swift5Parser.OSX, Swift5Parser.WATCH_OS, Swift5Parser.TV_OS, Swift5Parser.MAC_CATALYST, Swift5Parser.I_OS_APPLICATION_EXTENSION, Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION, Swift5Parser.MAC_OS_APPLICATION_EXTENSION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1025
                self.platform_name()
                self.state = 1026
                self.platform_version()
                pass
            elif token in [Swift5Parser.MUL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1028
                self.match(Swift5Parser.MUL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Platform_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def I_OS(self):
            return self.getToken(Swift5Parser.I_OS, 0)

        def OSX(self):
            return self.getToken(Swift5Parser.OSX, 0)

        def I_OS_APPLICATION_EXTENSION(self):
            return self.getToken(Swift5Parser.I_OS_APPLICATION_EXTENSION, 0)

        def MAC_OS(self):
            return self.getToken(Swift5Parser.MAC_OS, 0)

        def MAC_OS_APPLICATION_EXTENSION(self):
            return self.getToken(Swift5Parser.MAC_OS_APPLICATION_EXTENSION, 0)

        def MAC_CATALYST(self):
            return self.getToken(Swift5Parser.MAC_CATALYST, 0)

        def MAC_CATALYST_APPLICATION_EXTENSION(self):
            return self.getToken(Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION, 0)

        def WATCH_OS(self):
            return self.getToken(Swift5Parser.WATCH_OS, 0)

        def TV_OS(self):
            return self.getToken(Swift5Parser.TV_OS, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_platform_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlatform_name" ):
                listener.enterPlatform_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlatform_name" ):
                listener.exitPlatform_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlatform_name" ):
                return visitor.visitPlatform_name(self)
            else:
                return visitor.visitChildren(self)




    def platform_name(self):

        localctx = Swift5Parser.Platform_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_platform_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            _la = self._input.LA(1)
            if not(((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (Swift5Parser.MAC_OS - 97)) | (1 << (Swift5Parser.I_OS - 97)) | (1 << (Swift5Parser.OSX - 97)) | (1 << (Swift5Parser.WATCH_OS - 97)) | (1 << (Swift5Parser.TV_OS - 97)) | (1 << (Swift5Parser.MAC_CATALYST - 97)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 97)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 97)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 97)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Platform_versionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decimal_literal(self):
            return self.getToken(Swift5Parser.Decimal_literal, 0)

        def Decimal_digits(self):
            return self.getToken(Swift5Parser.Decimal_digits, 0)

        def Floating_point_literal(self):
            return self.getToken(Swift5Parser.Floating_point_literal, 0)

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_platform_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlatform_version" ):
                listener.enterPlatform_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlatform_version" ):
                listener.exitPlatform_version(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlatform_version" ):
                return visitor.visitPlatform_version(self)
            else:
                return visitor.visitChildren(self)




    def platform_version(self):

        localctx = Swift5Parser.Platform_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_platform_version)
        self._la = 0 # Token type
        try:
            self.state = 1040
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.Decimal_literal]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1033
                self.match(Swift5Parser.Decimal_literal)
                pass
            elif token in [Swift5Parser.Decimal_digits]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1034
                self.match(Swift5Parser.Decimal_digits)
                pass
            elif token in [Swift5Parser.Floating_point_literal]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1035
                self.match(Swift5Parser.Floating_point_literal)
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Swift5Parser.DOT:
                    self.state = 1036
                    self.match(Swift5Parser.DOT)
                    self.state = 1037
                    self.match(Swift5Parser.Decimal_digits)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_parameter_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(Swift5Parser.LT, 0)

        def generic_parameter_list(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_listContext,0)


        def GT(self):
            return self.getToken(Swift5Parser.GT, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_generic_parameter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_parameter_clause" ):
                listener.enterGeneric_parameter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_parameter_clause" ):
                listener.exitGeneric_parameter_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneric_parameter_clause" ):
                return visitor.visitGeneric_parameter_clause(self)
            else:
                return visitor.visitChildren(self)




    def generic_parameter_clause(self):

        localctx = Swift5Parser.Generic_parameter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_generic_parameter_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.match(Swift5Parser.LT)
            self.state = 1043
            self.generic_parameter_list()
            self.state = 1044
            self.match(Swift5Parser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_parameter_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generic_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Generic_parameterContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Generic_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_generic_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_parameter_list" ):
                listener.enterGeneric_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_parameter_list" ):
                listener.exitGeneric_parameter_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneric_parameter_list" ):
                return visitor.visitGeneric_parameter_list(self)
            else:
                return visitor.visitChildren(self)




    def generic_parameter_list(self):

        localctx = Swift5Parser.Generic_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_generic_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.generic_parameter()
            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Swift5Parser.COMMA:
                self.state = 1047
                self.match(Swift5Parser.COMMA)
                self.state = 1048
                self.generic_parameter()
                self.state = 1053
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(Swift5Parser.Type_nameContext,0)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(Swift5Parser.Type_identifierContext,0)


        def protocol_composition_type(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_composition_typeContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_generic_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_parameter" ):
                listener.enterGeneric_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_parameter" ):
                listener.exitGeneric_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneric_parameter" ):
                return visitor.visitGeneric_parameter(self)
            else:
                return visitor.visitChildren(self)




    def generic_parameter(self):

        localctx = Swift5Parser.Generic_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_generic_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.type_name()
            self.state = 1060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.COLON:
                self.state = 1055
                self.match(Swift5Parser.COLON)
                self.state = 1058
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 1056
                    self.type_identifier()
                    pass

                elif la_ == 2:
                    self.state = 1057
                    self.protocol_composition_type()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(Swift5Parser.WHERE, 0)

        def requirement_list(self):
            return self.getTypedRuleContext(Swift5Parser.Requirement_listContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_generic_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_where_clause" ):
                listener.enterGeneric_where_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_where_clause" ):
                listener.exitGeneric_where_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneric_where_clause" ):
                return visitor.visitGeneric_where_clause(self)
            else:
                return visitor.visitChildren(self)




    def generic_where_clause(self):

        localctx = Swift5Parser.Generic_where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_generic_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.match(Swift5Parser.WHERE)
            self.state = 1063
            self.requirement_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Requirement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requirement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.RequirementContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.RequirementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_requirement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequirement_list" ):
                listener.enterRequirement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequirement_list" ):
                listener.exitRequirement_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequirement_list" ):
                return visitor.visitRequirement_list(self)
            else:
                return visitor.visitChildren(self)




    def requirement_list(self):

        localctx = Swift5Parser.Requirement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_requirement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.requirement()
            self.state = 1070
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1066
                    self.match(Swift5Parser.COMMA)
                    self.state = 1067
                    self.requirement() 
                self.state = 1072
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequirementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conformance_requirement(self):
            return self.getTypedRuleContext(Swift5Parser.Conformance_requirementContext,0)


        def same_type_requirement(self):
            return self.getTypedRuleContext(Swift5Parser.Same_type_requirementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_requirement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequirement" ):
                listener.enterRequirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequirement" ):
                listener.exitRequirement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequirement" ):
                return visitor.visitRequirement(self)
            else:
                return visitor.visitChildren(self)




    def requirement(self):

        localctx = Swift5Parser.RequirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_requirement)
        try:
            self.state = 1075
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1073
                self.conformance_requirement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1074
                self.same_type_requirement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformance_requirementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Type_identifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Type_identifierContext,i)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def protocol_composition_type(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_composition_typeContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_conformance_requirement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformance_requirement" ):
                listener.enterConformance_requirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformance_requirement" ):
                listener.exitConformance_requirement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConformance_requirement" ):
                return visitor.visitConformance_requirement(self)
            else:
                return visitor.visitChildren(self)




    def conformance_requirement(self):

        localctx = Swift5Parser.Conformance_requirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_conformance_requirement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.type_identifier()
            self.state = 1078
            self.match(Swift5Parser.COLON)
            self.state = 1081
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 1079
                self.type_identifier()
                pass

            elif la_ == 2:
                self.state = 1080
                self.protocol_composition_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Same_type_requirementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Type_identifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Type_identifierContext,i)


        def same_type_equals(self):
            return self.getTypedRuleContext(Swift5Parser.Same_type_equalsContext,0)


        def type(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_same_type_requirement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSame_type_requirement" ):
                listener.enterSame_type_requirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSame_type_requirement" ):
                listener.exitSame_type_requirement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSame_type_requirement" ):
                return visitor.visitSame_type_requirement(self)
            else:
                return visitor.visitChildren(self)




    def same_type_requirement(self):

        localctx = Swift5Parser.Same_type_requirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_same_type_requirement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.type_identifier()
            self.state = 1084
            self.same_type_equals()
            self.state = 1087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 1085
                self.type_identifier()
                pass

            elif la_ == 2:
                self.state = 1086
                self.type(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_argument_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(Swift5Parser.LT, 0)

        def generic_argument_list(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_argument_listContext,0)


        def GT(self):
            return self.getToken(Swift5Parser.GT, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_generic_argument_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_argument_clause" ):
                listener.enterGeneric_argument_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_argument_clause" ):
                listener.exitGeneric_argument_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneric_argument_clause" ):
                return visitor.visitGeneric_argument_clause(self)
            else:
                return visitor.visitChildren(self)




    def generic_argument_clause(self):

        localctx = Swift5Parser.Generic_argument_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_generic_argument_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            self.match(Swift5Parser.LT)
            self.state = 1090
            self.generic_argument_list()
            self.state = 1091
            self.match(Swift5Parser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generic_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Generic_argumentContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Generic_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_generic_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_argument_list" ):
                listener.enterGeneric_argument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_argument_list" ):
                listener.exitGeneric_argument_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneric_argument_list" ):
                return visitor.visitGeneric_argument_list(self)
            else:
                return visitor.visitChildren(self)




    def generic_argument_list(self):

        localctx = Swift5Parser.Generic_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_generic_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self.generic_argument()
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Swift5Parser.COMMA:
                self.state = 1094
                self.match(Swift5Parser.COMMA)
                self.state = 1095
                self.generic_argument()
                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_generic_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_argument" ):
                listener.enterGeneric_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_argument" ):
                listener.exitGeneric_argument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneric_argument" ):
                return visitor.visitGeneric_argument(self)
            else:
                return visitor.visitChildren(self)




    def generic_argument(self):

        localctx = Swift5Parser.Generic_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_generic_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.type(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Import_declarationContext,0)


        def constant_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Constant_declarationContext,0)


        def variable_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Variable_declarationContext,0)


        def typealias_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Typealias_declarationContext,0)


        def function_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Function_declarationContext,0)


        def enum_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Enum_declarationContext,0)


        def struct_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Struct_declarationContext,0)


        def class_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Class_declarationContext,0)


        def protocol_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_declarationContext,0)


        def initializer_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Initializer_declarationContext,0)


        def deinitializer_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Deinitializer_declarationContext,0)


        def extension_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Extension_declarationContext,0)


        def subscript_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Subscript_declarationContext,0)


        def operator_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Operator_declarationContext,0)


        def precedence_group_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Precedence_group_declarationContext,0)


        def SEMI(self):
            return self.getToken(Swift5Parser.SEMI, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = Swift5Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 1103
                self.import_declaration()
                pass

            elif la_ == 2:
                self.state = 1104
                self.constant_declaration()
                pass

            elif la_ == 3:
                self.state = 1105
                self.variable_declaration()
                pass

            elif la_ == 4:
                self.state = 1106
                self.typealias_declaration()
                pass

            elif la_ == 5:
                self.state = 1107
                self.function_declaration()
                pass

            elif la_ == 6:
                self.state = 1108
                self.enum_declaration()
                pass

            elif la_ == 7:
                self.state = 1109
                self.struct_declaration()
                pass

            elif la_ == 8:
                self.state = 1110
                self.class_declaration()
                pass

            elif la_ == 9:
                self.state = 1111
                self.protocol_declaration()
                pass

            elif la_ == 10:
                self.state = 1112
                self.initializer_declaration()
                pass

            elif la_ == 11:
                self.state = 1113
                self.deinitializer_declaration()
                pass

            elif la_ == 12:
                self.state = 1114
                self.extension_declaration()
                pass

            elif la_ == 13:
                self.state = 1115
                self.subscript_declaration()
                pass

            elif la_ == 14:
                self.state = 1116
                self.operator_declaration()
                pass

            elif la_ == 15:
                self.state = 1117
                self.precedence_group_declaration()
                pass


            self.state = 1121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 1120
                self.match(Swift5Parser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.DeclarationContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.DeclarationContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarations" ):
                listener.enterDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarations" ):
                listener.exitDeclarations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarations" ):
                return visitor.visitDeclarations(self)
            else:
                return visitor.visitChildren(self)




    def declarations(self):

        localctx = Swift5Parser.DeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1123
                self.declaration()
                self.state = 1126 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.STRUCT) | (1 << Swift5Parser.INDIRECT) | (1 << Swift5Parser.INIT) | (1 << Swift5Parser.DEINIT) | (1 << Swift5Parser.EXTENSION) | (1 << Swift5Parser.SUBSCRIPT) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.PRECEDENCE_GROUP) | (1 << Swift5Parser.POSTFIX) | (1 << Swift5Parser.TYPEALIAS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Swift5Parser.CONVENIENCE - 66)) | (1 << (Swift5Parser.DYNAMIC - 66)) | (1 << (Swift5Parser.LAZY - 66)) | (1 << (Swift5Parser.OPTIONAL - 66)) | (1 << (Swift5Parser.OVERRIDE - 66)) | (1 << (Swift5Parser.REQUIRED - 66)) | (1 << (Swift5Parser.STATIC - 66)) | (1 << (Swift5Parser.WEAK - 66)) | (1 << (Swift5Parser.UNOWNED - 66)) | (1 << (Swift5Parser.MUTATING - 66)) | (1 << (Swift5Parser.NONMUTATING - 66)) | (1 << (Swift5Parser.FILE_PRIVATE - 66)))) != 0) or _la==Swift5Parser.AT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_level_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statements(self):
            return self.getTypedRuleContext(Swift5Parser.StatementsContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_top_level_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_level_declaration" ):
                listener.enterTop_level_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_level_declaration" ):
                listener.exitTop_level_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTop_level_declaration" ):
                return visitor.visitTop_level_declaration(self)
            else:
                return visitor.visitChildren(self)




    def top_level_declaration(self):

        localctx = Swift5Parser.Top_level_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_top_level_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 1128
                self.statements()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Code_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def statements(self):
            return self.getTypedRuleContext(Swift5Parser.StatementsContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_code_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCode_block" ):
                listener.enterCode_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCode_block" ):
                listener.exitCode_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCode_block" ):
                return visitor.visitCode_block(self)
            else:
                return visitor.visitChildren(self)




    def code_block(self):

        localctx = Swift5Parser.Code_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_code_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.match(Swift5Parser.LCURLY)
            self.state = 1133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 1132
                self.statements()


            self.state = 1135
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Swift5Parser.IMPORT, 0)

        def import_path(self):
            return self.getTypedRuleContext(Swift5Parser.Import_pathContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def import_kind(self):
            return self.getTypedRuleContext(Swift5Parser.Import_kindContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_import_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_declaration" ):
                listener.enterImport_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_declaration" ):
                listener.exitImport_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_declaration" ):
                return visitor.visitImport_declaration(self)
            else:
                return visitor.visitChildren(self)




    def import_declaration(self):

        localctx = Swift5Parser.Import_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_import_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1137
                self.attributes()


            self.state = 1140
            self.match(Swift5Parser.IMPORT)
            self.state = 1142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 1141
                self.import_kind()


            self.state = 1144
            self.import_path()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_kindContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPEALIAS(self):
            return self.getToken(Swift5Parser.TYPEALIAS, 0)

        def STRUCT(self):
            return self.getToken(Swift5Parser.STRUCT, 0)

        def CLASS(self):
            return self.getToken(Swift5Parser.CLASS, 0)

        def ENUM(self):
            return self.getToken(Swift5Parser.ENUM, 0)

        def PROTOCOL(self):
            return self.getToken(Swift5Parser.PROTOCOL, 0)

        def LET(self):
            return self.getToken(Swift5Parser.LET, 0)

        def VAR(self):
            return self.getToken(Swift5Parser.VAR, 0)

        def FUNC(self):
            return self.getToken(Swift5Parser.FUNC, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_import_kind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_kind" ):
                listener.enterImport_kind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_kind" ):
                listener.exitImport_kind(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_kind" ):
                return visitor.visitImport_kind(self)
            else:
                return visitor.visitChildren(self)




    def import_kind(self):

        localctx = Swift5Parser.Import_kindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_import_kind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.STRUCT) | (1 << Swift5Parser.TYPEALIAS))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_pathContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_path_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Import_path_identifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Import_path_identifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.DOT)
            else:
                return self.getToken(Swift5Parser.DOT, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_import_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_path" ):
                listener.enterImport_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_path" ):
                listener.exitImport_path(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_path" ):
                return visitor.visitImport_path(self)
            else:
                return visitor.visitChildren(self)




    def import_path(self):

        localctx = Swift5Parser.Import_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_import_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self.import_path_identifier()
            self.state = 1153
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1149
                    self.match(Swift5Parser.DOT)
                    self.state = 1150
                    self.import_path_identifier() 
                self.state = 1155
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_path_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_import_path_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_path_identifier" ):
                listener.enterImport_path_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_path_identifier" ):
                listener.exitImport_path_identifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_path_identifier" ):
                return visitor.visitImport_path_identifier(self)
            else:
                return visitor.visitChildren(self)




    def import_path_identifier(self):

        localctx = Swift5Parser.Import_path_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_import_path_identifier)
        try:
            self.state = 1158
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.AS, Swift5Parser.ALPHA, Swift5Parser.CATCH, Swift5Parser.CLASS, Swift5Parser.DEFAULT, Swift5Parser.DO, Swift5Parser.GUARD, Swift5Parser.FOR, Swift5Parser.IN, Swift5Parser.INTERNAL, Swift5Parser.FINAL, Swift5Parser.OPEN, Swift5Parser.PRIVATE, Swift5Parser.PUBLIC, Swift5Parser.WHERE, Swift5Parser.WHILE, Swift5Parser.PROTOCOL, Swift5Parser.GET, Swift5Parser.SET, Swift5Parser.WILL_SET, Swift5Parser.DID_SET, Swift5Parser.INDIRECT, Swift5Parser.PREFIX, Swift5Parser.INFIX, Swift5Parser.LEFT, Swift5Parser.RIGHT, Swift5Parser.NONE, Swift5Parser.PRECEDENCE_GROUP, Swift5Parser.HIGHER_THAN, Swift5Parser.LOWER_THAN, Swift5Parser.ASSIGNMENT, Swift5Parser.ASSOCIATIVITY, Swift5Parser.POSTFIX, Swift5Parser.OPERATOR, Swift5Parser.OS, Swift5Parser.ARCH, Swift5Parser.SWIFT, Swift5Parser.COMPILER, Swift5Parser.CAN_IMPORT, Swift5Parser.TARGET_ENVIRONMENT, Swift5Parser.CONVENIENCE, Swift5Parser.DYNAMIC, Swift5Parser.LAZY, Swift5Parser.OPTIONAL, Swift5Parser.OVERRIDE, Swift5Parser.REQUIRED, Swift5Parser.WEAK, Swift5Parser.UNOWNED, Swift5Parser.SAFE, Swift5Parser.UNSAFE, Swift5Parser.MUTATING, Swift5Parser.NONMUTATING, Swift5Parser.RED, Swift5Parser.BLUE, Swift5Parser.GREEN, Swift5Parser.RESOURCE_NAME, Swift5Parser.SOME, Swift5Parser.TYPE, Swift5Parser.PRECEDENCE, Swift5Parser.SELF, Swift5Parser.SELF_BIG, Swift5Parser.MAC_OS, Swift5Parser.I_OS, Swift5Parser.OSX, Swift5Parser.WATCH_OS, Swift5Parser.TV_OS, Swift5Parser.LINUX, Swift5Parser.WINDOWS, Swift5Parser.I386, Swift5Parser.X86_64, Swift5Parser.ARM, Swift5Parser.ARM64, Swift5Parser.SIMULATOR, Swift5Parser.MAC_CATALYST, Swift5Parser.I_OS_APPLICATION_EXTENSION, Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION, Swift5Parser.MAC_OS_APPLICATION_EXTENSION, Swift5Parser.FILE, Swift5Parser.LINE, Swift5Parser.GETTER, Swift5Parser.SETTER, Swift5Parser.Identifier, Swift5Parser.BACKTICK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1156
                self.identifier()
                pass
            elif token in [Swift5Parser.DOT, Swift5Parser.LT, Swift5Parser.GT, Swift5Parser.BANG, Swift5Parser.QUESTION, Swift5Parser.AND, Swift5Parser.SUB, Swift5Parser.EQUAL, Swift5Parser.OR, Swift5Parser.DIV, Swift5Parser.ADD, Swift5Parser.MUL, Swift5Parser.MOD, Swift5Parser.CARET, Swift5Parser.TILDE, Swift5Parser.Operator_head_other]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1157
                self.operator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(Swift5Parser.LET, 0)

        def pattern_initializer_list(self):
            return self.getTypedRuleContext(Swift5Parser.Pattern_initializer_listContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def declaration_modifiers(self):
            return self.getTypedRuleContext(Swift5Parser.Declaration_modifiersContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_constant_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declaration" ):
                listener.enterConstant_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declaration" ):
                listener.exitConstant_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant_declaration" ):
                return visitor.visitConstant_declaration(self)
            else:
                return visitor.visitChildren(self)




    def constant_declaration(self):

        localctx = Swift5Parser.Constant_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_constant_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1160
                self.attributes()


            self.state = 1164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.POSTFIX))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Swift5Parser.CONVENIENCE - 66)) | (1 << (Swift5Parser.DYNAMIC - 66)) | (1 << (Swift5Parser.LAZY - 66)) | (1 << (Swift5Parser.OPTIONAL - 66)) | (1 << (Swift5Parser.OVERRIDE - 66)) | (1 << (Swift5Parser.REQUIRED - 66)) | (1 << (Swift5Parser.STATIC - 66)) | (1 << (Swift5Parser.WEAK - 66)) | (1 << (Swift5Parser.UNOWNED - 66)) | (1 << (Swift5Parser.MUTATING - 66)) | (1 << (Swift5Parser.NONMUTATING - 66)) | (1 << (Swift5Parser.FILE_PRIVATE - 66)))) != 0):
                self.state = 1163
                self.declaration_modifiers()


            self.state = 1166
            self.match(Swift5Parser.LET)
            self.state = 1167
            self.pattern_initializer_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pattern_initializer_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Pattern_initializerContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Pattern_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_pattern_initializer_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern_initializer_list" ):
                listener.enterPattern_initializer_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern_initializer_list" ):
                listener.exitPattern_initializer_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern_initializer_list" ):
                return visitor.visitPattern_initializer_list(self)
            else:
                return visitor.visitChildren(self)




    def pattern_initializer_list(self):

        localctx = Swift5Parser.Pattern_initializer_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_pattern_initializer_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            self.pattern_initializer()
            self.state = 1174
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1170
                    self.match(Swift5Parser.COMMA)
                    self.state = 1171
                    self.pattern_initializer() 
                self.state = 1176
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pattern_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(Swift5Parser.PatternContext,0)


        def initializer(self):
            return self.getTypedRuleContext(Swift5Parser.InitializerContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_pattern_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern_initializer" ):
                listener.enterPattern_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern_initializer" ):
                listener.exitPattern_initializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern_initializer" ):
                return visitor.visitPattern_initializer(self)
            else:
                return visitor.visitChildren(self)




    def pattern_initializer(self):

        localctx = Swift5Parser.Pattern_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_pattern_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self.pattern(0)
            self.state = 1179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 1178
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(Swift5Parser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = Swift5Parser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self.match(Swift5Parser.EQUAL)
            self.state = 1182
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration_head(self):
            return self.getTypedRuleContext(Swift5Parser.Variable_declaration_headContext,0)


        def variable_name(self):
            return self.getTypedRuleContext(Swift5Parser.Variable_nameContext,0)


        def pattern_initializer_list(self):
            return self.getTypedRuleContext(Swift5Parser.Pattern_initializer_listContext,0)


        def initializer(self):
            return self.getTypedRuleContext(Swift5Parser.InitializerContext,0)


        def willSet_didSet_block(self):
            return self.getTypedRuleContext(Swift5Parser.WillSet_didSet_blockContext,0)


        def type_annotation(self):
            return self.getTypedRuleContext(Swift5Parser.Type_annotationContext,0)


        def getter_setter_block(self):
            return self.getTypedRuleContext(Swift5Parser.Getter_setter_blockContext,0)


        def getter_setter_keyword_block(self):
            return self.getTypedRuleContext(Swift5Parser.Getter_setter_keyword_blockContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_variable_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declaration" ):
                listener.enterVariable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declaration" ):
                listener.exitVariable_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_declaration" ):
                return visitor.visitVariable_declaration(self)
            else:
                return visitor.visitChildren(self)




    def variable_declaration(self):

        localctx = Swift5Parser.Variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_variable_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.variable_declaration_head()
            self.state = 1201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 1185
                self.variable_name()
                self.state = 1198
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Swift5Parser.EQUAL]:
                    self.state = 1186
                    self.initializer()
                    self.state = 1187
                    self.willSet_didSet_block()
                    pass
                elif token in [Swift5Parser.COLON]:
                    self.state = 1189
                    self.type_annotation()
                    self.state = 1196
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                    if la_ == 1:
                        self.state = 1190
                        self.getter_setter_block()
                        pass

                    elif la_ == 2:
                        self.state = 1191
                        self.getter_setter_keyword_block()
                        pass

                    elif la_ == 3:
                        self.state = 1193
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Swift5Parser.EQUAL:
                            self.state = 1192
                            self.initializer()


                        self.state = 1195
                        self.willSet_didSet_block()
                        pass


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 1200
                self.pattern_initializer_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declaration_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(Swift5Parser.VAR, 0)

        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def declaration_modifiers(self):
            return self.getTypedRuleContext(Swift5Parser.Declaration_modifiersContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_variable_declaration_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declaration_head" ):
                listener.enterVariable_declaration_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declaration_head" ):
                listener.exitVariable_declaration_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_declaration_head" ):
                return visitor.visitVariable_declaration_head(self)
            else:
                return visitor.visitChildren(self)




    def variable_declaration_head(self):

        localctx = Swift5Parser.Variable_declaration_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_variable_declaration_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1203
                self.attributes()


            self.state = 1207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.POSTFIX))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Swift5Parser.CONVENIENCE - 66)) | (1 << (Swift5Parser.DYNAMIC - 66)) | (1 << (Swift5Parser.LAZY - 66)) | (1 << (Swift5Parser.OPTIONAL - 66)) | (1 << (Swift5Parser.OVERRIDE - 66)) | (1 << (Swift5Parser.REQUIRED - 66)) | (1 << (Swift5Parser.STATIC - 66)) | (1 << (Swift5Parser.WEAK - 66)) | (1 << (Swift5Parser.UNOWNED - 66)) | (1 << (Swift5Parser.MUTATING - 66)) | (1 << (Swift5Parser.NONMUTATING - 66)) | (1 << (Swift5Parser.FILE_PRIVATE - 66)))) != 0):
                self.state = 1206
                self.declaration_modifiers()


            self.state = 1209
            self.match(Swift5Parser.VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_name" ):
                listener.enterVariable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_name" ):
                listener.exitVariable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_name" ):
                return visitor.visitVariable_name(self)
            else:
                return visitor.visitChildren(self)




    def variable_name(self):

        localctx = Swift5Parser.Variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_variable_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Getter_setter_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def getter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Getter_clauseContext,0)


        def setter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Setter_clauseContext,0)


        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_getter_setter_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter_setter_block" ):
                listener.enterGetter_setter_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter_setter_block" ):
                listener.exitGetter_setter_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetter_setter_block" ):
                return visitor.visitGetter_setter_block(self)
            else:
                return visitor.visitChildren(self)




    def getter_setter_block(self):

        localctx = Swift5Parser.Getter_setter_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_getter_setter_block)
        self._la = 0 # Token type
        try:
            self.state = 1226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1213
                self.match(Swift5Parser.LCURLY)
                self.state = 1221
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 1214
                    self.getter_clause()
                    self.state = 1216
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 31)) & ~0x3f) == 0 and ((1 << (_la - 31)) & ((1 << (Swift5Parser.SET - 31)) | (1 << (Swift5Parser.MUTATING - 31)) | (1 << (Swift5Parser.NONMUTATING - 31)))) != 0) or _la==Swift5Parser.AT:
                        self.state = 1215
                        self.setter_clause()


                    pass

                elif la_ == 2:
                    self.state = 1218
                    self.setter_clause()
                    self.state = 1219
                    self.getter_clause()
                    pass


                self.state = 1223
                self.match(Swift5Parser.RCURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1225
                self.code_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Getter_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(Swift5Parser.GET, 0)

        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def mutation_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Mutation_modifierContext,0)


        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_getter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter_clause" ):
                listener.enterGetter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter_clause" ):
                listener.exitGetter_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetter_clause" ):
                return visitor.visitGetter_clause(self)
            else:
                return visitor.visitChildren(self)




    def getter_clause(self):

        localctx = Swift5Parser.Getter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_getter_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1228
                self.attributes()


            self.state = 1232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.MUTATING or _la==Swift5Parser.NONMUTATING:
                self.state = 1231
                self.mutation_modifier()


            self.state = 1234
            self.match(Swift5Parser.GET)
            self.state = 1236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.LCURLY:
                self.state = 1235
                self.code_block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Setter_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(Swift5Parser.SET, 0)

        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def mutation_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Mutation_modifierContext,0)


        def setter_name(self):
            return self.getTypedRuleContext(Swift5Parser.Setter_nameContext,0)


        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_setter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter_clause" ):
                listener.enterSetter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter_clause" ):
                listener.exitSetter_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetter_clause" ):
                return visitor.visitSetter_clause(self)
            else:
                return visitor.visitChildren(self)




    def setter_clause(self):

        localctx = Swift5Parser.Setter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_setter_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1238
                self.attributes()


            self.state = 1242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.MUTATING or _la==Swift5Parser.NONMUTATING:
                self.state = 1241
                self.mutation_modifier()


            self.state = 1244
            self.match(Swift5Parser.SET)
            self.state = 1246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.LPAREN:
                self.state = 1245
                self.setter_name()


            self.state = 1249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.LCURLY:
                self.state = 1248
                self.code_block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Setter_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_setter_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter_name" ):
                listener.enterSetter_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter_name" ):
                listener.exitSetter_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetter_name" ):
                return visitor.visitSetter_name(self)
            else:
                return visitor.visitChildren(self)




    def setter_name(self):

        localctx = Swift5Parser.Setter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_setter_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            self.match(Swift5Parser.LPAREN)
            self.state = 1252
            self.identifier()
            self.state = 1253
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Getter_setter_keyword_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def getter_keyword_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Getter_keyword_clauseContext,0)


        def setter_keyword_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Setter_keyword_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_getter_setter_keyword_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter_setter_keyword_block" ):
                listener.enterGetter_setter_keyword_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter_setter_keyword_block" ):
                listener.exitGetter_setter_keyword_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetter_setter_keyword_block" ):
                return visitor.visitGetter_setter_keyword_block(self)
            else:
                return visitor.visitChildren(self)




    def getter_setter_keyword_block(self):

        localctx = Swift5Parser.Getter_setter_keyword_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_getter_setter_keyword_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            self.match(Swift5Parser.LCURLY)
            self.state = 1263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 1256
                self.getter_keyword_clause()
                self.state = 1258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 31)) & ~0x3f) == 0 and ((1 << (_la - 31)) & ((1 << (Swift5Parser.SET - 31)) | (1 << (Swift5Parser.MUTATING - 31)) | (1 << (Swift5Parser.NONMUTATING - 31)))) != 0) or _la==Swift5Parser.AT:
                    self.state = 1257
                    self.setter_keyword_clause()


                pass

            elif la_ == 2:
                self.state = 1260
                self.setter_keyword_clause()
                self.state = 1261
                self.getter_keyword_clause()
                pass


            self.state = 1265
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Getter_keyword_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(Swift5Parser.GET, 0)

        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def mutation_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Mutation_modifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_getter_keyword_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter_keyword_clause" ):
                listener.enterGetter_keyword_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter_keyword_clause" ):
                listener.exitGetter_keyword_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetter_keyword_clause" ):
                return visitor.visitGetter_keyword_clause(self)
            else:
                return visitor.visitChildren(self)




    def getter_keyword_clause(self):

        localctx = Swift5Parser.Getter_keyword_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_getter_keyword_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1267
                self.attributes()


            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.MUTATING or _la==Swift5Parser.NONMUTATING:
                self.state = 1270
                self.mutation_modifier()


            self.state = 1273
            self.match(Swift5Parser.GET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Setter_keyword_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(Swift5Parser.SET, 0)

        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def mutation_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Mutation_modifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_setter_keyword_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter_keyword_clause" ):
                listener.enterSetter_keyword_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter_keyword_clause" ):
                listener.exitSetter_keyword_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetter_keyword_clause" ):
                return visitor.visitSetter_keyword_clause(self)
            else:
                return visitor.visitChildren(self)




    def setter_keyword_clause(self):

        localctx = Swift5Parser.Setter_keyword_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_setter_keyword_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1275
                self.attributes()


            self.state = 1279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.MUTATING or _la==Swift5Parser.NONMUTATING:
                self.state = 1278
                self.mutation_modifier()


            self.state = 1281
            self.match(Swift5Parser.SET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WillSet_didSet_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def willSet_clause(self):
            return self.getTypedRuleContext(Swift5Parser.WillSet_clauseContext,0)


        def didSet_clause(self):
            return self.getTypedRuleContext(Swift5Parser.DidSet_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_willSet_didSet_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWillSet_didSet_block" ):
                listener.enterWillSet_didSet_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWillSet_didSet_block" ):
                listener.exitWillSet_didSet_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWillSet_didSet_block" ):
                return visitor.visitWillSet_didSet_block(self)
            else:
                return visitor.visitChildren(self)




    def willSet_didSet_block(self):

        localctx = Swift5Parser.WillSet_didSet_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_willSet_didSet_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.match(Swift5Parser.LCURLY)
            self.state = 1292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 1284
                self.willSet_clause()
                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Swift5Parser.DID_SET or _la==Swift5Parser.AT:
                    self.state = 1285
                    self.didSet_clause()


                pass

            elif la_ == 2:
                self.state = 1288
                self.didSet_clause()
                self.state = 1290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Swift5Parser.WILL_SET or _la==Swift5Parser.AT:
                    self.state = 1289
                    self.willSet_clause()


                pass


            self.state = 1294
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WillSet_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILL_SET(self):
            return self.getToken(Swift5Parser.WILL_SET, 0)

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def setter_name(self):
            return self.getTypedRuleContext(Swift5Parser.Setter_nameContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_willSet_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWillSet_clause" ):
                listener.enterWillSet_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWillSet_clause" ):
                listener.exitWillSet_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWillSet_clause" ):
                return visitor.visitWillSet_clause(self)
            else:
                return visitor.visitChildren(self)




    def willSet_clause(self):

        localctx = Swift5Parser.WillSet_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_willSet_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1296
                self.attributes()


            self.state = 1299
            self.match(Swift5Parser.WILL_SET)
            self.state = 1301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.LPAREN:
                self.state = 1300
                self.setter_name()


            self.state = 1303
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DidSet_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DID_SET(self):
            return self.getToken(Swift5Parser.DID_SET, 0)

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def setter_name(self):
            return self.getTypedRuleContext(Swift5Parser.Setter_nameContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_didSet_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDidSet_clause" ):
                listener.enterDidSet_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDidSet_clause" ):
                listener.exitDidSet_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDidSet_clause" ):
                return visitor.visitDidSet_clause(self)
            else:
                return visitor.visitChildren(self)




    def didSet_clause(self):

        localctx = Swift5Parser.DidSet_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_didSet_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1305
                self.attributes()


            self.state = 1308
            self.match(Swift5Parser.DID_SET)
            self.state = 1310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.LPAREN:
                self.state = 1309
                self.setter_name()


            self.state = 1312
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Typealias_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPEALIAS(self):
            return self.getToken(Swift5Parser.TYPEALIAS, 0)

        def typealias_name(self):
            return self.getTypedRuleContext(Swift5Parser.Typealias_nameContext,0)


        def typealias_assignment(self):
            return self.getTypedRuleContext(Swift5Parser.Typealias_assignmentContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def access_level_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Access_level_modifierContext,0)


        def generic_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_typealias_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypealias_declaration" ):
                listener.enterTypealias_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypealias_declaration" ):
                listener.exitTypealias_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypealias_declaration" ):
                return visitor.visitTypealias_declaration(self)
            else:
                return visitor.visitChildren(self)




    def typealias_declaration(self):

        localctx = Swift5Parser.Typealias_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_typealias_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1314
                self.attributes()


            self.state = 1318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Swift5Parser.INTERNAL - 20)) | (1 << (Swift5Parser.OPEN - 20)) | (1 << (Swift5Parser.PRIVATE - 20)) | (1 << (Swift5Parser.PUBLIC - 20)) | (1 << (Swift5Parser.FILE_PRIVATE - 20)))) != 0):
                self.state = 1317
                self.access_level_modifier()


            self.state = 1320
            self.match(Swift5Parser.TYPEALIAS)
            self.state = 1321
            self.typealias_name()
            self.state = 1323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.LT:
                self.state = 1322
                self.generic_parameter_clause()


            self.state = 1325
            self.typealias_assignment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Typealias_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_typealias_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypealias_name" ):
                listener.enterTypealias_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypealias_name" ):
                listener.exitTypealias_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypealias_name" ):
                return visitor.visitTypealias_name(self)
            else:
                return visitor.visitChildren(self)




    def typealias_name(self):

        localctx = Swift5Parser.Typealias_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_typealias_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Typealias_assignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(Swift5Parser.EQUAL, 0)

        def type(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_typealias_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypealias_assignment" ):
                listener.enterTypealias_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypealias_assignment" ):
                listener.exitTypealias_assignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypealias_assignment" ):
                return visitor.visitTypealias_assignment(self)
            else:
                return visitor.visitChildren(self)




    def typealias_assignment(self):

        localctx = Swift5Parser.Typealias_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_typealias_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self.match(Swift5Parser.EQUAL)
            self.state = 1330
            self.type(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_head(self):
            return self.getTypedRuleContext(Swift5Parser.Function_headContext,0)


        def function_name(self):
            return self.getTypedRuleContext(Swift5Parser.Function_nameContext,0)


        def function_signature(self):
            return self.getTypedRuleContext(Swift5Parser.Function_signatureContext,0)


        def generic_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_clauseContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def function_body(self):
            return self.getTypedRuleContext(Swift5Parser.Function_bodyContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_function_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_declaration" ):
                listener.enterFunction_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_declaration" ):
                listener.exitFunction_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_declaration" ):
                return visitor.visitFunction_declaration(self)
            else:
                return visitor.visitChildren(self)




    def function_declaration(self):

        localctx = Swift5Parser.Function_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_function_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self.function_head()
            self.state = 1333
            self.function_name()
            self.state = 1335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.LT:
                self.state = 1334
                self.generic_parameter_clause()


            self.state = 1337
            self.function_signature()
            self.state = 1339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 1338
                self.generic_where_clause()


            self.state = 1342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 1341
                self.function_body()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(Swift5Parser.FUNC, 0)

        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def declaration_modifiers(self):
            return self.getTypedRuleContext(Swift5Parser.Declaration_modifiersContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_function_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_head" ):
                listener.enterFunction_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_head" ):
                listener.exitFunction_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_head" ):
                return visitor.visitFunction_head(self)
            else:
                return visitor.visitChildren(self)




    def function_head(self):

        localctx = Swift5Parser.Function_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_function_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1344
                self.attributes()


            self.state = 1348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.POSTFIX))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Swift5Parser.CONVENIENCE - 66)) | (1 << (Swift5Parser.DYNAMIC - 66)) | (1 << (Swift5Parser.LAZY - 66)) | (1 << (Swift5Parser.OPTIONAL - 66)) | (1 << (Swift5Parser.OVERRIDE - 66)) | (1 << (Swift5Parser.REQUIRED - 66)) | (1 << (Swift5Parser.STATIC - 66)) | (1 << (Swift5Parser.WEAK - 66)) | (1 << (Swift5Parser.UNOWNED - 66)) | (1 << (Swift5Parser.MUTATING - 66)) | (1 << (Swift5Parser.NONMUTATING - 66)) | (1 << (Swift5Parser.FILE_PRIVATE - 66)))) != 0):
                self.state = 1347
                self.declaration_modifiers()


            self.state = 1350
            self.match(Swift5Parser.FUNC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_name" ):
                return visitor.visitFunction_name(self)
            else:
                return visitor.visitChildren(self)




    def function_name(self):

        localctx = Swift5Parser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_function_name)
        try:
            self.state = 1354
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.AS, Swift5Parser.ALPHA, Swift5Parser.CATCH, Swift5Parser.CLASS, Swift5Parser.DEFAULT, Swift5Parser.DO, Swift5Parser.GUARD, Swift5Parser.FOR, Swift5Parser.IN, Swift5Parser.INTERNAL, Swift5Parser.FINAL, Swift5Parser.OPEN, Swift5Parser.PRIVATE, Swift5Parser.PUBLIC, Swift5Parser.WHERE, Swift5Parser.WHILE, Swift5Parser.PROTOCOL, Swift5Parser.GET, Swift5Parser.SET, Swift5Parser.WILL_SET, Swift5Parser.DID_SET, Swift5Parser.INDIRECT, Swift5Parser.PREFIX, Swift5Parser.INFIX, Swift5Parser.LEFT, Swift5Parser.RIGHT, Swift5Parser.NONE, Swift5Parser.PRECEDENCE_GROUP, Swift5Parser.HIGHER_THAN, Swift5Parser.LOWER_THAN, Swift5Parser.ASSIGNMENT, Swift5Parser.ASSOCIATIVITY, Swift5Parser.POSTFIX, Swift5Parser.OPERATOR, Swift5Parser.OS, Swift5Parser.ARCH, Swift5Parser.SWIFT, Swift5Parser.COMPILER, Swift5Parser.CAN_IMPORT, Swift5Parser.TARGET_ENVIRONMENT, Swift5Parser.CONVENIENCE, Swift5Parser.DYNAMIC, Swift5Parser.LAZY, Swift5Parser.OPTIONAL, Swift5Parser.OVERRIDE, Swift5Parser.REQUIRED, Swift5Parser.WEAK, Swift5Parser.UNOWNED, Swift5Parser.SAFE, Swift5Parser.UNSAFE, Swift5Parser.MUTATING, Swift5Parser.NONMUTATING, Swift5Parser.RED, Swift5Parser.BLUE, Swift5Parser.GREEN, Swift5Parser.RESOURCE_NAME, Swift5Parser.SOME, Swift5Parser.TYPE, Swift5Parser.PRECEDENCE, Swift5Parser.SELF, Swift5Parser.SELF_BIG, Swift5Parser.MAC_OS, Swift5Parser.I_OS, Swift5Parser.OSX, Swift5Parser.WATCH_OS, Swift5Parser.TV_OS, Swift5Parser.LINUX, Swift5Parser.WINDOWS, Swift5Parser.I386, Swift5Parser.X86_64, Swift5Parser.ARM, Swift5Parser.ARM64, Swift5Parser.SIMULATOR, Swift5Parser.MAC_CATALYST, Swift5Parser.I_OS_APPLICATION_EXTENSION, Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION, Swift5Parser.MAC_OS_APPLICATION_EXTENSION, Swift5Parser.FILE, Swift5Parser.LINE, Swift5Parser.GETTER, Swift5Parser.SETTER, Swift5Parser.Identifier, Swift5Parser.BACKTICK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1352
                self.identifier()
                pass
            elif token in [Swift5Parser.DOT, Swift5Parser.LT, Swift5Parser.GT, Swift5Parser.BANG, Swift5Parser.QUESTION, Swift5Parser.AND, Swift5Parser.SUB, Swift5Parser.EQUAL, Swift5Parser.OR, Swift5Parser.DIV, Swift5Parser.ADD, Swift5Parser.MUL, Swift5Parser.MOD, Swift5Parser.CARET, Swift5Parser.TILDE, Swift5Parser.Operator_head_other]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1353
                self.operator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_signatureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Parameter_clauseContext,0)


        def RETHROWS(self):
            return self.getToken(Swift5Parser.RETHROWS, 0)

        def function_result(self):
            return self.getTypedRuleContext(Swift5Parser.Function_resultContext,0)


        def THROWS(self):
            return self.getToken(Swift5Parser.THROWS, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_function_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_signature" ):
                listener.enterFunction_signature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_signature" ):
                listener.exitFunction_signature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_signature" ):
                return visitor.visitFunction_signature(self)
            else:
                return visitor.visitChildren(self)




    def function_signature(self):

        localctx = Swift5Parser.Function_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_function_signature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self.parameter_clause()
            self.state = 1361
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1358
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 1357
                    self.match(Swift5Parser.THROWS)


                pass

            elif la_ == 2:
                self.state = 1360
                self.match(Swift5Parser.RETHROWS)
                pass


            self.state = 1364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1363
                self.function_result()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_resultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrow_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Arrow_operatorContext,0)


        def type(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_function_result

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_result" ):
                listener.enterFunction_result(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_result" ):
                listener.exitFunction_result(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_result" ):
                return visitor.visitFunction_result(self)
            else:
                return visitor.visitChildren(self)




    def function_result(self):

        localctx = Swift5Parser.Function_resultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_function_result)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            self.arrow_operator()
            self.state = 1368
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1367
                self.attributes()


            self.state = 1370
            self.type(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_body" ):
                listener.enterFunction_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_body" ):
                listener.exitFunction_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_body" ):
                return visitor.visitFunction_body(self)
            else:
                return visitor.visitChildren(self)




    def function_body(self):

        localctx = Swift5Parser.Function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_function_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1372
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def parameter_list(self):
            return self.getTypedRuleContext(Swift5Parser.Parameter_listContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_parameter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_clause" ):
                listener.enterParameter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_clause" ):
                listener.exitParameter_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_clause" ):
                return visitor.visitParameter_clause(self)
            else:
                return visitor.visitChildren(self)




    def parameter_clause(self):

        localctx = Swift5Parser.Parameter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_parameter_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1374
            self.match(Swift5Parser.LPAREN)
            self.state = 1376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET) | (1 << Swift5Parser.WILL_SET) | (1 << Swift5Parser.DID_SET) | (1 << Swift5Parser.INDIRECT) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.LEFT) | (1 << Swift5Parser.RIGHT) | (1 << Swift5Parser.NONE) | (1 << Swift5Parser.PRECEDENCE_GROUP) | (1 << Swift5Parser.HIGHER_THAN) | (1 << Swift5Parser.LOWER_THAN) | (1 << Swift5Parser.ASSIGNMENT) | (1 << Swift5Parser.ASSOCIATIVITY) | (1 << Swift5Parser.POSTFIX) | (1 << Swift5Parser.OPERATOR) | (1 << Swift5Parser.OS) | (1 << Swift5Parser.ARCH) | (1 << Swift5Parser.SWIFT) | (1 << Swift5Parser.COMPILER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)) | (1 << (Swift5Parser.SELF_BIG - 64)) | (1 << (Swift5Parser.MAC_OS - 64)) | (1 << (Swift5Parser.I_OS - 64)) | (1 << (Swift5Parser.OSX - 64)) | (1 << (Swift5Parser.WATCH_OS - 64)) | (1 << (Swift5Parser.TV_OS - 64)) | (1 << (Swift5Parser.LINUX - 64)) | (1 << (Swift5Parser.WINDOWS - 64)) | (1 << (Swift5Parser.I386 - 64)) | (1 << (Swift5Parser.X86_64 - 64)) | (1 << (Swift5Parser.ARM - 64)) | (1 << (Swift5Parser.ARM64 - 64)) | (1 << (Swift5Parser.SIMULATOR - 64)) | (1 << (Swift5Parser.MAC_CATALYST - 64)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.FILE - 64)) | (1 << (Swift5Parser.LINE - 64)))) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.AT - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) != 0):
                self.state = 1375
                self.parameter_list()


            self.state = 1378
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.ParameterContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.ParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_list" ):
                listener.enterParameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_list" ):
                listener.exitParameter_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_list" ):
                return visitor.visitParameter_list(self)
            else:
                return visitor.visitChildren(self)




    def parameter_list(self):

        localctx = Swift5Parser.Parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1380
            self.parameter()
            self.state = 1385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Swift5Parser.COMMA:
                self.state = 1381
                self.match(Swift5Parser.COMMA)
                self.state = 1382
                self.parameter()
                self.state = 1387
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_parameter_name(self):
            return self.getTypedRuleContext(Swift5Parser.Local_parameter_nameContext,0)


        def type_annotation(self):
            return self.getTypedRuleContext(Swift5Parser.Type_annotationContext,0)


        def range_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Range_operatorContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def external_parameter_name(self):
            return self.getTypedRuleContext(Swift5Parser.External_parameter_nameContext,0)


        def default_argument_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Default_argument_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = Swift5Parser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1388
                self.attributes()


            self.state = 1392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1391
                self.external_parameter_name()


            self.state = 1394
            self.local_parameter_name()
            self.state = 1395
            self.type_annotation()
            self.state = 1400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Swift5Parser.EQUAL:
                    self.state = 1396
                    self.default_argument_clause()


                pass

            elif la_ == 2:
                self.state = 1399
                self.range_operator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_parameter_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_external_parameter_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_parameter_name" ):
                listener.enterExternal_parameter_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_parameter_name" ):
                listener.exitExternal_parameter_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternal_parameter_name" ):
                return visitor.visitExternal_parameter_name(self)
            else:
                return visitor.visitChildren(self)




    def external_parameter_name(self):

        localctx = Swift5Parser.External_parameter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_external_parameter_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_parameter_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_local_parameter_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_parameter_name" ):
                listener.enterLocal_parameter_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_parameter_name" ):
                listener.exitLocal_parameter_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocal_parameter_name" ):
                return visitor.visitLocal_parameter_name(self)
            else:
                return visitor.visitChildren(self)




    def local_parameter_name(self):

        localctx = Swift5Parser.Local_parameter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_local_parameter_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_argument_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(Swift5Parser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_default_argument_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_argument_clause" ):
                listener.enterDefault_argument_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_argument_clause" ):
                listener.exitDefault_argument_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_argument_clause" ):
                return visitor.visitDefault_argument_clause(self)
            else:
                return visitor.visitChildren(self)




    def default_argument_clause(self):

        localctx = Swift5Parser.Default_argument_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_default_argument_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1406
            self.match(Swift5Parser.EQUAL)
            self.state = 1407
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def union_style_enum(self):
            return self.getTypedRuleContext(Swift5Parser.Union_style_enumContext,0)


        def raw_value_style_enum(self):
            return self.getTypedRuleContext(Swift5Parser.Raw_value_style_enumContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def access_level_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Access_level_modifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_enum_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_declaration" ):
                listener.enterEnum_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_declaration" ):
                listener.exitEnum_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_declaration" ):
                return visitor.visitEnum_declaration(self)
            else:
                return visitor.visitChildren(self)




    def enum_declaration(self):

        localctx = Swift5Parser.Enum_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_enum_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1409
                self.attributes()


            self.state = 1413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Swift5Parser.INTERNAL - 20)) | (1 << (Swift5Parser.OPEN - 20)) | (1 << (Swift5Parser.PRIVATE - 20)) | (1 << (Swift5Parser.PUBLIC - 20)) | (1 << (Swift5Parser.FILE_PRIVATE - 20)))) != 0):
                self.state = 1412
                self.access_level_modifier()


            self.state = 1417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1415
                self.union_style_enum()
                pass

            elif la_ == 2:
                self.state = 1416
                self.raw_value_style_enum()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Union_style_enumContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(Swift5Parser.ENUM, 0)

        def enum_name(self):
            return self.getTypedRuleContext(Swift5Parser.Enum_nameContext,0)


        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def INDIRECT(self):
            return self.getToken(Swift5Parser.INDIRECT, 0)

        def generic_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_clauseContext,0)


        def type_inheritance_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Type_inheritance_clauseContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def union_style_enum_members(self):
            return self.getTypedRuleContext(Swift5Parser.Union_style_enum_membersContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_union_style_enum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_style_enum" ):
                listener.enterUnion_style_enum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_style_enum" ):
                listener.exitUnion_style_enum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnion_style_enum" ):
                return visitor.visitUnion_style_enum(self)
            else:
                return visitor.visitChildren(self)




    def union_style_enum(self):

        localctx = Swift5Parser.Union_style_enumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_union_style_enum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.INDIRECT:
                self.state = 1419
                self.match(Swift5Parser.INDIRECT)


            self.state = 1422
            self.match(Swift5Parser.ENUM)
            self.state = 1423
            self.enum_name()
            self.state = 1425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.LT:
                self.state = 1424
                self.generic_parameter_clause()


            self.state = 1428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.COLON:
                self.state = 1427
                self.type_inheritance_clause()


            self.state = 1431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.WHERE:
                self.state = 1430
                self.generic_where_clause()


            self.state = 1433
            self.match(Swift5Parser.LCURLY)
            self.state = 1435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.CASE) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.STRUCT) | (1 << Swift5Parser.INDIRECT) | (1 << Swift5Parser.INIT) | (1 << Swift5Parser.DEINIT) | (1 << Swift5Parser.EXTENSION) | (1 << Swift5Parser.SUBSCRIPT) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.PRECEDENCE_GROUP) | (1 << Swift5Parser.POSTFIX) | (1 << Swift5Parser.TYPEALIAS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Swift5Parser.CONVENIENCE - 66)) | (1 << (Swift5Parser.DYNAMIC - 66)) | (1 << (Swift5Parser.LAZY - 66)) | (1 << (Swift5Parser.OPTIONAL - 66)) | (1 << (Swift5Parser.OVERRIDE - 66)) | (1 << (Swift5Parser.REQUIRED - 66)) | (1 << (Swift5Parser.STATIC - 66)) | (1 << (Swift5Parser.WEAK - 66)) | (1 << (Swift5Parser.UNOWNED - 66)) | (1 << (Swift5Parser.MUTATING - 66)) | (1 << (Swift5Parser.NONMUTATING - 66)) | (1 << (Swift5Parser.FILE_PRIVATE - 66)) | (1 << (Swift5Parser.SOURCE_LOCATION - 66)) | (1 << (Swift5Parser.ERROR - 66)) | (1 << (Swift5Parser.WARNING - 66)) | (1 << (Swift5Parser.HASH_IF - 66)))) != 0) or _la==Swift5Parser.AT:
                self.state = 1434
                self.union_style_enum_members()


            self.state = 1437
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Union_style_enum_membersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def union_style_enum_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Union_style_enum_memberContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Union_style_enum_memberContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_union_style_enum_members

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_style_enum_members" ):
                listener.enterUnion_style_enum_members(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_style_enum_members" ):
                listener.exitUnion_style_enum_members(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnion_style_enum_members" ):
                return visitor.visitUnion_style_enum_members(self)
            else:
                return visitor.visitChildren(self)




    def union_style_enum_members(self):

        localctx = Swift5Parser.Union_style_enum_membersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_union_style_enum_members)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1439
                self.union_style_enum_member()
                self.state = 1442 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.CASE) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.STRUCT) | (1 << Swift5Parser.INDIRECT) | (1 << Swift5Parser.INIT) | (1 << Swift5Parser.DEINIT) | (1 << Swift5Parser.EXTENSION) | (1 << Swift5Parser.SUBSCRIPT) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.PRECEDENCE_GROUP) | (1 << Swift5Parser.POSTFIX) | (1 << Swift5Parser.TYPEALIAS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Swift5Parser.CONVENIENCE - 66)) | (1 << (Swift5Parser.DYNAMIC - 66)) | (1 << (Swift5Parser.LAZY - 66)) | (1 << (Swift5Parser.OPTIONAL - 66)) | (1 << (Swift5Parser.OVERRIDE - 66)) | (1 << (Swift5Parser.REQUIRED - 66)) | (1 << (Swift5Parser.STATIC - 66)) | (1 << (Swift5Parser.WEAK - 66)) | (1 << (Swift5Parser.UNOWNED - 66)) | (1 << (Swift5Parser.MUTATING - 66)) | (1 << (Swift5Parser.NONMUTATING - 66)) | (1 << (Swift5Parser.FILE_PRIVATE - 66)) | (1 << (Swift5Parser.SOURCE_LOCATION - 66)) | (1 << (Swift5Parser.ERROR - 66)) | (1 << (Swift5Parser.WARNING - 66)) | (1 << (Swift5Parser.HASH_IF - 66)))) != 0) or _la==Swift5Parser.AT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Union_style_enum_memberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(Swift5Parser.DeclarationContext,0)


        def union_style_enum_case_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Union_style_enum_case_clauseContext,0)


        def compiler_control_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Compiler_control_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_union_style_enum_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_style_enum_member" ):
                listener.enterUnion_style_enum_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_style_enum_member" ):
                listener.exitUnion_style_enum_member(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnion_style_enum_member" ):
                return visitor.visitUnion_style_enum_member(self)
            else:
                return visitor.visitChildren(self)




    def union_style_enum_member(self):

        localctx = Swift5Parser.Union_style_enum_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_union_style_enum_member)
        try:
            self.state = 1447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1444
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1445
                self.union_style_enum_case_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1446
                self.compiler_control_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Union_style_enum_case_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(Swift5Parser.CASE, 0)

        def union_style_enum_case_list(self):
            return self.getTypedRuleContext(Swift5Parser.Union_style_enum_case_listContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def INDIRECT(self):
            return self.getToken(Swift5Parser.INDIRECT, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_union_style_enum_case_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_style_enum_case_clause" ):
                listener.enterUnion_style_enum_case_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_style_enum_case_clause" ):
                listener.exitUnion_style_enum_case_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnion_style_enum_case_clause" ):
                return visitor.visitUnion_style_enum_case_clause(self)
            else:
                return visitor.visitChildren(self)




    def union_style_enum_case_clause(self):

        localctx = Swift5Parser.Union_style_enum_case_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_union_style_enum_case_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1449
                self.attributes()


            self.state = 1453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.INDIRECT:
                self.state = 1452
                self.match(Swift5Parser.INDIRECT)


            self.state = 1455
            self.match(Swift5Parser.CASE)
            self.state = 1456
            self.union_style_enum_case_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Union_style_enum_case_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def union_style_enum_case(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Union_style_enum_caseContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Union_style_enum_caseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_union_style_enum_case_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_style_enum_case_list" ):
                listener.enterUnion_style_enum_case_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_style_enum_case_list" ):
                listener.exitUnion_style_enum_case_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnion_style_enum_case_list" ):
                return visitor.visitUnion_style_enum_case_list(self)
            else:
                return visitor.visitChildren(self)




    def union_style_enum_case_list(self):

        localctx = Swift5Parser.Union_style_enum_case_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_union_style_enum_case_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1458
            self.union_style_enum_case()
            self.state = 1463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Swift5Parser.COMMA:
                self.state = 1459
                self.match(Swift5Parser.COMMA)
                self.state = 1460
                self.union_style_enum_case()
                self.state = 1465
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Union_style_enum_caseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opaque_type(self):
            return self.getTypedRuleContext(Swift5Parser.Opaque_typeContext,0)


        def enum_case_name(self):
            return self.getTypedRuleContext(Swift5Parser.Enum_case_nameContext,0)


        def tuple_type(self):
            return self.getTypedRuleContext(Swift5Parser.Tuple_typeContext,0)


        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def type(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_union_style_enum_case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_style_enum_case" ):
                listener.enterUnion_style_enum_case(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_style_enum_case" ):
                listener.exitUnion_style_enum_case(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnion_style_enum_case" ):
                return visitor.visitUnion_style_enum_case(self)
            else:
                return visitor.visitChildren(self)




    def union_style_enum_case(self):

        localctx = Swift5Parser.Union_style_enum_caseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_union_style_enum_case)
        try:
            self.state = 1475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1466
                self.opaque_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1467
                self.enum_case_name()
                self.state = 1473
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1468
                    self.tuple_type()

                elif la_ == 2:
                    self.state = 1469
                    self.match(Swift5Parser.LPAREN)
                    self.state = 1470
                    self.type(0)
                    self.state = 1471
                    self.match(Swift5Parser.RPAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_enum_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_name" ):
                listener.enterEnum_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_name" ):
                listener.exitEnum_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_name" ):
                return visitor.visitEnum_name(self)
            else:
                return visitor.visitChildren(self)




    def enum_name(self):

        localctx = Swift5Parser.Enum_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_enum_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1477
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_case_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_enum_case_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_case_name" ):
                listener.enterEnum_case_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_case_name" ):
                listener.exitEnum_case_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_case_name" ):
                return visitor.visitEnum_case_name(self)
            else:
                return visitor.visitChildren(self)




    def enum_case_name(self):

        localctx = Swift5Parser.Enum_case_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_enum_case_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1479
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raw_value_style_enumContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(Swift5Parser.ENUM, 0)

        def enum_name(self):
            return self.getTypedRuleContext(Swift5Parser.Enum_nameContext,0)


        def type_inheritance_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Type_inheritance_clauseContext,0)


        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def raw_value_style_enum_members(self):
            return self.getTypedRuleContext(Swift5Parser.Raw_value_style_enum_membersContext,0)


        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def generic_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_clauseContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_raw_value_style_enum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaw_value_style_enum" ):
                listener.enterRaw_value_style_enum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaw_value_style_enum" ):
                listener.exitRaw_value_style_enum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaw_value_style_enum" ):
                return visitor.visitRaw_value_style_enum(self)
            else:
                return visitor.visitChildren(self)




    def raw_value_style_enum(self):

        localctx = Swift5Parser.Raw_value_style_enumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_raw_value_style_enum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1481
            self.match(Swift5Parser.ENUM)
            self.state = 1482
            self.enum_name()
            self.state = 1484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.LT:
                self.state = 1483
                self.generic_parameter_clause()


            self.state = 1486
            self.type_inheritance_clause()
            self.state = 1488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.WHERE:
                self.state = 1487
                self.generic_where_clause()


            self.state = 1490
            self.match(Swift5Parser.LCURLY)
            self.state = 1491
            self.raw_value_style_enum_members()
            self.state = 1492
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raw_value_style_enum_membersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def raw_value_style_enum_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Raw_value_style_enum_memberContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Raw_value_style_enum_memberContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_raw_value_style_enum_members

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaw_value_style_enum_members" ):
                listener.enterRaw_value_style_enum_members(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaw_value_style_enum_members" ):
                listener.exitRaw_value_style_enum_members(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaw_value_style_enum_members" ):
                return visitor.visitRaw_value_style_enum_members(self)
            else:
                return visitor.visitChildren(self)




    def raw_value_style_enum_members(self):

        localctx = Swift5Parser.Raw_value_style_enum_membersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_raw_value_style_enum_members)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1495 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1494
                self.raw_value_style_enum_member()
                self.state = 1497 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.CASE) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.STRUCT) | (1 << Swift5Parser.INDIRECT) | (1 << Swift5Parser.INIT) | (1 << Swift5Parser.DEINIT) | (1 << Swift5Parser.EXTENSION) | (1 << Swift5Parser.SUBSCRIPT) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.PRECEDENCE_GROUP) | (1 << Swift5Parser.POSTFIX) | (1 << Swift5Parser.TYPEALIAS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Swift5Parser.CONVENIENCE - 66)) | (1 << (Swift5Parser.DYNAMIC - 66)) | (1 << (Swift5Parser.LAZY - 66)) | (1 << (Swift5Parser.OPTIONAL - 66)) | (1 << (Swift5Parser.OVERRIDE - 66)) | (1 << (Swift5Parser.REQUIRED - 66)) | (1 << (Swift5Parser.STATIC - 66)) | (1 << (Swift5Parser.WEAK - 66)) | (1 << (Swift5Parser.UNOWNED - 66)) | (1 << (Swift5Parser.MUTATING - 66)) | (1 << (Swift5Parser.NONMUTATING - 66)) | (1 << (Swift5Parser.FILE_PRIVATE - 66)) | (1 << (Swift5Parser.SOURCE_LOCATION - 66)) | (1 << (Swift5Parser.ERROR - 66)) | (1 << (Swift5Parser.WARNING - 66)) | (1 << (Swift5Parser.HASH_IF - 66)))) != 0) or _la==Swift5Parser.AT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raw_value_style_enum_memberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(Swift5Parser.DeclarationContext,0)


        def raw_value_style_enum_case_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Raw_value_style_enum_case_clauseContext,0)


        def compiler_control_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Compiler_control_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_raw_value_style_enum_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaw_value_style_enum_member" ):
                listener.enterRaw_value_style_enum_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaw_value_style_enum_member" ):
                listener.exitRaw_value_style_enum_member(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaw_value_style_enum_member" ):
                return visitor.visitRaw_value_style_enum_member(self)
            else:
                return visitor.visitChildren(self)




    def raw_value_style_enum_member(self):

        localctx = Swift5Parser.Raw_value_style_enum_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_raw_value_style_enum_member)
        try:
            self.state = 1502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1499
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1500
                self.raw_value_style_enum_case_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1501
                self.compiler_control_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raw_value_style_enum_case_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(Swift5Parser.CASE, 0)

        def raw_value_style_enum_case_list(self):
            return self.getTypedRuleContext(Swift5Parser.Raw_value_style_enum_case_listContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_raw_value_style_enum_case_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaw_value_style_enum_case_clause" ):
                listener.enterRaw_value_style_enum_case_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaw_value_style_enum_case_clause" ):
                listener.exitRaw_value_style_enum_case_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaw_value_style_enum_case_clause" ):
                return visitor.visitRaw_value_style_enum_case_clause(self)
            else:
                return visitor.visitChildren(self)




    def raw_value_style_enum_case_clause(self):

        localctx = Swift5Parser.Raw_value_style_enum_case_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_raw_value_style_enum_case_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1504
                self.attributes()


            self.state = 1507
            self.match(Swift5Parser.CASE)
            self.state = 1508
            self.raw_value_style_enum_case_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raw_value_style_enum_case_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def raw_value_style_enum_case(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Raw_value_style_enum_caseContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Raw_value_style_enum_caseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_raw_value_style_enum_case_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaw_value_style_enum_case_list" ):
                listener.enterRaw_value_style_enum_case_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaw_value_style_enum_case_list" ):
                listener.exitRaw_value_style_enum_case_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaw_value_style_enum_case_list" ):
                return visitor.visitRaw_value_style_enum_case_list(self)
            else:
                return visitor.visitChildren(self)




    def raw_value_style_enum_case_list(self):

        localctx = Swift5Parser.Raw_value_style_enum_case_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_raw_value_style_enum_case_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self.raw_value_style_enum_case()
            self.state = 1515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Swift5Parser.COMMA:
                self.state = 1511
                self.match(Swift5Parser.COMMA)
                self.state = 1512
                self.raw_value_style_enum_case()
                self.state = 1517
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raw_value_style_enum_caseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_case_name(self):
            return self.getTypedRuleContext(Swift5Parser.Enum_case_nameContext,0)


        def raw_value_assignment(self):
            return self.getTypedRuleContext(Swift5Parser.Raw_value_assignmentContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_raw_value_style_enum_case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaw_value_style_enum_case" ):
                listener.enterRaw_value_style_enum_case(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaw_value_style_enum_case" ):
                listener.exitRaw_value_style_enum_case(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaw_value_style_enum_case" ):
                return visitor.visitRaw_value_style_enum_case(self)
            else:
                return visitor.visitChildren(self)




    def raw_value_style_enum_case(self):

        localctx = Swift5Parser.Raw_value_style_enum_caseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_raw_value_style_enum_case)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1518
            self.enum_case_name()
            self.state = 1520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.EQUAL:
                self.state = 1519
                self.raw_value_assignment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raw_value_assignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(Swift5Parser.EQUAL, 0)

        def raw_value_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Raw_value_literalContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_raw_value_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaw_value_assignment" ):
                listener.enterRaw_value_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaw_value_assignment" ):
                listener.exitRaw_value_assignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaw_value_assignment" ):
                return visitor.visitRaw_value_assignment(self)
            else:
                return visitor.visitChildren(self)




    def raw_value_assignment(self):

        localctx = Swift5Parser.Raw_value_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_raw_value_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            self.match(Swift5Parser.EQUAL)
            self.state = 1523
            self.raw_value_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raw_value_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Numeric_literalContext,0)


        def static_string_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Static_string_literalContext,0)


        def boolean_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Boolean_literalContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_raw_value_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaw_value_literal" ):
                listener.enterRaw_value_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaw_value_literal" ):
                listener.exitRaw_value_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaw_value_literal" ):
                return visitor.visitRaw_value_literal(self)
            else:
                return visitor.visitChildren(self)




    def raw_value_literal(self):

        localctx = Swift5Parser.Raw_value_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_raw_value_literal)
        try:
            self.state = 1528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1525
                self.numeric_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1526
                self.static_string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1527
                self.boolean_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(Swift5Parser.STRUCT, 0)

        def struct_name(self):
            return self.getTypedRuleContext(Swift5Parser.Struct_nameContext,0)


        def struct_body(self):
            return self.getTypedRuleContext(Swift5Parser.Struct_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def access_level_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Access_level_modifierContext,0)


        def generic_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_clauseContext,0)


        def type_inheritance_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Type_inheritance_clauseContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_struct_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_declaration" ):
                listener.enterStruct_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_declaration" ):
                listener.exitStruct_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_declaration" ):
                return visitor.visitStruct_declaration(self)
            else:
                return visitor.visitChildren(self)




    def struct_declaration(self):

        localctx = Swift5Parser.Struct_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_struct_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1530
                self.attributes()


            self.state = 1534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Swift5Parser.INTERNAL - 20)) | (1 << (Swift5Parser.OPEN - 20)) | (1 << (Swift5Parser.PRIVATE - 20)) | (1 << (Swift5Parser.PUBLIC - 20)) | (1 << (Swift5Parser.FILE_PRIVATE - 20)))) != 0):
                self.state = 1533
                self.access_level_modifier()


            self.state = 1536
            self.match(Swift5Parser.STRUCT)
            self.state = 1537
            self.struct_name()
            self.state = 1539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.LT:
                self.state = 1538
                self.generic_parameter_clause()


            self.state = 1542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.COLON:
                self.state = 1541
                self.type_inheritance_clause()


            self.state = 1545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.WHERE:
                self.state = 1544
                self.generic_where_clause()


            self.state = 1547
            self.struct_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_struct_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_name" ):
                listener.enterStruct_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_name" ):
                listener.exitStruct_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_name" ):
                return visitor.visitStruct_name(self)
            else:
                return visitor.visitChildren(self)




    def struct_name(self):

        localctx = Swift5Parser.Struct_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_struct_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1549
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def struct_members(self):
            return self.getTypedRuleContext(Swift5Parser.Struct_membersContext,0)


        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_struct_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_body" ):
                listener.enterStruct_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_body" ):
                listener.exitStruct_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_body" ):
                return visitor.visitStruct_body(self)
            else:
                return visitor.visitChildren(self)




    def struct_body(self):

        localctx = Swift5Parser.Struct_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_struct_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self.match(Swift5Parser.LCURLY)
            self.state = 1552
            self.struct_members()
            self.state = 1553
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_membersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Struct_memberContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Struct_memberContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_struct_members

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_members" ):
                listener.enterStruct_members(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_members" ):
                listener.exitStruct_members(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_members" ):
                return visitor.visitStruct_members(self)
            else:
                return visitor.visitChildren(self)




    def struct_members(self):

        localctx = Swift5Parser.Struct_membersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_struct_members)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.STRUCT) | (1 << Swift5Parser.INDIRECT) | (1 << Swift5Parser.INIT) | (1 << Swift5Parser.DEINIT) | (1 << Swift5Parser.EXTENSION) | (1 << Swift5Parser.SUBSCRIPT) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.PRECEDENCE_GROUP) | (1 << Swift5Parser.POSTFIX) | (1 << Swift5Parser.TYPEALIAS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Swift5Parser.CONVENIENCE - 66)) | (1 << (Swift5Parser.DYNAMIC - 66)) | (1 << (Swift5Parser.LAZY - 66)) | (1 << (Swift5Parser.OPTIONAL - 66)) | (1 << (Swift5Parser.OVERRIDE - 66)) | (1 << (Swift5Parser.REQUIRED - 66)) | (1 << (Swift5Parser.STATIC - 66)) | (1 << (Swift5Parser.WEAK - 66)) | (1 << (Swift5Parser.UNOWNED - 66)) | (1 << (Swift5Parser.MUTATING - 66)) | (1 << (Swift5Parser.NONMUTATING - 66)) | (1 << (Swift5Parser.FILE_PRIVATE - 66)) | (1 << (Swift5Parser.SOURCE_LOCATION - 66)) | (1 << (Swift5Parser.ERROR - 66)) | (1 << (Swift5Parser.WARNING - 66)) | (1 << (Swift5Parser.HASH_IF - 66)))) != 0) or _la==Swift5Parser.AT:
                self.state = 1555
                self.struct_member()
                self.state = 1560
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_memberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(Swift5Parser.DeclarationContext,0)


        def compiler_control_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Compiler_control_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_struct_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_member" ):
                listener.enterStruct_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_member" ):
                listener.exitStruct_member(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_member" ):
                return visitor.visitStruct_member(self)
            else:
                return visitor.visitChildren(self)




    def struct_member(self):

        localctx = Swift5Parser.Struct_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_struct_member)
        try:
            self.state = 1563
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.CLASS, Swift5Parser.ENUM, Swift5Parser.FUNC, Swift5Parser.IMPORT, Swift5Parser.INTERNAL, Swift5Parser.FINAL, Swift5Parser.OPEN, Swift5Parser.PRIVATE, Swift5Parser.PUBLIC, Swift5Parser.LET, Swift5Parser.VAR, Swift5Parser.PROTOCOL, Swift5Parser.STRUCT, Swift5Parser.INDIRECT, Swift5Parser.INIT, Swift5Parser.DEINIT, Swift5Parser.EXTENSION, Swift5Parser.SUBSCRIPT, Swift5Parser.PREFIX, Swift5Parser.INFIX, Swift5Parser.PRECEDENCE_GROUP, Swift5Parser.POSTFIX, Swift5Parser.TYPEALIAS, Swift5Parser.CONVENIENCE, Swift5Parser.DYNAMIC, Swift5Parser.LAZY, Swift5Parser.OPTIONAL, Swift5Parser.OVERRIDE, Swift5Parser.REQUIRED, Swift5Parser.STATIC, Swift5Parser.WEAK, Swift5Parser.UNOWNED, Swift5Parser.MUTATING, Swift5Parser.NONMUTATING, Swift5Parser.FILE_PRIVATE, Swift5Parser.AT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1561
                self.declaration()
                pass
            elif token in [Swift5Parser.SOURCE_LOCATION, Swift5Parser.ERROR, Swift5Parser.WARNING, Swift5Parser.HASH_IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1562
                self.compiler_control_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Swift5Parser.CLASS, 0)

        def class_name(self):
            return self.getTypedRuleContext(Swift5Parser.Class_nameContext,0)


        def class_body(self):
            return self.getTypedRuleContext(Swift5Parser.Class_bodyContext,0)


        def FINAL(self):
            return self.getToken(Swift5Parser.FINAL, 0)

        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def generic_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_clauseContext,0)


        def type_inheritance_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Type_inheritance_clauseContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def access_level_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Access_level_modifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_class_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_declaration" ):
                listener.enterClass_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_declaration" ):
                listener.exitClass_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_declaration" ):
                return visitor.visitClass_declaration(self)
            else:
                return visitor.visitChildren(self)




    def class_declaration(self):

        localctx = Swift5Parser.Class_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_class_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1565
                self.attributes()


            self.state = 1578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Swift5Parser.INTERNAL - 20)) | (1 << (Swift5Parser.OPEN - 20)) | (1 << (Swift5Parser.PRIVATE - 20)) | (1 << (Swift5Parser.PUBLIC - 20)) | (1 << (Swift5Parser.FILE_PRIVATE - 20)))) != 0):
                    self.state = 1568
                    self.access_level_modifier()


                self.state = 1572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Swift5Parser.FINAL:
                    self.state = 1571
                    self.match(Swift5Parser.FINAL)


                pass

            elif la_ == 2:
                self.state = 1574
                self.match(Swift5Parser.FINAL)
                self.state = 1576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Swift5Parser.INTERNAL - 20)) | (1 << (Swift5Parser.OPEN - 20)) | (1 << (Swift5Parser.PRIVATE - 20)) | (1 << (Swift5Parser.PUBLIC - 20)) | (1 << (Swift5Parser.FILE_PRIVATE - 20)))) != 0):
                    self.state = 1575
                    self.access_level_modifier()


                pass


            self.state = 1580
            self.match(Swift5Parser.CLASS)
            self.state = 1581
            self.class_name()
            self.state = 1583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.LT:
                self.state = 1582
                self.generic_parameter_clause()


            self.state = 1586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.COLON:
                self.state = 1585
                self.type_inheritance_clause()


            self.state = 1589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.WHERE:
                self.state = 1588
                self.generic_where_clause()


            self.state = 1591
            self.class_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_class_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_name" ):
                listener.enterClass_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_name" ):
                listener.exitClass_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_name" ):
                return visitor.visitClass_name(self)
            else:
                return visitor.visitChildren(self)




    def class_name(self):

        localctx = Swift5Parser.Class_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_class_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1593
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def class_members(self):
            return self.getTypedRuleContext(Swift5Parser.Class_membersContext,0)


        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_class_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_body" ):
                listener.enterClass_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_body" ):
                listener.exitClass_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_body" ):
                return visitor.visitClass_body(self)
            else:
                return visitor.visitChildren(self)




    def class_body(self):

        localctx = Swift5Parser.Class_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_class_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1595
            self.match(Swift5Parser.LCURLY)
            self.state = 1596
            self.class_members()
            self.state = 1597
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_membersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Class_memberContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Class_memberContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_class_members

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_members" ):
                listener.enterClass_members(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_members" ):
                listener.exitClass_members(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_members" ):
                return visitor.visitClass_members(self)
            else:
                return visitor.visitChildren(self)




    def class_members(self):

        localctx = Swift5Parser.Class_membersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_class_members)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.STRUCT) | (1 << Swift5Parser.INDIRECT) | (1 << Swift5Parser.INIT) | (1 << Swift5Parser.DEINIT) | (1 << Swift5Parser.EXTENSION) | (1 << Swift5Parser.SUBSCRIPT) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.PRECEDENCE_GROUP) | (1 << Swift5Parser.POSTFIX) | (1 << Swift5Parser.TYPEALIAS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Swift5Parser.CONVENIENCE - 66)) | (1 << (Swift5Parser.DYNAMIC - 66)) | (1 << (Swift5Parser.LAZY - 66)) | (1 << (Swift5Parser.OPTIONAL - 66)) | (1 << (Swift5Parser.OVERRIDE - 66)) | (1 << (Swift5Parser.REQUIRED - 66)) | (1 << (Swift5Parser.STATIC - 66)) | (1 << (Swift5Parser.WEAK - 66)) | (1 << (Swift5Parser.UNOWNED - 66)) | (1 << (Swift5Parser.MUTATING - 66)) | (1 << (Swift5Parser.NONMUTATING - 66)) | (1 << (Swift5Parser.FILE_PRIVATE - 66)) | (1 << (Swift5Parser.SOURCE_LOCATION - 66)) | (1 << (Swift5Parser.ERROR - 66)) | (1 << (Swift5Parser.WARNING - 66)) | (1 << (Swift5Parser.HASH_IF - 66)))) != 0) or _la==Swift5Parser.AT:
                self.state = 1599
                self.class_member()
                self.state = 1604
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_memberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(Swift5Parser.DeclarationContext,0)


        def compiler_control_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Compiler_control_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_class_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_member" ):
                listener.enterClass_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_member" ):
                listener.exitClass_member(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_member" ):
                return visitor.visitClass_member(self)
            else:
                return visitor.visitChildren(self)




    def class_member(self):

        localctx = Swift5Parser.Class_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_class_member)
        try:
            self.state = 1607
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.CLASS, Swift5Parser.ENUM, Swift5Parser.FUNC, Swift5Parser.IMPORT, Swift5Parser.INTERNAL, Swift5Parser.FINAL, Swift5Parser.OPEN, Swift5Parser.PRIVATE, Swift5Parser.PUBLIC, Swift5Parser.LET, Swift5Parser.VAR, Swift5Parser.PROTOCOL, Swift5Parser.STRUCT, Swift5Parser.INDIRECT, Swift5Parser.INIT, Swift5Parser.DEINIT, Swift5Parser.EXTENSION, Swift5Parser.SUBSCRIPT, Swift5Parser.PREFIX, Swift5Parser.INFIX, Swift5Parser.PRECEDENCE_GROUP, Swift5Parser.POSTFIX, Swift5Parser.TYPEALIAS, Swift5Parser.CONVENIENCE, Swift5Parser.DYNAMIC, Swift5Parser.LAZY, Swift5Parser.OPTIONAL, Swift5Parser.OVERRIDE, Swift5Parser.REQUIRED, Swift5Parser.STATIC, Swift5Parser.WEAK, Swift5Parser.UNOWNED, Swift5Parser.MUTATING, Swift5Parser.NONMUTATING, Swift5Parser.FILE_PRIVATE, Swift5Parser.AT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1605
                self.declaration()
                pass
            elif token in [Swift5Parser.SOURCE_LOCATION, Swift5Parser.ERROR, Swift5Parser.WARNING, Swift5Parser.HASH_IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1606
                self.compiler_control_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTOCOL(self):
            return self.getToken(Swift5Parser.PROTOCOL, 0)

        def protocol_name(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_nameContext,0)


        def protocol_body(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def access_level_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Access_level_modifierContext,0)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def CLASS(self):
            return self.getToken(Swift5Parser.CLASS, 0)

        def type_inheritance_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Type_inheritance_clauseContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_declaration" ):
                listener.enterProtocol_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_declaration" ):
                listener.exitProtocol_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProtocol_declaration" ):
                return visitor.visitProtocol_declaration(self)
            else:
                return visitor.visitChildren(self)




    def protocol_declaration(self):

        localctx = Swift5Parser.Protocol_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_protocol_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1609
                self.attributes()


            self.state = 1613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Swift5Parser.INTERNAL - 20)) | (1 << (Swift5Parser.OPEN - 20)) | (1 << (Swift5Parser.PRIVATE - 20)) | (1 << (Swift5Parser.PUBLIC - 20)) | (1 << (Swift5Parser.FILE_PRIVATE - 20)))) != 0):
                self.state = 1612
                self.access_level_modifier()


            self.state = 1615
            self.match(Swift5Parser.PROTOCOL)
            self.state = 1616
            self.protocol_name()
            self.state = 1620
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1617
                self.match(Swift5Parser.COLON)
                self.state = 1618
                self.match(Swift5Parser.CLASS)

            elif la_ == 2:
                self.state = 1619
                self.type_inheritance_clause()


            self.state = 1623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.WHERE:
                self.state = 1622
                self.generic_where_clause()


            self.state = 1625
            self.protocol_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_name" ):
                listener.enterProtocol_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_name" ):
                listener.exitProtocol_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProtocol_name" ):
                return visitor.visitProtocol_name(self)
            else:
                return visitor.visitChildren(self)




    def protocol_name(self):

        localctx = Swift5Parser.Protocol_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_protocol_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1627
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def protocol_members(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_membersContext,0)


        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_body" ):
                listener.enterProtocol_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_body" ):
                listener.exitProtocol_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProtocol_body" ):
                return visitor.visitProtocol_body(self)
            else:
                return visitor.visitChildren(self)




    def protocol_body(self):

        localctx = Swift5Parser.Protocol_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_protocol_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1629
            self.match(Swift5Parser.LCURLY)
            self.state = 1630
            self.protocol_members()
            self.state = 1631
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_membersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def protocol_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Protocol_memberContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Protocol_memberContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_members

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_members" ):
                listener.enterProtocol_members(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_members" ):
                listener.exitProtocol_members(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProtocol_members" ):
                return visitor.visitProtocol_members(self)
            else:
                return visitor.visitChildren(self)




    def protocol_members(self):

        localctx = Swift5Parser.Protocol_membersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_protocol_members)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.INIT) | (1 << Swift5Parser.ASSOCIATED_TYPE) | (1 << Swift5Parser.SUBSCRIPT) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.POSTFIX) | (1 << Swift5Parser.TYPEALIAS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Swift5Parser.CONVENIENCE - 66)) | (1 << (Swift5Parser.DYNAMIC - 66)) | (1 << (Swift5Parser.LAZY - 66)) | (1 << (Swift5Parser.OPTIONAL - 66)) | (1 << (Swift5Parser.OVERRIDE - 66)) | (1 << (Swift5Parser.REQUIRED - 66)) | (1 << (Swift5Parser.STATIC - 66)) | (1 << (Swift5Parser.WEAK - 66)) | (1 << (Swift5Parser.UNOWNED - 66)) | (1 << (Swift5Parser.MUTATING - 66)) | (1 << (Swift5Parser.NONMUTATING - 66)) | (1 << (Swift5Parser.FILE_PRIVATE - 66)) | (1 << (Swift5Parser.SOURCE_LOCATION - 66)) | (1 << (Swift5Parser.ERROR - 66)) | (1 << (Swift5Parser.WARNING - 66)) | (1 << (Swift5Parser.HASH_IF - 66)))) != 0) or _la==Swift5Parser.AT:
                self.state = 1633
                self.protocol_member()
                self.state = 1638
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_memberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def protocol_member_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_member_declarationContext,0)


        def compiler_control_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Compiler_control_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_member" ):
                listener.enterProtocol_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_member" ):
                listener.exitProtocol_member(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProtocol_member" ):
                return visitor.visitProtocol_member(self)
            else:
                return visitor.visitChildren(self)




    def protocol_member(self):

        localctx = Swift5Parser.Protocol_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_protocol_member)
        try:
            self.state = 1641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.CLASS, Swift5Parser.FUNC, Swift5Parser.INTERNAL, Swift5Parser.FINAL, Swift5Parser.OPEN, Swift5Parser.PRIVATE, Swift5Parser.PUBLIC, Swift5Parser.VAR, Swift5Parser.INIT, Swift5Parser.ASSOCIATED_TYPE, Swift5Parser.SUBSCRIPT, Swift5Parser.PREFIX, Swift5Parser.INFIX, Swift5Parser.POSTFIX, Swift5Parser.TYPEALIAS, Swift5Parser.CONVENIENCE, Swift5Parser.DYNAMIC, Swift5Parser.LAZY, Swift5Parser.OPTIONAL, Swift5Parser.OVERRIDE, Swift5Parser.REQUIRED, Swift5Parser.STATIC, Swift5Parser.WEAK, Swift5Parser.UNOWNED, Swift5Parser.MUTATING, Swift5Parser.NONMUTATING, Swift5Parser.FILE_PRIVATE, Swift5Parser.AT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1639
                self.protocol_member_declaration()
                pass
            elif token in [Swift5Parser.SOURCE_LOCATION, Swift5Parser.ERROR, Swift5Parser.WARNING, Swift5Parser.HASH_IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1640
                self.compiler_control_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_member_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def protocol_property_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_property_declarationContext,0)


        def protocol_method_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_method_declarationContext,0)


        def protocol_initializer_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_initializer_declarationContext,0)


        def protocol_subscript_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_subscript_declarationContext,0)


        def protocol_associated_type_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_associated_type_declarationContext,0)


        def typealias_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Typealias_declarationContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_member_declaration" ):
                listener.enterProtocol_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_member_declaration" ):
                listener.exitProtocol_member_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProtocol_member_declaration" ):
                return visitor.visitProtocol_member_declaration(self)
            else:
                return visitor.visitChildren(self)




    def protocol_member_declaration(self):

        localctx = Swift5Parser.Protocol_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_protocol_member_declaration)
        try:
            self.state = 1649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1643
                self.protocol_property_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1644
                self.protocol_method_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1645
                self.protocol_initializer_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1646
                self.protocol_subscript_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1647
                self.protocol_associated_type_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1648
                self.typealias_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_property_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration_head(self):
            return self.getTypedRuleContext(Swift5Parser.Variable_declaration_headContext,0)


        def variable_name(self):
            return self.getTypedRuleContext(Swift5Parser.Variable_nameContext,0)


        def type_annotation(self):
            return self.getTypedRuleContext(Swift5Parser.Type_annotationContext,0)


        def getter_setter_keyword_block(self):
            return self.getTypedRuleContext(Swift5Parser.Getter_setter_keyword_blockContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_property_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_property_declaration" ):
                listener.enterProtocol_property_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_property_declaration" ):
                listener.exitProtocol_property_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProtocol_property_declaration" ):
                return visitor.visitProtocol_property_declaration(self)
            else:
                return visitor.visitChildren(self)




    def protocol_property_declaration(self):

        localctx = Swift5Parser.Protocol_property_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_protocol_property_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1651
            self.variable_declaration_head()
            self.state = 1652
            self.variable_name()
            self.state = 1653
            self.type_annotation()
            self.state = 1654
            self.getter_setter_keyword_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_head(self):
            return self.getTypedRuleContext(Swift5Parser.Function_headContext,0)


        def function_name(self):
            return self.getTypedRuleContext(Swift5Parser.Function_nameContext,0)


        def function_signature(self):
            return self.getTypedRuleContext(Swift5Parser.Function_signatureContext,0)


        def generic_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_clauseContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_method_declaration" ):
                listener.enterProtocol_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_method_declaration" ):
                listener.exitProtocol_method_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProtocol_method_declaration" ):
                return visitor.visitProtocol_method_declaration(self)
            else:
                return visitor.visitChildren(self)




    def protocol_method_declaration(self):

        localctx = Swift5Parser.Protocol_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_protocol_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1656
            self.function_head()
            self.state = 1657
            self.function_name()
            self.state = 1659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.LT:
                self.state = 1658
                self.generic_parameter_clause()


            self.state = 1661
            self.function_signature()
            self.state = 1663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.WHERE:
                self.state = 1662
                self.generic_where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_initializer_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer_head(self):
            return self.getTypedRuleContext(Swift5Parser.Initializer_headContext,0)


        def parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Parameter_clauseContext,0)


        def RETHROWS(self):
            return self.getToken(Swift5Parser.RETHROWS, 0)

        def generic_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_clauseContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def THROWS(self):
            return self.getToken(Swift5Parser.THROWS, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_initializer_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_initializer_declaration" ):
                listener.enterProtocol_initializer_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_initializer_declaration" ):
                listener.exitProtocol_initializer_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProtocol_initializer_declaration" ):
                return visitor.visitProtocol_initializer_declaration(self)
            else:
                return visitor.visitChildren(self)




    def protocol_initializer_declaration(self):

        localctx = Swift5Parser.Protocol_initializer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_protocol_initializer_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1665
            self.initializer_head()
            self.state = 1667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.LT:
                self.state = 1666
                self.generic_parameter_clause()


            self.state = 1669
            self.parameter_clause()
            self.state = 1674
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.CLASS, Swift5Parser.FUNC, Swift5Parser.INTERNAL, Swift5Parser.FINAL, Swift5Parser.OPEN, Swift5Parser.PRIVATE, Swift5Parser.PUBLIC, Swift5Parser.WHERE, Swift5Parser.VAR, Swift5Parser.THROWS, Swift5Parser.INIT, Swift5Parser.ASSOCIATED_TYPE, Swift5Parser.SUBSCRIPT, Swift5Parser.PREFIX, Swift5Parser.INFIX, Swift5Parser.POSTFIX, Swift5Parser.TYPEALIAS, Swift5Parser.CONVENIENCE, Swift5Parser.DYNAMIC, Swift5Parser.LAZY, Swift5Parser.OPTIONAL, Swift5Parser.OVERRIDE, Swift5Parser.REQUIRED, Swift5Parser.STATIC, Swift5Parser.WEAK, Swift5Parser.UNOWNED, Swift5Parser.MUTATING, Swift5Parser.NONMUTATING, Swift5Parser.FILE_PRIVATE, Swift5Parser.SOURCE_LOCATION, Swift5Parser.ERROR, Swift5Parser.WARNING, Swift5Parser.HASH_IF, Swift5Parser.RCURLY, Swift5Parser.AT]:
                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Swift5Parser.THROWS:
                    self.state = 1670
                    self.match(Swift5Parser.THROWS)


                pass
            elif token in [Swift5Parser.RETHROWS]:
                self.state = 1673
                self.match(Swift5Parser.RETHROWS)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.WHERE:
                self.state = 1676
                self.generic_where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_subscript_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript_head(self):
            return self.getTypedRuleContext(Swift5Parser.Subscript_headContext,0)


        def subscript_result(self):
            return self.getTypedRuleContext(Swift5Parser.Subscript_resultContext,0)


        def getter_setter_keyword_block(self):
            return self.getTypedRuleContext(Swift5Parser.Getter_setter_keyword_blockContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_subscript_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_subscript_declaration" ):
                listener.enterProtocol_subscript_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_subscript_declaration" ):
                listener.exitProtocol_subscript_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProtocol_subscript_declaration" ):
                return visitor.visitProtocol_subscript_declaration(self)
            else:
                return visitor.visitChildren(self)




    def protocol_subscript_declaration(self):

        localctx = Swift5Parser.Protocol_subscript_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_protocol_subscript_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1679
            self.subscript_head()
            self.state = 1680
            self.subscript_result()
            self.state = 1682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.WHERE:
                self.state = 1681
                self.generic_where_clause()


            self.state = 1684
            self.getter_setter_keyword_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_associated_type_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSOCIATED_TYPE(self):
            return self.getToken(Swift5Parser.ASSOCIATED_TYPE, 0)

        def typealias_name(self):
            return self.getTypedRuleContext(Swift5Parser.Typealias_nameContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def access_level_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Access_level_modifierContext,0)


        def type_inheritance_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Type_inheritance_clauseContext,0)


        def typealias_assignment(self):
            return self.getTypedRuleContext(Swift5Parser.Typealias_assignmentContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_associated_type_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_associated_type_declaration" ):
                listener.enterProtocol_associated_type_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_associated_type_declaration" ):
                listener.exitProtocol_associated_type_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProtocol_associated_type_declaration" ):
                return visitor.visitProtocol_associated_type_declaration(self)
            else:
                return visitor.visitChildren(self)




    def protocol_associated_type_declaration(self):

        localctx = Swift5Parser.Protocol_associated_type_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_protocol_associated_type_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1686
                self.attributes()


            self.state = 1690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Swift5Parser.INTERNAL - 20)) | (1 << (Swift5Parser.OPEN - 20)) | (1 << (Swift5Parser.PRIVATE - 20)) | (1 << (Swift5Parser.PUBLIC - 20)) | (1 << (Swift5Parser.FILE_PRIVATE - 20)))) != 0):
                self.state = 1689
                self.access_level_modifier()


            self.state = 1692
            self.match(Swift5Parser.ASSOCIATED_TYPE)
            self.state = 1693
            self.typealias_name()
            self.state = 1695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.COLON:
                self.state = 1694
                self.type_inheritance_clause()


            self.state = 1698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.EQUAL:
                self.state = 1697
                self.typealias_assignment()


            self.state = 1701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.WHERE:
                self.state = 1700
                self.generic_where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initializer_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer_head(self):
            return self.getTypedRuleContext(Swift5Parser.Initializer_headContext,0)


        def parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Parameter_clauseContext,0)


        def initializer_body(self):
            return self.getTypedRuleContext(Swift5Parser.Initializer_bodyContext,0)


        def generic_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_clauseContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def THROWS(self):
            return self.getToken(Swift5Parser.THROWS, 0)

        def RETHROWS(self):
            return self.getToken(Swift5Parser.RETHROWS, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_initializer_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer_declaration" ):
                listener.enterInitializer_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer_declaration" ):
                listener.exitInitializer_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer_declaration" ):
                return visitor.visitInitializer_declaration(self)
            else:
                return visitor.visitChildren(self)




    def initializer_declaration(self):

        localctx = Swift5Parser.Initializer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_initializer_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1703
            self.initializer_head()
            self.state = 1705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.LT:
                self.state = 1704
                self.generic_parameter_clause()


            self.state = 1707
            self.parameter_clause()
            self.state = 1709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.THROWS or _la==Swift5Parser.RETHROWS:
                self.state = 1708
                _la = self._input.LA(1)
                if not(_la==Swift5Parser.THROWS or _la==Swift5Parser.RETHROWS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.WHERE:
                self.state = 1711
                self.generic_where_clause()


            self.state = 1714
            self.initializer_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initializer_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INIT(self):
            return self.getToken(Swift5Parser.INIT, 0)

        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def declaration_modifiers(self):
            return self.getTypedRuleContext(Swift5Parser.Declaration_modifiersContext,0)


        def QUESTION(self):
            return self.getToken(Swift5Parser.QUESTION, 0)

        def BANG(self):
            return self.getToken(Swift5Parser.BANG, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_initializer_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer_head" ):
                listener.enterInitializer_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer_head" ):
                listener.exitInitializer_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer_head" ):
                return visitor.visitInitializer_head(self)
            else:
                return visitor.visitChildren(self)




    def initializer_head(self):

        localctx = Swift5Parser.Initializer_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_initializer_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1716
                self.attributes()


            self.state = 1720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.POSTFIX))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Swift5Parser.CONVENIENCE - 66)) | (1 << (Swift5Parser.DYNAMIC - 66)) | (1 << (Swift5Parser.LAZY - 66)) | (1 << (Swift5Parser.OPTIONAL - 66)) | (1 << (Swift5Parser.OVERRIDE - 66)) | (1 << (Swift5Parser.REQUIRED - 66)) | (1 << (Swift5Parser.STATIC - 66)) | (1 << (Swift5Parser.WEAK - 66)) | (1 << (Swift5Parser.UNOWNED - 66)) | (1 << (Swift5Parser.MUTATING - 66)) | (1 << (Swift5Parser.NONMUTATING - 66)) | (1 << (Swift5Parser.FILE_PRIVATE - 66)))) != 0):
                self.state = 1719
                self.declaration_modifiers()


            self.state = 1722
            self.match(Swift5Parser.INIT)
            self.state = 1724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.BANG or _la==Swift5Parser.QUESTION:
                self.state = 1723
                _la = self._input.LA(1)
                if not(_la==Swift5Parser.BANG or _la==Swift5Parser.QUESTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initializer_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_initializer_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer_body" ):
                listener.enterInitializer_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer_body" ):
                listener.exitInitializer_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer_body" ):
                return visitor.visitInitializer_body(self)
            else:
                return visitor.visitChildren(self)




    def initializer_body(self):

        localctx = Swift5Parser.Initializer_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_initializer_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1726
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deinitializer_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEINIT(self):
            return self.getToken(Swift5Parser.DEINIT, 0)

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_deinitializer_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeinitializer_declaration" ):
                listener.enterDeinitializer_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeinitializer_declaration" ):
                listener.exitDeinitializer_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeinitializer_declaration" ):
                return visitor.visitDeinitializer_declaration(self)
            else:
                return visitor.visitChildren(self)




    def deinitializer_declaration(self):

        localctx = Swift5Parser.Deinitializer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_deinitializer_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1728
                self.attributes()


            self.state = 1731
            self.match(Swift5Parser.DEINIT)
            self.state = 1732
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extension_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENSION(self):
            return self.getToken(Swift5Parser.EXTENSION, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(Swift5Parser.Type_identifierContext,0)


        def extension_body(self):
            return self.getTypedRuleContext(Swift5Parser.Extension_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def access_level_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Access_level_modifierContext,0)


        def type_inheritance_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Type_inheritance_clauseContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_extension_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtension_declaration" ):
                listener.enterExtension_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtension_declaration" ):
                listener.exitExtension_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtension_declaration" ):
                return visitor.visitExtension_declaration(self)
            else:
                return visitor.visitChildren(self)




    def extension_declaration(self):

        localctx = Swift5Parser.Extension_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_extension_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1734
                self.attributes()


            self.state = 1738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Swift5Parser.INTERNAL - 20)) | (1 << (Swift5Parser.OPEN - 20)) | (1 << (Swift5Parser.PRIVATE - 20)) | (1 << (Swift5Parser.PUBLIC - 20)) | (1 << (Swift5Parser.FILE_PRIVATE - 20)))) != 0):
                self.state = 1737
                self.access_level_modifier()


            self.state = 1740
            self.match(Swift5Parser.EXTENSION)
            self.state = 1741
            self.type_identifier()
            self.state = 1743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.COLON:
                self.state = 1742
                self.type_inheritance_clause()


            self.state = 1746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.WHERE:
                self.state = 1745
                self.generic_where_clause()


            self.state = 1748
            self.extension_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extension_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def extension_members(self):
            return self.getTypedRuleContext(Swift5Parser.Extension_membersContext,0)


        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_extension_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtension_body" ):
                listener.enterExtension_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtension_body" ):
                listener.exitExtension_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtension_body" ):
                return visitor.visitExtension_body(self)
            else:
                return visitor.visitChildren(self)




    def extension_body(self):

        localctx = Swift5Parser.Extension_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_extension_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1750
            self.match(Swift5Parser.LCURLY)
            self.state = 1751
            self.extension_members()
            self.state = 1752
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extension_membersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extension_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Extension_memberContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Extension_memberContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_extension_members

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtension_members" ):
                listener.enterExtension_members(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtension_members" ):
                listener.exitExtension_members(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtension_members" ):
                return visitor.visitExtension_members(self)
            else:
                return visitor.visitChildren(self)




    def extension_members(self):

        localctx = Swift5Parser.Extension_membersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_extension_members)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.STRUCT) | (1 << Swift5Parser.INDIRECT) | (1 << Swift5Parser.INIT) | (1 << Swift5Parser.DEINIT) | (1 << Swift5Parser.EXTENSION) | (1 << Swift5Parser.SUBSCRIPT) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.PRECEDENCE_GROUP) | (1 << Swift5Parser.POSTFIX) | (1 << Swift5Parser.TYPEALIAS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Swift5Parser.CONVENIENCE - 66)) | (1 << (Swift5Parser.DYNAMIC - 66)) | (1 << (Swift5Parser.LAZY - 66)) | (1 << (Swift5Parser.OPTIONAL - 66)) | (1 << (Swift5Parser.OVERRIDE - 66)) | (1 << (Swift5Parser.REQUIRED - 66)) | (1 << (Swift5Parser.STATIC - 66)) | (1 << (Swift5Parser.WEAK - 66)) | (1 << (Swift5Parser.UNOWNED - 66)) | (1 << (Swift5Parser.MUTATING - 66)) | (1 << (Swift5Parser.NONMUTATING - 66)) | (1 << (Swift5Parser.FILE_PRIVATE - 66)) | (1 << (Swift5Parser.SOURCE_LOCATION - 66)) | (1 << (Swift5Parser.ERROR - 66)) | (1 << (Swift5Parser.WARNING - 66)) | (1 << (Swift5Parser.HASH_IF - 66)))) != 0) or _la==Swift5Parser.AT:
                self.state = 1754
                self.extension_member()
                self.state = 1759
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extension_memberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(Swift5Parser.DeclarationContext,0)


        def compiler_control_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Compiler_control_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_extension_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtension_member" ):
                listener.enterExtension_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtension_member" ):
                listener.exitExtension_member(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtension_member" ):
                return visitor.visitExtension_member(self)
            else:
                return visitor.visitChildren(self)




    def extension_member(self):

        localctx = Swift5Parser.Extension_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_extension_member)
        try:
            self.state = 1762
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.CLASS, Swift5Parser.ENUM, Swift5Parser.FUNC, Swift5Parser.IMPORT, Swift5Parser.INTERNAL, Swift5Parser.FINAL, Swift5Parser.OPEN, Swift5Parser.PRIVATE, Swift5Parser.PUBLIC, Swift5Parser.LET, Swift5Parser.VAR, Swift5Parser.PROTOCOL, Swift5Parser.STRUCT, Swift5Parser.INDIRECT, Swift5Parser.INIT, Swift5Parser.DEINIT, Swift5Parser.EXTENSION, Swift5Parser.SUBSCRIPT, Swift5Parser.PREFIX, Swift5Parser.INFIX, Swift5Parser.PRECEDENCE_GROUP, Swift5Parser.POSTFIX, Swift5Parser.TYPEALIAS, Swift5Parser.CONVENIENCE, Swift5Parser.DYNAMIC, Swift5Parser.LAZY, Swift5Parser.OPTIONAL, Swift5Parser.OVERRIDE, Swift5Parser.REQUIRED, Swift5Parser.STATIC, Swift5Parser.WEAK, Swift5Parser.UNOWNED, Swift5Parser.MUTATING, Swift5Parser.NONMUTATING, Swift5Parser.FILE_PRIVATE, Swift5Parser.AT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1760
                self.declaration()
                pass
            elif token in [Swift5Parser.SOURCE_LOCATION, Swift5Parser.ERROR, Swift5Parser.WARNING, Swift5Parser.HASH_IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1761
                self.compiler_control_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subscript_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript_head(self):
            return self.getTypedRuleContext(Swift5Parser.Subscript_headContext,0)


        def subscript_result(self):
            return self.getTypedRuleContext(Swift5Parser.Subscript_resultContext,0)


        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def getter_setter_block(self):
            return self.getTypedRuleContext(Swift5Parser.Getter_setter_blockContext,0)


        def getter_setter_keyword_block(self):
            return self.getTypedRuleContext(Swift5Parser.Getter_setter_keyword_blockContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_subscript_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript_declaration" ):
                listener.enterSubscript_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript_declaration" ):
                listener.exitSubscript_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript_declaration" ):
                return visitor.visitSubscript_declaration(self)
            else:
                return visitor.visitChildren(self)




    def subscript_declaration(self):

        localctx = Swift5Parser.Subscript_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_subscript_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1764
            self.subscript_head()
            self.state = 1765
            self.subscript_result()
            self.state = 1767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.WHERE:
                self.state = 1766
                self.generic_where_clause()


            self.state = 1772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.state = 1769
                self.code_block()
                pass

            elif la_ == 2:
                self.state = 1770
                self.getter_setter_block()
                pass

            elif la_ == 3:
                self.state = 1771
                self.getter_setter_keyword_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subscript_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBSCRIPT(self):
            return self.getToken(Swift5Parser.SUBSCRIPT, 0)

        def parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Parameter_clauseContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def declaration_modifiers(self):
            return self.getTypedRuleContext(Swift5Parser.Declaration_modifiersContext,0)


        def generic_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_subscript_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript_head" ):
                listener.enterSubscript_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript_head" ):
                listener.exitSubscript_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript_head" ):
                return visitor.visitSubscript_head(self)
            else:
                return visitor.visitChildren(self)




    def subscript_head(self):

        localctx = Swift5Parser.Subscript_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_subscript_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 1774
                self.attributes()


            self.state = 1778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.POSTFIX))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Swift5Parser.CONVENIENCE - 66)) | (1 << (Swift5Parser.DYNAMIC - 66)) | (1 << (Swift5Parser.LAZY - 66)) | (1 << (Swift5Parser.OPTIONAL - 66)) | (1 << (Swift5Parser.OVERRIDE - 66)) | (1 << (Swift5Parser.REQUIRED - 66)) | (1 << (Swift5Parser.STATIC - 66)) | (1 << (Swift5Parser.WEAK - 66)) | (1 << (Swift5Parser.UNOWNED - 66)) | (1 << (Swift5Parser.MUTATING - 66)) | (1 << (Swift5Parser.NONMUTATING - 66)) | (1 << (Swift5Parser.FILE_PRIVATE - 66)))) != 0):
                self.state = 1777
                self.declaration_modifiers()


            self.state = 1780
            self.match(Swift5Parser.SUBSCRIPT)
            self.state = 1782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.LT:
                self.state = 1781
                self.generic_parameter_clause()


            self.state = 1784
            self.parameter_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subscript_resultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrow_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Arrow_operatorContext,0)


        def type(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_subscript_result

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript_result" ):
                listener.enterSubscript_result(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript_result" ):
                listener.exitSubscript_result(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript_result" ):
                return visitor.visitSubscript_result(self)
            else:
                return visitor.visitChildren(self)




    def subscript_result(self):

        localctx = Swift5Parser.Subscript_resultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_subscript_result)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1786
            self.arrow_operator()
            self.state = 1788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 1787
                self.attributes()


            self.state = 1790
            self.type(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefix_operator_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Prefix_operator_declarationContext,0)


        def postfix_operator_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Postfix_operator_declarationContext,0)


        def infix_operator_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Infix_operator_declarationContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_operator_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_declaration" ):
                listener.enterOperator_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_declaration" ):
                listener.exitOperator_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperator_declaration" ):
                return visitor.visitOperator_declaration(self)
            else:
                return visitor.visitChildren(self)




    def operator_declaration(self):

        localctx = Swift5Parser.Operator_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_operator_declaration)
        try:
            self.state = 1795
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.PREFIX]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1792
                self.prefix_operator_declaration()
                pass
            elif token in [Swift5Parser.POSTFIX]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1793
                self.postfix_operator_declaration()
                pass
            elif token in [Swift5Parser.INFIX]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1794
                self.infix_operator_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prefix_operator_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREFIX(self):
            return self.getToken(Swift5Parser.PREFIX, 0)

        def OPERATOR(self):
            return self.getToken(Swift5Parser.OPERATOR, 0)

        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_prefix_operator_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefix_operator_declaration" ):
                listener.enterPrefix_operator_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefix_operator_declaration" ):
                listener.exitPrefix_operator_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefix_operator_declaration" ):
                return visitor.visitPrefix_operator_declaration(self)
            else:
                return visitor.visitChildren(self)




    def prefix_operator_declaration(self):

        localctx = Swift5Parser.Prefix_operator_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_prefix_operator_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1797
            self.match(Swift5Parser.PREFIX)
            self.state = 1798
            self.match(Swift5Parser.OPERATOR)
            self.state = 1799
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_operator_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POSTFIX(self):
            return self.getToken(Swift5Parser.POSTFIX, 0)

        def OPERATOR(self):
            return self.getToken(Swift5Parser.OPERATOR, 0)

        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_postfix_operator_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix_operator_declaration" ):
                listener.enterPostfix_operator_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix_operator_declaration" ):
                listener.exitPostfix_operator_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfix_operator_declaration" ):
                return visitor.visitPostfix_operator_declaration(self)
            else:
                return visitor.visitChildren(self)




    def postfix_operator_declaration(self):

        localctx = Swift5Parser.Postfix_operator_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_postfix_operator_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1801
            self.match(Swift5Parser.POSTFIX)
            self.state = 1802
            self.match(Swift5Parser.OPERATOR)
            self.state = 1803
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Infix_operator_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INFIX(self):
            return self.getToken(Swift5Parser.INFIX, 0)

        def OPERATOR(self):
            return self.getToken(Swift5Parser.OPERATOR, 0)

        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def infix_operator_group(self):
            return self.getTypedRuleContext(Swift5Parser.Infix_operator_groupContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_infix_operator_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfix_operator_declaration" ):
                listener.enterInfix_operator_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfix_operator_declaration" ):
                listener.exitInfix_operator_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInfix_operator_declaration" ):
                return visitor.visitInfix_operator_declaration(self)
            else:
                return visitor.visitChildren(self)




    def infix_operator_declaration(self):

        localctx = Swift5Parser.Infix_operator_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_infix_operator_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1805
            self.match(Swift5Parser.INFIX)
            self.state = 1806
            self.match(Swift5Parser.OPERATOR)
            self.state = 1807
            self.operator()
            self.state = 1809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.state = 1808
                self.infix_operator_group()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Infix_operator_groupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def precedence_group_name(self):
            return self.getTypedRuleContext(Swift5Parser.Precedence_group_nameContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_infix_operator_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfix_operator_group" ):
                listener.enterInfix_operator_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfix_operator_group" ):
                listener.exitInfix_operator_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInfix_operator_group" ):
                return visitor.visitInfix_operator_group(self)
            else:
                return visitor.visitChildren(self)




    def infix_operator_group(self):

        localctx = Swift5Parser.Infix_operator_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_infix_operator_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1811
            self.match(Swift5Parser.COLON)
            self.state = 1812
            self.precedence_group_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precedence_group_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRECEDENCE_GROUP(self):
            return self.getToken(Swift5Parser.PRECEDENCE_GROUP, 0)

        def precedence_group_name(self):
            return self.getTypedRuleContext(Swift5Parser.Precedence_group_nameContext,0)


        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def precedence_group_attributes(self):
            return self.getTypedRuleContext(Swift5Parser.Precedence_group_attributesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_precedence_group_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedence_group_declaration" ):
                listener.enterPrecedence_group_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedence_group_declaration" ):
                listener.exitPrecedence_group_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedence_group_declaration" ):
                return visitor.visitPrecedence_group_declaration(self)
            else:
                return visitor.visitChildren(self)




    def precedence_group_declaration(self):

        localctx = Swift5Parser.Precedence_group_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_precedence_group_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1814
            self.match(Swift5Parser.PRECEDENCE_GROUP)
            self.state = 1815
            self.precedence_group_name()
            self.state = 1816
            self.match(Swift5Parser.LCURLY)
            self.state = 1818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.HIGHER_THAN) | (1 << Swift5Parser.LOWER_THAN) | (1 << Swift5Parser.ASSIGNMENT) | (1 << Swift5Parser.ASSOCIATIVITY))) != 0):
                self.state = 1817
                self.precedence_group_attributes()


            self.state = 1820
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precedence_group_attributesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedence_group_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Precedence_group_attributeContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Precedence_group_attributeContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_precedence_group_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedence_group_attributes" ):
                listener.enterPrecedence_group_attributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedence_group_attributes" ):
                listener.exitPrecedence_group_attributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedence_group_attributes" ):
                return visitor.visitPrecedence_group_attributes(self)
            else:
                return visitor.visitChildren(self)




    def precedence_group_attributes(self):

        localctx = Swift5Parser.Precedence_group_attributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_precedence_group_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1823 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1822
                self.precedence_group_attribute()
                self.state = 1825 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.HIGHER_THAN) | (1 << Swift5Parser.LOWER_THAN) | (1 << Swift5Parser.ASSIGNMENT) | (1 << Swift5Parser.ASSOCIATIVITY))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precedence_group_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedence_group_relation(self):
            return self.getTypedRuleContext(Swift5Parser.Precedence_group_relationContext,0)


        def precedence_group_assignment(self):
            return self.getTypedRuleContext(Swift5Parser.Precedence_group_assignmentContext,0)


        def precedence_group_associativity(self):
            return self.getTypedRuleContext(Swift5Parser.Precedence_group_associativityContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_precedence_group_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedence_group_attribute" ):
                listener.enterPrecedence_group_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedence_group_attribute" ):
                listener.exitPrecedence_group_attribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedence_group_attribute" ):
                return visitor.visitPrecedence_group_attribute(self)
            else:
                return visitor.visitChildren(self)




    def precedence_group_attribute(self):

        localctx = Swift5Parser.Precedence_group_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_precedence_group_attribute)
        try:
            self.state = 1830
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.HIGHER_THAN, Swift5Parser.LOWER_THAN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1827
                self.precedence_group_relation()
                pass
            elif token in [Swift5Parser.ASSIGNMENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1828
                self.precedence_group_assignment()
                pass
            elif token in [Swift5Parser.ASSOCIATIVITY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1829
                self.precedence_group_associativity()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precedence_group_relationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def precedence_group_names(self):
            return self.getTypedRuleContext(Swift5Parser.Precedence_group_namesContext,0)


        def HIGHER_THAN(self):
            return self.getToken(Swift5Parser.HIGHER_THAN, 0)

        def LOWER_THAN(self):
            return self.getToken(Swift5Parser.LOWER_THAN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_precedence_group_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedence_group_relation" ):
                listener.enterPrecedence_group_relation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedence_group_relation" ):
                listener.exitPrecedence_group_relation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedence_group_relation" ):
                return visitor.visitPrecedence_group_relation(self)
            else:
                return visitor.visitChildren(self)




    def precedence_group_relation(self):

        localctx = Swift5Parser.Precedence_group_relationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_precedence_group_relation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1832
            _la = self._input.LA(1)
            if not(_la==Swift5Parser.HIGHER_THAN or _la==Swift5Parser.LOWER_THAN):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1833
            self.match(Swift5Parser.COLON)
            self.state = 1834
            self.precedence_group_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precedence_group_assignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(Swift5Parser.ASSIGNMENT, 0)

        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def boolean_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Boolean_literalContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_precedence_group_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedence_group_assignment" ):
                listener.enterPrecedence_group_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedence_group_assignment" ):
                listener.exitPrecedence_group_assignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedence_group_assignment" ):
                return visitor.visitPrecedence_group_assignment(self)
            else:
                return visitor.visitChildren(self)




    def precedence_group_assignment(self):

        localctx = Swift5Parser.Precedence_group_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_precedence_group_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self.match(Swift5Parser.ASSIGNMENT)
            self.state = 1837
            self.match(Swift5Parser.COLON)
            self.state = 1838
            self.boolean_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precedence_group_associativityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSOCIATIVITY(self):
            return self.getToken(Swift5Parser.ASSOCIATIVITY, 0)

        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def LEFT(self):
            return self.getToken(Swift5Parser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(Swift5Parser.RIGHT, 0)

        def NONE(self):
            return self.getToken(Swift5Parser.NONE, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_precedence_group_associativity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedence_group_associativity" ):
                listener.enterPrecedence_group_associativity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedence_group_associativity" ):
                listener.exitPrecedence_group_associativity(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedence_group_associativity" ):
                return visitor.visitPrecedence_group_associativity(self)
            else:
                return visitor.visitChildren(self)




    def precedence_group_associativity(self):

        localctx = Swift5Parser.Precedence_group_associativityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_precedence_group_associativity)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1840
            self.match(Swift5Parser.ASSOCIATIVITY)
            self.state = 1841
            self.match(Swift5Parser.COLON)
            self.state = 1842
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.LEFT) | (1 << Swift5Parser.RIGHT) | (1 << Swift5Parser.NONE))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precedence_group_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedence_group_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Precedence_group_nameContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Precedence_group_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_precedence_group_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedence_group_names" ):
                listener.enterPrecedence_group_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedence_group_names" ):
                listener.exitPrecedence_group_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedence_group_names" ):
                return visitor.visitPrecedence_group_names(self)
            else:
                return visitor.visitChildren(self)




    def precedence_group_names(self):

        localctx = Swift5Parser.Precedence_group_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_precedence_group_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1844
            self.precedence_group_name()
            self.state = 1849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Swift5Parser.COMMA:
                self.state = 1845
                self.match(Swift5Parser.COMMA)
                self.state = 1846
                self.precedence_group_name()
                self.state = 1851
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precedence_group_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.DOT)
            else:
                return self.getToken(Swift5Parser.DOT, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_precedence_group_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedence_group_name" ):
                listener.enterPrecedence_group_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedence_group_name" ):
                listener.exitPrecedence_group_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedence_group_name" ):
                return visitor.visitPrecedence_group_name(self)
            else:
                return visitor.visitChildren(self)




    def precedence_group_name(self):

        localctx = Swift5Parser.Precedence_group_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_precedence_group_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1852
            self.identifier()
            self.state = 1857
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1853
                    self.match(Swift5Parser.DOT)
                    self.state = 1854
                    self.identifier() 
                self.state = 1859
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declaration_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Swift5Parser.CLASS, 0)

        def CONVENIENCE(self):
            return self.getToken(Swift5Parser.CONVENIENCE, 0)

        def DYNAMIC(self):
            return self.getToken(Swift5Parser.DYNAMIC, 0)

        def FINAL(self):
            return self.getToken(Swift5Parser.FINAL, 0)

        def INFIX(self):
            return self.getToken(Swift5Parser.INFIX, 0)

        def LAZY(self):
            return self.getToken(Swift5Parser.LAZY, 0)

        def OPTIONAL(self):
            return self.getToken(Swift5Parser.OPTIONAL, 0)

        def OVERRIDE(self):
            return self.getToken(Swift5Parser.OVERRIDE, 0)

        def POSTFIX(self):
            return self.getToken(Swift5Parser.POSTFIX, 0)

        def PREFIX(self):
            return self.getToken(Swift5Parser.PREFIX, 0)

        def REQUIRED(self):
            return self.getToken(Swift5Parser.REQUIRED, 0)

        def STATIC(self):
            return self.getToken(Swift5Parser.STATIC, 0)

        def UNOWNED(self):
            return self.getToken(Swift5Parser.UNOWNED, 0)

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def SAFE(self):
            return self.getToken(Swift5Parser.SAFE, 0)

        def UNSAFE(self):
            return self.getToken(Swift5Parser.UNSAFE, 0)

        def WEAK(self):
            return self.getToken(Swift5Parser.WEAK, 0)

        def access_level_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Access_level_modifierContext,0)


        def mutation_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Mutation_modifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_declaration_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration_modifier" ):
                listener.enterDeclaration_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration_modifier" ):
                listener.exitDeclaration_modifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration_modifier" ):
                return visitor.visitDeclaration_modifier(self)
            else:
                return visitor.visitChildren(self)




    def declaration_modifier(self):

        localctx = Swift5Parser.Declaration_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_declaration_modifier)
        self._la = 0 # Token type
        try:
            self.state = 1881
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.CLASS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1860
                self.match(Swift5Parser.CLASS)
                pass
            elif token in [Swift5Parser.CONVENIENCE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1861
                self.match(Swift5Parser.CONVENIENCE)
                pass
            elif token in [Swift5Parser.DYNAMIC]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1862
                self.match(Swift5Parser.DYNAMIC)
                pass
            elif token in [Swift5Parser.FINAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1863
                self.match(Swift5Parser.FINAL)
                pass
            elif token in [Swift5Parser.INFIX]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1864
                self.match(Swift5Parser.INFIX)
                pass
            elif token in [Swift5Parser.LAZY]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1865
                self.match(Swift5Parser.LAZY)
                pass
            elif token in [Swift5Parser.OPTIONAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1866
                self.match(Swift5Parser.OPTIONAL)
                pass
            elif token in [Swift5Parser.OVERRIDE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1867
                self.match(Swift5Parser.OVERRIDE)
                pass
            elif token in [Swift5Parser.POSTFIX]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1868
                self.match(Swift5Parser.POSTFIX)
                pass
            elif token in [Swift5Parser.PREFIX]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1869
                self.match(Swift5Parser.PREFIX)
                pass
            elif token in [Swift5Parser.REQUIRED]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1870
                self.match(Swift5Parser.REQUIRED)
                pass
            elif token in [Swift5Parser.STATIC]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1871
                self.match(Swift5Parser.STATIC)
                pass
            elif token in [Swift5Parser.UNOWNED]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1872
                self.match(Swift5Parser.UNOWNED)
                self.state = 1876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Swift5Parser.LPAREN:
                    self.state = 1873
                    self.match(Swift5Parser.LPAREN)
                    self.state = 1874
                    _la = self._input.LA(1)
                    if not(_la==Swift5Parser.SAFE or _la==Swift5Parser.UNSAFE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1875
                    self.match(Swift5Parser.RPAREN)


                pass
            elif token in [Swift5Parser.WEAK]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1878
                self.match(Swift5Parser.WEAK)
                pass
            elif token in [Swift5Parser.INTERNAL, Swift5Parser.OPEN, Swift5Parser.PRIVATE, Swift5Parser.PUBLIC, Swift5Parser.FILE_PRIVATE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1879
                self.access_level_modifier()
                pass
            elif token in [Swift5Parser.MUTATING, Swift5Parser.NONMUTATING]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1880
                self.mutation_modifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declaration_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Declaration_modifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Declaration_modifierContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_declaration_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration_modifiers" ):
                listener.enterDeclaration_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration_modifiers" ):
                listener.exitDeclaration_modifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration_modifiers" ):
                return visitor.visitDeclaration_modifiers(self)
            else:
                return visitor.visitChildren(self)




    def declaration_modifiers(self):

        localctx = Swift5Parser.Declaration_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_declaration_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1884 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1883
                self.declaration_modifier()
                self.state = 1886 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.POSTFIX))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Swift5Parser.CONVENIENCE - 66)) | (1 << (Swift5Parser.DYNAMIC - 66)) | (1 << (Swift5Parser.LAZY - 66)) | (1 << (Swift5Parser.OPTIONAL - 66)) | (1 << (Swift5Parser.OVERRIDE - 66)) | (1 << (Swift5Parser.REQUIRED - 66)) | (1 << (Swift5Parser.STATIC - 66)) | (1 << (Swift5Parser.WEAK - 66)) | (1 << (Swift5Parser.UNOWNED - 66)) | (1 << (Swift5Parser.MUTATING - 66)) | (1 << (Swift5Parser.NONMUTATING - 66)) | (1 << (Swift5Parser.FILE_PRIVATE - 66)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Access_level_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(Swift5Parser.PRIVATE, 0)

        def FILE_PRIVATE(self):
            return self.getToken(Swift5Parser.FILE_PRIVATE, 0)

        def INTERNAL(self):
            return self.getToken(Swift5Parser.INTERNAL, 0)

        def PUBLIC(self):
            return self.getToken(Swift5Parser.PUBLIC, 0)

        def OPEN(self):
            return self.getToken(Swift5Parser.OPEN, 0)

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def SET(self):
            return self.getToken(Swift5Parser.SET, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_access_level_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccess_level_modifier" ):
                listener.enterAccess_level_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccess_level_modifier" ):
                listener.exitAccess_level_modifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccess_level_modifier" ):
                return visitor.visitAccess_level_modifier(self)
            else:
                return visitor.visitChildren(self)




    def access_level_modifier(self):

        localctx = Swift5Parser.Access_level_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_access_level_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1888
            _la = self._input.LA(1)
            if not(((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Swift5Parser.INTERNAL - 20)) | (1 << (Swift5Parser.OPEN - 20)) | (1 << (Swift5Parser.PRIVATE - 20)) | (1 << (Swift5Parser.PUBLIC - 20)) | (1 << (Swift5Parser.FILE_PRIVATE - 20)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.LPAREN:
                self.state = 1889
                self.match(Swift5Parser.LPAREN)
                self.state = 1890
                self.match(Swift5Parser.SET)
                self.state = 1891
                self.match(Swift5Parser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mutation_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MUTATING(self):
            return self.getToken(Swift5Parser.MUTATING, 0)

        def NONMUTATING(self):
            return self.getToken(Swift5Parser.NONMUTATING, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_mutation_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutation_modifier" ):
                listener.enterMutation_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutation_modifier" ):
                listener.exitMutation_modifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMutation_modifier" ):
                return visitor.visitMutation_modifier(self)
            else:
                return visitor.visitChildren(self)




    def mutation_modifier(self):

        localctx = Swift5Parser.Mutation_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_mutation_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1894
            _la = self._input.LA(1)
            if not(_la==Swift5Parser.MUTATING or _la==Swift5Parser.NONMUTATING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wildcard_pattern(self):
            return self.getTypedRuleContext(Swift5Parser.Wildcard_patternContext,0)


        def identifier_pattern(self):
            return self.getTypedRuleContext(Swift5Parser.Identifier_patternContext,0)


        def tuple_pattern(self):
            return self.getTypedRuleContext(Swift5Parser.Tuple_patternContext,0)


        def type_annotation(self):
            return self.getTypedRuleContext(Swift5Parser.Type_annotationContext,0)


        def value_binding_pattern(self):
            return self.getTypedRuleContext(Swift5Parser.Value_binding_patternContext,0)


        def enum_case_pattern(self):
            return self.getTypedRuleContext(Swift5Parser.Enum_case_patternContext,0)


        def optional_pattern(self):
            return self.getTypedRuleContext(Swift5Parser.Optional_patternContext,0)


        def IS(self):
            return self.getToken(Swift5Parser.IS, 0)

        def type(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def expression_pattern(self):
            return self.getTypedRuleContext(Swift5Parser.Expression_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(Swift5Parser.PatternContext,0)


        def AS(self):
            return self.getToken(Swift5Parser.AS, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)



    def pattern(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Swift5Parser.PatternContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 368
        self.enterRecursionRule(localctx, 368, self.RULE_pattern, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.state = 1900
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Swift5Parser.UNDERSCORE]:
                    self.state = 1897
                    self.wildcard_pattern()
                    pass
                elif token in [Swift5Parser.AS, Swift5Parser.ALPHA, Swift5Parser.CATCH, Swift5Parser.CLASS, Swift5Parser.DEFAULT, Swift5Parser.DO, Swift5Parser.GUARD, Swift5Parser.FOR, Swift5Parser.IN, Swift5Parser.INTERNAL, Swift5Parser.FINAL, Swift5Parser.OPEN, Swift5Parser.PRIVATE, Swift5Parser.PUBLIC, Swift5Parser.WHERE, Swift5Parser.WHILE, Swift5Parser.PROTOCOL, Swift5Parser.GET, Swift5Parser.SET, Swift5Parser.WILL_SET, Swift5Parser.DID_SET, Swift5Parser.INDIRECT, Swift5Parser.PREFIX, Swift5Parser.INFIX, Swift5Parser.LEFT, Swift5Parser.RIGHT, Swift5Parser.NONE, Swift5Parser.PRECEDENCE_GROUP, Swift5Parser.HIGHER_THAN, Swift5Parser.LOWER_THAN, Swift5Parser.ASSIGNMENT, Swift5Parser.ASSOCIATIVITY, Swift5Parser.POSTFIX, Swift5Parser.OPERATOR, Swift5Parser.OS, Swift5Parser.ARCH, Swift5Parser.SWIFT, Swift5Parser.COMPILER, Swift5Parser.CAN_IMPORT, Swift5Parser.TARGET_ENVIRONMENT, Swift5Parser.CONVENIENCE, Swift5Parser.DYNAMIC, Swift5Parser.LAZY, Swift5Parser.OPTIONAL, Swift5Parser.OVERRIDE, Swift5Parser.REQUIRED, Swift5Parser.WEAK, Swift5Parser.UNOWNED, Swift5Parser.SAFE, Swift5Parser.UNSAFE, Swift5Parser.MUTATING, Swift5Parser.NONMUTATING, Swift5Parser.RED, Swift5Parser.BLUE, Swift5Parser.GREEN, Swift5Parser.RESOURCE_NAME, Swift5Parser.SOME, Swift5Parser.TYPE, Swift5Parser.PRECEDENCE, Swift5Parser.SELF, Swift5Parser.SELF_BIG, Swift5Parser.MAC_OS, Swift5Parser.I_OS, Swift5Parser.OSX, Swift5Parser.WATCH_OS, Swift5Parser.TV_OS, Swift5Parser.LINUX, Swift5Parser.WINDOWS, Swift5Parser.I386, Swift5Parser.X86_64, Swift5Parser.ARM, Swift5Parser.ARM64, Swift5Parser.SIMULATOR, Swift5Parser.MAC_CATALYST, Swift5Parser.I_OS_APPLICATION_EXTENSION, Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION, Swift5Parser.MAC_OS_APPLICATION_EXTENSION, Swift5Parser.FILE, Swift5Parser.LINE, Swift5Parser.GETTER, Swift5Parser.SETTER, Swift5Parser.Identifier, Swift5Parser.BACKTICK]:
                    self.state = 1898
                    self.identifier_pattern()
                    pass
                elif token in [Swift5Parser.LPAREN]:
                    self.state = 1899
                    self.tuple_pattern()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1903
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
                if la_ == 1:
                    self.state = 1902
                    self.type_annotation()


                pass

            elif la_ == 2:
                self.state = 1905
                self.value_binding_pattern()
                pass

            elif la_ == 3:
                self.state = 1906
                self.enum_case_pattern()
                pass

            elif la_ == 4:
                self.state = 1907
                self.optional_pattern()
                pass

            elif la_ == 5:
                self.state = 1908
                self.match(Swift5Parser.IS)
                self.state = 1909
                self.type(0)
                pass

            elif la_ == 6:
                self.state = 1910
                self.expression_pattern()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1918
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,219,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Swift5Parser.PatternContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_pattern)
                    self.state = 1913
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1914
                    self.match(Swift5Parser.AS)
                    self.state = 1915
                    self.type(0) 
                self.state = 1920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,219,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Wildcard_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(Swift5Parser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_wildcard_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcard_pattern" ):
                listener.enterWildcard_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcard_pattern" ):
                listener.exitWildcard_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcard_pattern" ):
                return visitor.visitWildcard_pattern(self)
            else:
                return visitor.visitChildren(self)




    def wildcard_pattern(self):

        localctx = Swift5Parser.Wildcard_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_wildcard_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1921
            self.match(Swift5Parser.UNDERSCORE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Identifier_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_identifier_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier_pattern" ):
                listener.enterIdentifier_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier_pattern" ):
                listener.exitIdentifier_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier_pattern" ):
                return visitor.visitIdentifier_pattern(self)
            else:
                return visitor.visitChildren(self)




    def identifier_pattern(self):

        localctx = Swift5Parser.Identifier_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_identifier_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1923
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_binding_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(Swift5Parser.VAR, 0)

        def pattern(self):
            return self.getTypedRuleContext(Swift5Parser.PatternContext,0)


        def LET(self):
            return self.getToken(Swift5Parser.LET, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_value_binding_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_binding_pattern" ):
                listener.enterValue_binding_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_binding_pattern" ):
                listener.exitValue_binding_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_binding_pattern" ):
                return visitor.visitValue_binding_pattern(self)
            else:
                return visitor.visitChildren(self)




    def value_binding_pattern(self):

        localctx = Swift5Parser.Value_binding_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_value_binding_pattern)
        try:
            self.state = 1929
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.VAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1925
                self.match(Swift5Parser.VAR)
                self.state = 1926
                self.pattern(0)
                pass
            elif token in [Swift5Parser.LET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1927
                self.match(Swift5Parser.LET)
                self.state = 1928
                self.pattern(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def tuple_pattern_element_list(self):
            return self.getTypedRuleContext(Swift5Parser.Tuple_pattern_element_listContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_tuple_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_pattern" ):
                listener.enterTuple_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_pattern" ):
                listener.exitTuple_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTuple_pattern" ):
                return visitor.visitTuple_pattern(self)
            else:
                return visitor.visitChildren(self)




    def tuple_pattern(self):

        localctx = Swift5Parser.Tuple_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_tuple_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1931
            self.match(Swift5Parser.LPAREN)
            self.state = 1933
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.state = 1932
                self.tuple_pattern_element_list()


            self.state = 1935
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_pattern_element_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tuple_pattern_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Tuple_pattern_elementContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Tuple_pattern_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_tuple_pattern_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_pattern_element_list" ):
                listener.enterTuple_pattern_element_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_pattern_element_list" ):
                listener.exitTuple_pattern_element_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTuple_pattern_element_list" ):
                return visitor.visitTuple_pattern_element_list(self)
            else:
                return visitor.visitChildren(self)




    def tuple_pattern_element_list(self):

        localctx = Swift5Parser.Tuple_pattern_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_tuple_pattern_element_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1937
            self.tuple_pattern_element()
            self.state = 1942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Swift5Parser.COMMA:
                self.state = 1938
                self.match(Swift5Parser.COMMA)
                self.state = 1939
                self.tuple_pattern_element()
                self.state = 1944
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_pattern_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(Swift5Parser.PatternContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_tuple_pattern_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_pattern_element" ):
                listener.enterTuple_pattern_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_pattern_element" ):
                listener.exitTuple_pattern_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTuple_pattern_element" ):
                return visitor.visitTuple_pattern_element(self)
            else:
                return visitor.visitChildren(self)




    def tuple_pattern_element(self):

        localctx = Swift5Parser.Tuple_pattern_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_tuple_pattern_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.state = 1945
                self.identifier()
                self.state = 1946
                self.match(Swift5Parser.COLON)


            self.state = 1950
            self.pattern(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_case_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def enum_case_name(self):
            return self.getTypedRuleContext(Swift5Parser.Enum_case_nameContext,0)


        def type_identifier(self):
            return self.getTypedRuleContext(Swift5Parser.Type_identifierContext,0)


        def tuple_pattern(self):
            return self.getTypedRuleContext(Swift5Parser.Tuple_patternContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_enum_case_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_case_pattern" ):
                listener.enterEnum_case_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_case_pattern" ):
                listener.exitEnum_case_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_case_pattern" ):
                return visitor.visitEnum_case_pattern(self)
            else:
                return visitor.visitChildren(self)




    def enum_case_pattern(self):

        localctx = Swift5Parser.Enum_case_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_enum_case_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET) | (1 << Swift5Parser.WILL_SET) | (1 << Swift5Parser.DID_SET) | (1 << Swift5Parser.INDIRECT) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.LEFT) | (1 << Swift5Parser.RIGHT) | (1 << Swift5Parser.NONE) | (1 << Swift5Parser.PRECEDENCE_GROUP) | (1 << Swift5Parser.HIGHER_THAN) | (1 << Swift5Parser.LOWER_THAN) | (1 << Swift5Parser.ASSIGNMENT) | (1 << Swift5Parser.ASSOCIATIVITY) | (1 << Swift5Parser.POSTFIX) | (1 << Swift5Parser.OPERATOR) | (1 << Swift5Parser.OS) | (1 << Swift5Parser.ARCH) | (1 << Swift5Parser.SWIFT) | (1 << Swift5Parser.COMPILER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)) | (1 << (Swift5Parser.SELF_BIG - 64)) | (1 << (Swift5Parser.MAC_OS - 64)) | (1 << (Swift5Parser.I_OS - 64)) | (1 << (Swift5Parser.OSX - 64)) | (1 << (Swift5Parser.WATCH_OS - 64)) | (1 << (Swift5Parser.TV_OS - 64)) | (1 << (Swift5Parser.LINUX - 64)) | (1 << (Swift5Parser.WINDOWS - 64)) | (1 << (Swift5Parser.I386 - 64)) | (1 << (Swift5Parser.X86_64 - 64)) | (1 << (Swift5Parser.ARM - 64)) | (1 << (Swift5Parser.ARM64 - 64)) | (1 << (Swift5Parser.SIMULATOR - 64)) | (1 << (Swift5Parser.MAC_CATALYST - 64)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.FILE - 64)) | (1 << (Swift5Parser.LINE - 64)))) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) != 0):
                self.state = 1952
                self.type_identifier()


            self.state = 1955
            self.match(Swift5Parser.DOT)
            self.state = 1956
            self.enum_case_name()
            self.state = 1958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.state = 1957
                self.tuple_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Optional_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier_pattern(self):
            return self.getTypedRuleContext(Swift5Parser.Identifier_patternContext,0)


        def QUESTION(self):
            return self.getToken(Swift5Parser.QUESTION, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_optional_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptional_pattern" ):
                listener.enterOptional_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptional_pattern" ):
                listener.exitOptional_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptional_pattern" ):
                return visitor.visitOptional_pattern(self)
            else:
                return visitor.visitChildren(self)




    def optional_pattern(self):

        localctx = Swift5Parser.Optional_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_optional_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1960
            self.identifier_pattern()
            self.state = 1961
            self.match(Swift5Parser.QUESTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_expression_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_pattern" ):
                listener.enterExpression_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_pattern" ):
                listener.exitExpression_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_pattern" ):
                return visitor.visitExpression_pattern(self)
            else:
                return visitor.visitChildren(self)




    def expression_pattern(self):

        localctx = Swift5Parser.Expression_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_expression_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1963
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Swift5Parser.AT, 0)

        def attribute_name(self):
            return self.getTypedRuleContext(Swift5Parser.Attribute_nameContext,0)


        def attribute_argument_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Attribute_argument_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = Swift5Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1965
            self.match(Swift5Parser.AT)
            self.state = 1966
            self.attribute_name()
            self.state = 1968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.state = 1967
                self.attribute_argument_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.DOT)
            else:
                return self.getToken(Swift5Parser.DOT, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_attribute_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_name" ):
                listener.enterAttribute_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_name" ):
                listener.exitAttribute_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute_name" ):
                return visitor.visitAttribute_name(self)
            else:
                return visitor.visitChildren(self)




    def attribute_name(self):

        localctx = Swift5Parser.Attribute_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_attribute_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1970
            self.identifier()
            self.state = 1975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Swift5Parser.DOT:
                self.state = 1971
                self.match(Swift5Parser.DOT)
                self.state = 1972
                self.identifier()
                self.state = 1977
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_argument_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def balanced_tokens(self):
            return self.getTypedRuleContext(Swift5Parser.Balanced_tokensContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_attribute_argument_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_argument_clause" ):
                listener.enterAttribute_argument_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_argument_clause" ):
                listener.exitAttribute_argument_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute_argument_clause" ):
                return visitor.visitAttribute_argument_clause(self)
            else:
                return visitor.visitChildren(self)




    def attribute_argument_clause(self):

        localctx = Swift5Parser.Attribute_argument_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_attribute_argument_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1978
            self.match(Swift5Parser.LPAREN)
            self.state = 1980
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 1979
                self.balanced_tokens()


            self.state = 1982
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.AttributeContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributes" ):
                return visitor.visitAttributes(self)
            else:
                return visitor.visitChildren(self)




    def attributes(self):

        localctx = Swift5Parser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1985 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1984
                    self.attribute()

                else:
                    raise NoViableAltException(self)
                self.state = 1987 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,229,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Balanced_tokensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balanced_token(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Balanced_tokenContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Balanced_tokenContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_balanced_tokens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalanced_tokens" ):
                listener.enterBalanced_tokens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalanced_tokens" ):
                listener.exitBalanced_tokens(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalanced_tokens" ):
                return visitor.visitBalanced_tokens(self)
            else:
                return visitor.visitChildren(self)




    def balanced_tokens(self):

        localctx = Swift5Parser.Balanced_tokensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_balanced_tokens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1990 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1989
                    self.balanced_token()

                else:
                    raise NoViableAltException(self)
                self.state = 1992 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Balanced_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def balanced_tokens(self):
            return self.getTypedRuleContext(Swift5Parser.Balanced_tokensContext,0)


        def LBRACK(self):
            return self.getToken(Swift5Parser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(Swift5Parser.RBRACK, 0)

        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def keyword(self):
            return self.getTypedRuleContext(Swift5Parser.KeywordContext,0)


        def literal(self):
            return self.getTypedRuleContext(Swift5Parser.LiteralContext,0)


        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def balanced_token_punctuation(self):
            return self.getTypedRuleContext(Swift5Parser.Balanced_token_punctuationContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_balanced_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalanced_token" ):
                listener.enterBalanced_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalanced_token" ):
                listener.exitBalanced_token(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalanced_token" ):
                return visitor.visitBalanced_token(self)
            else:
                return visitor.visitChildren(self)




    def balanced_token(self):

        localctx = Swift5Parser.Balanced_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_balanced_token)
        try:
            self.state = 2014
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1994
                self.match(Swift5Parser.LPAREN)
                self.state = 1996
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                if la_ == 1:
                    self.state = 1995
                    self.balanced_tokens()


                self.state = 1998
                self.match(Swift5Parser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1999
                self.match(Swift5Parser.LBRACK)
                self.state = 2001
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 2000
                    self.balanced_tokens()


                self.state = 2003
                self.match(Swift5Parser.RBRACK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2004
                self.match(Swift5Parser.LCURLY)
                self.state = 2006
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 2005
                    self.balanced_tokens()


                self.state = 2008
                self.match(Swift5Parser.RCURLY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2009
                self.identifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2010
                self.keyword()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2011
                self.literal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2012
                self.operator()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2013
                self.balanced_token_punctuation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Balanced_token_punctuationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def COMMA(self):
            return self.getToken(Swift5Parser.COMMA, 0)

        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def SEMI(self):
            return self.getToken(Swift5Parser.SEMI, 0)

        def EQUAL(self):
            return self.getToken(Swift5Parser.EQUAL, 0)

        def AT(self):
            return self.getToken(Swift5Parser.AT, 0)

        def HASH(self):
            return self.getToken(Swift5Parser.HASH, 0)

        def BACKTICK(self):
            return self.getToken(Swift5Parser.BACKTICK, 0)

        def QUESTION(self):
            return self.getToken(Swift5Parser.QUESTION, 0)

        def arrow_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Arrow_operatorContext,0)


        def AND(self):
            return self.getToken(Swift5Parser.AND, 0)

        def BANG(self):
            return self.getToken(Swift5Parser.BANG, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_balanced_token_punctuation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalanced_token_punctuation" ):
                listener.enterBalanced_token_punctuation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalanced_token_punctuation" ):
                listener.exitBalanced_token_punctuation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalanced_token_punctuation" ):
                return visitor.visitBalanced_token_punctuation(self)
            else:
                return visitor.visitChildren(self)




    def balanced_token_punctuation(self):

        localctx = Swift5Parser.Balanced_token_punctuationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_balanced_token_punctuation)
        self._la = 0 # Token type
        try:
            self.state = 2022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2016
                _la = self._input.LA(1)
                if not(((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (Swift5Parser.DOT - 138)) | (1 << (Swift5Parser.COMMA - 138)) | (1 << (Swift5Parser.COLON - 138)) | (1 << (Swift5Parser.SEMI - 138)) | (1 << (Swift5Parser.QUESTION - 138)) | (1 << (Swift5Parser.AT - 138)) | (1 << (Swift5Parser.EQUAL - 138)) | (1 << (Swift5Parser.HASH - 138)) | (1 << (Swift5Parser.BACKTICK - 138)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2017
                self.arrow_operator()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2018
                if not SwiftSupport.isPrefixOp(_input):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "SwiftSupport.isPrefixOp(_input)")
                self.state = 2019
                self.match(Swift5Parser.AND)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2020
                if not SwiftSupport.isPostfixOp(_input):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "SwiftSupport.isPostfixOp(_input)")
                self.state = 2021
                self.match(Swift5Parser.BANG)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefix_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Prefix_expressionContext,0)


        def try_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Try_operatorContext,0)


        def binary_expressions(self):
            return self.getTypedRuleContext(Swift5Parser.Binary_expressionsContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = Swift5Parser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.state = 2024
                self.try_operator()


            self.state = 2027
            self.prefix_expression()
            self.state = 2029
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.state = 2028
                self.binary_expressions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_list" ):
                return visitor.visitExpression_list(self)
            else:
                return visitor.visitChildren(self)




    def expression_list(self):

        localctx = Swift5Parser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2031
            self.expression()
            self.state = 2036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Swift5Parser.COMMA:
                self.state = 2032
                self.match(Swift5Parser.COMMA)
                self.state = 2033
                self.expression()
                self.state = 2038
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prefix_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfix_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Postfix_expressionContext,0)


        def prefix_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Prefix_operatorContext,0)


        def in_out_expression(self):
            return self.getTypedRuleContext(Swift5Parser.In_out_expressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_prefix_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefix_expression" ):
                listener.enterPrefix_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefix_expression" ):
                listener.exitPrefix_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefix_expression" ):
                return visitor.visitPrefix_expression(self)
            else:
                return visitor.visitChildren(self)




    def prefix_expression(self):

        localctx = Swift5Parser.Prefix_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_prefix_expression)
        try:
            self.state = 2044
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2040
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
                if la_ == 1:
                    self.state = 2039
                    self.prefix_operator()


                self.state = 2042
                self.postfix_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2043
                self.in_out_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_out_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(Swift5Parser.AND, 0)

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_in_out_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_out_expression" ):
                listener.enterIn_out_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_out_expression" ):
                listener.exitIn_out_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIn_out_expression" ):
                return visitor.visitIn_out_expression(self)
            else:
                return visitor.visitChildren(self)




    def in_out_expression(self):

        localctx = Swift5Parser.In_out_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_in_out_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2046
            self.match(Swift5Parser.AND)
            self.state = 2047
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Swift5Parser.TRY, 0)

        def QUESTION(self):
            return self.getToken(Swift5Parser.QUESTION, 0)

        def BANG(self):
            return self.getToken(Swift5Parser.BANG, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_try_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_operator" ):
                listener.enterTry_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_operator" ):
                listener.exitTry_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_operator" ):
                return visitor.visitTry_operator(self)
            else:
                return visitor.visitChildren(self)




    def try_operator(self):

        localctx = Swift5Parser.Try_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_try_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2049
            self.match(Swift5Parser.TRY)
            self.state = 2051
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.state = 2050
                _la = self._input.LA(1)
                if not(_la==Swift5Parser.BANG or _la==Swift5Parser.QUESTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binary_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Binary_operatorContext,0)


        def prefix_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Prefix_expressionContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Assignment_operatorContext,0)


        def conditional_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Conditional_operatorContext,0)


        def try_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Try_operatorContext,0)


        def type_casting_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Type_casting_operatorContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_binary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_expression" ):
                listener.enterBinary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_expression" ):
                listener.exitBinary_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinary_expression" ):
                return visitor.visitBinary_expression(self)
            else:
                return visitor.visitChildren(self)




    def binary_expression(self):

        localctx = Swift5Parser.Binary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_binary_expression)
        try:
            self.state = 2066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2053
                self.binary_operator()
                self.state = 2054
                self.prefix_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2058
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                if la_ == 1:
                    self.state = 2056
                    self.assignment_operator()
                    pass

                elif la_ == 2:
                    self.state = 2057
                    self.conditional_operator()
                    pass


                self.state = 2061
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                if la_ == 1:
                    self.state = 2060
                    self.try_operator()


                self.state = 2063
                self.prefix_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2065
                self.type_casting_operator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_expressionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binary_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Binary_expressionContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Binary_expressionContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_binary_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_expressions" ):
                listener.enterBinary_expressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_expressions" ):
                listener.exitBinary_expressions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinary_expressions" ):
                return visitor.visitBinary_expressions(self)
            else:
                return visitor.visitChildren(self)




    def binary_expressions(self):

        localctx = Swift5Parser.Binary_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_binary_expressions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2069 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2068
                    self.binary_expression()

                else:
                    raise NoViableAltException(self)
                self.state = 2071 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUESTION(self):
            return self.getToken(Swift5Parser.QUESTION, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_conditional_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_operator" ):
                listener.enterConditional_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_operator" ):
                listener.exitConditional_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_operator" ):
                return visitor.visitConditional_operator(self)
            else:
                return visitor.visitChildren(self)




    def conditional_operator(self):

        localctx = Swift5Parser.Conditional_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_conditional_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2073
            self.match(Swift5Parser.QUESTION)
            self.state = 2074
            self.expression()
            self.state = 2075
            self.match(Swift5Parser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_casting_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def IS(self):
            return self.getToken(Swift5Parser.IS, 0)

        def AS(self):
            return self.getToken(Swift5Parser.AS, 0)

        def QUESTION(self):
            return self.getToken(Swift5Parser.QUESTION, 0)

        def BANG(self):
            return self.getToken(Swift5Parser.BANG, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_type_casting_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_casting_operator" ):
                listener.enterType_casting_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_casting_operator" ):
                listener.exitType_casting_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_casting_operator" ):
                return visitor.visitType_casting_operator(self)
            else:
                return visitor.visitChildren(self)




    def type_casting_operator(self):

        localctx = Swift5Parser.Type_casting_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_type_casting_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2082
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.IS]:
                self.state = 2077
                self.match(Swift5Parser.IS)
                pass
            elif token in [Swift5Parser.AS]:
                self.state = 2078
                self.match(Swift5Parser.AS)
                self.state = 2080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Swift5Parser.BANG or _la==Swift5Parser.QUESTION:
                    self.state = 2079
                    _la = self._input.LA(1)
                    if not(_la==Swift5Parser.BANG or _la==Swift5Parser.QUESTION):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2084
            self.type(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualified_name(self):
            return self.getTypedRuleContext(Swift5Parser.Unqualified_nameContext,0)


        def generic_argument_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_argument_clauseContext,0)


        def array_type(self):
            return self.getTypedRuleContext(Swift5Parser.Array_typeContext,0)


        def dictionary_type(self):
            return self.getTypedRuleContext(Swift5Parser.Dictionary_typeContext,0)


        def literal_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Literal_expressionContext,0)


        def self_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Self_expressionContext,0)


        def superclass_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Superclass_expressionContext,0)


        def closure_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Closure_expressionContext,0)


        def parenthesized_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Parenthesized_operatorContext,0)


        def parenthesized_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Parenthesized_expressionContext,0)


        def tuple_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Tuple_expressionContext,0)


        def implicit_member_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Implicit_member_expressionContext,0)


        def wildcard_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Wildcard_expressionContext,0)


        def key_path_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Key_path_expressionContext,0)


        def selector_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Selector_expressionContext,0)


        def key_path_string_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Key_path_string_expressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_expression" ):
                listener.enterPrimary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_expression" ):
                listener.exitPrimary_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary_expression" ):
                return visitor.visitPrimary_expression(self)
            else:
                return visitor.visitChildren(self)




    def primary_expression(self):

        localctx = Swift5Parser.Primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_primary_expression)
        try:
            self.state = 2104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2086
                self.unqualified_name()
                self.state = 2088
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                if la_ == 1:
                    self.state = 2087
                    self.generic_argument_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2090
                self.array_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2091
                self.dictionary_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2092
                self.literal_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2093
                self.self_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2094
                self.superclass_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2095
                self.closure_expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2096
                self.parenthesized_operator()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2097
                self.parenthesized_expression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2098
                self.tuple_expression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2099
                self.implicit_member_expression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2100
                self.wildcard_expression()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2101
                self.key_path_expression()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2102
                self.selector_expression()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2103
                self.key_path_string_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unqualified_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def argument_names(self):
            return self.getTypedRuleContext(Swift5Parser.Argument_namesContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_unqualified_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualified_name" ):
                listener.enterUnqualified_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualified_name" ):
                listener.exitUnqualified_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualified_name" ):
                return visitor.visitUnqualified_name(self)
            else:
                return visitor.visitChildren(self)




    def unqualified_name(self):

        localctx = Swift5Parser.Unqualified_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_unqualified_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2106
            self.identifier()
            self.state = 2111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.state = 2107
                self.match(Swift5Parser.LPAREN)
                self.state = 2108
                self.argument_names()
                self.state = 2109
                self.match(Swift5Parser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(Swift5Parser.LiteralContext,0)


        def array_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Array_literalContext,0)


        def dictionary_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Dictionary_literalContext,0)


        def playground_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Playground_literalContext,0)


        def HASH_FILE(self):
            return self.getToken(Swift5Parser.HASH_FILE, 0)

        def HASH_FILE_ID(self):
            return self.getToken(Swift5Parser.HASH_FILE_ID, 0)

        def HASH_FILE_PATH(self):
            return self.getToken(Swift5Parser.HASH_FILE_PATH, 0)

        def HASH_LINE(self):
            return self.getToken(Swift5Parser.HASH_LINE, 0)

        def HASH_COLUMN(self):
            return self.getToken(Swift5Parser.HASH_COLUMN, 0)

        def HASH_FUNCTION(self):
            return self.getToken(Swift5Parser.HASH_FUNCTION, 0)

        def HASH_DSO_HANDLE(self):
            return self.getToken(Swift5Parser.HASH_DSO_HANDLE, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_literal_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_expression" ):
                listener.enterLiteral_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_expression" ):
                listener.exitLiteral_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_expression" ):
                return visitor.visitLiteral_expression(self)
            else:
                return visitor.visitChildren(self)




    def literal_expression(self):

        localctx = Swift5Parser.Literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_literal_expression)
        try:
            self.state = 2124
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2113
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2114
                self.array_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2115
                self.dictionary_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2116
                self.playground_literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2117
                self.match(Swift5Parser.HASH_FILE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2118
                self.match(Swift5Parser.HASH_FILE_ID)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2119
                self.match(Swift5Parser.HASH_FILE_PATH)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2120
                self.match(Swift5Parser.HASH_LINE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2121
                self.match(Swift5Parser.HASH_COLUMN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2122
                self.match(Swift5Parser.HASH_FUNCTION)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2123
                self.match(Swift5Parser.HASH_DSO_HANDLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(Swift5Parser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(Swift5Parser.RBRACK, 0)

        def array_literal_items(self):
            return self.getTypedRuleContext(Swift5Parser.Array_literal_itemsContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_array_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_literal" ):
                listener.enterArray_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_literal" ):
                listener.exitArray_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_literal" ):
                return visitor.visitArray_literal(self)
            else:
                return visitor.visitChildren(self)




    def array_literal(self):

        localctx = Swift5Parser.Array_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_array_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2126
            self.match(Swift5Parser.LBRACK)
            self.state = 2128
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.state = 2127
                self.array_literal_items()


            self.state = 2130
            self.match(Swift5Parser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_literal_itemsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_literal_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Array_literal_itemContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Array_literal_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_array_literal_items

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_literal_items" ):
                listener.enterArray_literal_items(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_literal_items" ):
                listener.exitArray_literal_items(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_literal_items" ):
                return visitor.visitArray_literal_items(self)
            else:
                return visitor.visitChildren(self)




    def array_literal_items(self):

        localctx = Swift5Parser.Array_literal_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_array_literal_items)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2132
            self.array_literal_item()
            self.state = 2137
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,253,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2133
                    self.match(Swift5Parser.COMMA)
                    self.state = 2134
                    self.array_literal_item() 
                self.state = 2139
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,253,self._ctx)

            self.state = 2141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.COMMA:
                self.state = 2140
                self.match(Swift5Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_literal_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_array_literal_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_literal_item" ):
                listener.enterArray_literal_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_literal_item" ):
                listener.exitArray_literal_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_literal_item" ):
                return visitor.visitArray_literal_item(self)
            else:
                return visitor.visitChildren(self)




    def array_literal_item(self):

        localctx = Swift5Parser.Array_literal_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_array_literal_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2143
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dictionary_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(Swift5Parser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(Swift5Parser.RBRACK, 0)

        def dictionary_literal_items(self):
            return self.getTypedRuleContext(Swift5Parser.Dictionary_literal_itemsContext,0)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_dictionary_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionary_literal" ):
                listener.enterDictionary_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionary_literal" ):
                listener.exitDictionary_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictionary_literal" ):
                return visitor.visitDictionary_literal(self)
            else:
                return visitor.visitChildren(self)




    def dictionary_literal(self):

        localctx = Swift5Parser.Dictionary_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_dictionary_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2145
            self.match(Swift5Parser.LBRACK)
            self.state = 2148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 2146
                self.dictionary_literal_items()
                pass

            elif la_ == 2:
                self.state = 2147
                self.match(Swift5Parser.COLON)
                pass


            self.state = 2150
            self.match(Swift5Parser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dictionary_literal_itemsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dictionary_literal_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Dictionary_literal_itemContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Dictionary_literal_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_dictionary_literal_items

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionary_literal_items" ):
                listener.enterDictionary_literal_items(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionary_literal_items" ):
                listener.exitDictionary_literal_items(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictionary_literal_items" ):
                return visitor.visitDictionary_literal_items(self)
            else:
                return visitor.visitChildren(self)




    def dictionary_literal_items(self):

        localctx = Swift5Parser.Dictionary_literal_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_dictionary_literal_items)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2152
            self.dictionary_literal_item()
            self.state = 2157
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,256,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2153
                    self.match(Swift5Parser.COMMA)
                    self.state = 2154
                    self.dictionary_literal_item() 
                self.state = 2159
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,256,self._ctx)

            self.state = 2161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.COMMA:
                self.state = 2160
                self.match(Swift5Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dictionary_literal_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_dictionary_literal_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionary_literal_item" ):
                listener.enterDictionary_literal_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionary_literal_item" ):
                listener.exitDictionary_literal_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictionary_literal_item" ):
                return visitor.visitDictionary_literal_item(self)
            else:
                return visitor.visitChildren(self)




    def dictionary_literal_item(self):

        localctx = Swift5Parser.Dictionary_literal_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_dictionary_literal_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2163
            self.expression()
            self.state = 2164
            self.match(Swift5Parser.COLON)
            self.state = 2165
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Playground_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH_COLOR_LITERAL(self):
            return self.getToken(Swift5Parser.HASH_COLOR_LITERAL, 0)

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RED(self):
            return self.getToken(Swift5Parser.RED, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COLON)
            else:
                return self.getToken(Swift5Parser.COLON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def GREEN(self):
            return self.getToken(Swift5Parser.GREEN, 0)

        def BLUE(self):
            return self.getToken(Swift5Parser.BLUE, 0)

        def ALPHA(self):
            return self.getToken(Swift5Parser.ALPHA, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def HASH_FILE_LITERAL(self):
            return self.getToken(Swift5Parser.HASH_FILE_LITERAL, 0)

        def RESOURCE_NAME(self):
            return self.getToken(Swift5Parser.RESOURCE_NAME, 0)

        def HASH_IMAGE_LITERAL(self):
            return self.getToken(Swift5Parser.HASH_IMAGE_LITERAL, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_playground_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlayground_literal" ):
                listener.enterPlayground_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlayground_literal" ):
                listener.exitPlayground_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlayground_literal" ):
                return visitor.visitPlayground_literal(self)
            else:
                return visitor.visitChildren(self)




    def playground_literal(self):

        localctx = Swift5Parser.Playground_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_playground_literal)
        try:
            self.state = 2200
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.HASH_COLOR_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2167
                self.match(Swift5Parser.HASH_COLOR_LITERAL)
                self.state = 2168
                self.match(Swift5Parser.LPAREN)
                self.state = 2169
                self.match(Swift5Parser.RED)
                self.state = 2170
                self.match(Swift5Parser.COLON)
                self.state = 2171
                self.expression()
                self.state = 2172
                self.match(Swift5Parser.COMMA)
                self.state = 2173
                self.match(Swift5Parser.GREEN)
                self.state = 2174
                self.match(Swift5Parser.COLON)
                self.state = 2175
                self.expression()
                self.state = 2176
                self.match(Swift5Parser.COMMA)
                self.state = 2177
                self.match(Swift5Parser.BLUE)
                self.state = 2178
                self.match(Swift5Parser.COLON)
                self.state = 2179
                self.expression()
                self.state = 2180
                self.match(Swift5Parser.COMMA)
                self.state = 2181
                self.match(Swift5Parser.ALPHA)
                self.state = 2182
                self.match(Swift5Parser.COLON)
                self.state = 2183
                self.expression()
                self.state = 2184
                self.match(Swift5Parser.RPAREN)
                pass
            elif token in [Swift5Parser.HASH_FILE_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2186
                self.match(Swift5Parser.HASH_FILE_LITERAL)
                self.state = 2187
                self.match(Swift5Parser.LPAREN)
                self.state = 2188
                self.match(Swift5Parser.RESOURCE_NAME)
                self.state = 2189
                self.match(Swift5Parser.COLON)
                self.state = 2190
                self.expression()
                self.state = 2191
                self.match(Swift5Parser.RPAREN)
                pass
            elif token in [Swift5Parser.HASH_IMAGE_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2193
                self.match(Swift5Parser.HASH_IMAGE_LITERAL)
                self.state = 2194
                self.match(Swift5Parser.LPAREN)
                self.state = 2195
                self.match(Swift5Parser.RESOURCE_NAME)
                self.state = 2196
                self.match(Swift5Parser.COLON)
                self.state = 2197
                self.expression()
                self.state = 2198
                self.match(Swift5Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Self_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Swift5Parser.RULE_self_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Self_initializer_expressionContext(Self_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Swift5Parser.Self_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SELF(self):
            return self.getToken(Swift5Parser.SELF, 0)
        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)
        def INIT(self):
            return self.getToken(Swift5Parser.INIT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelf_initializer_expression" ):
                listener.enterSelf_initializer_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelf_initializer_expression" ):
                listener.exitSelf_initializer_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelf_initializer_expression" ):
                return visitor.visitSelf_initializer_expression(self)
            else:
                return visitor.visitChildren(self)


    class Self_pure_expressionContext(Self_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Swift5Parser.Self_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SELF(self):
            return self.getToken(Swift5Parser.SELF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelf_pure_expression" ):
                listener.enterSelf_pure_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelf_pure_expression" ):
                listener.exitSelf_pure_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelf_pure_expression" ):
                return visitor.visitSelf_pure_expression(self)
            else:
                return visitor.visitChildren(self)


    class Self_subscript_expressionContext(Self_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Swift5Parser.Self_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SELF(self):
            return self.getToken(Swift5Parser.SELF, 0)
        def LBRACK(self):
            return self.getToken(Swift5Parser.LBRACK, 0)
        def function_call_argument_list(self):
            return self.getTypedRuleContext(Swift5Parser.Function_call_argument_listContext,0)

        def RBRACK(self):
            return self.getToken(Swift5Parser.RBRACK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelf_subscript_expression" ):
                listener.enterSelf_subscript_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelf_subscript_expression" ):
                listener.exitSelf_subscript_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelf_subscript_expression" ):
                return visitor.visitSelf_subscript_expression(self)
            else:
                return visitor.visitChildren(self)


    class Self_method_expressionContext(Self_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Swift5Parser.Self_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SELF(self):
            return self.getToken(Swift5Parser.SELF, 0)
        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelf_method_expression" ):
                listener.enterSelf_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelf_method_expression" ):
                listener.exitSelf_method_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelf_method_expression" ):
                return visitor.visitSelf_method_expression(self)
            else:
                return visitor.visitChildren(self)



    def self_expression(self):

        localctx = Swift5Parser.Self_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_self_expression)
        try:
            self.state = 2214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                localctx = Swift5Parser.Self_pure_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2202
                self.match(Swift5Parser.SELF)
                pass

            elif la_ == 2:
                localctx = Swift5Parser.Self_method_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2203
                self.match(Swift5Parser.SELF)
                self.state = 2204
                self.match(Swift5Parser.DOT)
                self.state = 2205
                self.identifier()
                pass

            elif la_ == 3:
                localctx = Swift5Parser.Self_subscript_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2206
                self.match(Swift5Parser.SELF)
                self.state = 2207
                self.match(Swift5Parser.LBRACK)
                self.state = 2208
                self.function_call_argument_list()
                self.state = 2209
                self.match(Swift5Parser.RBRACK)
                pass

            elif la_ == 4:
                localctx = Swift5Parser.Self_initializer_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2211
                self.match(Swift5Parser.SELF)
                self.state = 2212
                self.match(Swift5Parser.DOT)
                self.state = 2213
                self.match(Swift5Parser.INIT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Superclass_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Swift5Parser.RULE_superclass_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Superclass_subscript_expressionContext(Superclass_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Swift5Parser.Superclass_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUPER(self):
            return self.getToken(Swift5Parser.SUPER, 0)
        def LBRACK(self):
            return self.getToken(Swift5Parser.LBRACK, 0)
        def function_call_argument_list(self):
            return self.getTypedRuleContext(Swift5Parser.Function_call_argument_listContext,0)

        def RBRACK(self):
            return self.getToken(Swift5Parser.RBRACK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperclass_subscript_expression" ):
                listener.enterSuperclass_subscript_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperclass_subscript_expression" ):
                listener.exitSuperclass_subscript_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuperclass_subscript_expression" ):
                return visitor.visitSuperclass_subscript_expression(self)
            else:
                return visitor.visitChildren(self)


    class Superclass_initializer_expressionContext(Superclass_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Swift5Parser.Superclass_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUPER(self):
            return self.getToken(Swift5Parser.SUPER, 0)
        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)
        def INIT(self):
            return self.getToken(Swift5Parser.INIT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperclass_initializer_expression" ):
                listener.enterSuperclass_initializer_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperclass_initializer_expression" ):
                listener.exitSuperclass_initializer_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuperclass_initializer_expression" ):
                return visitor.visitSuperclass_initializer_expression(self)
            else:
                return visitor.visitChildren(self)


    class Superclass_method_expressionContext(Superclass_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Swift5Parser.Superclass_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUPER(self):
            return self.getToken(Swift5Parser.SUPER, 0)
        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperclass_method_expression" ):
                listener.enterSuperclass_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperclass_method_expression" ):
                listener.exitSuperclass_method_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuperclass_method_expression" ):
                return visitor.visitSuperclass_method_expression(self)
            else:
                return visitor.visitChildren(self)



    def superclass_expression(self):

        localctx = Swift5Parser.Superclass_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_superclass_expression)
        try:
            self.state = 2227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                localctx = Swift5Parser.Superclass_method_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2216
                self.match(Swift5Parser.SUPER)
                self.state = 2217
                self.match(Swift5Parser.DOT)
                self.state = 2218
                self.identifier()
                pass

            elif la_ == 2:
                localctx = Swift5Parser.Superclass_subscript_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2219
                self.match(Swift5Parser.SUPER)
                self.state = 2220
                self.match(Swift5Parser.LBRACK)
                self.state = 2221
                self.function_call_argument_list()
                self.state = 2222
                self.match(Swift5Parser.RBRACK)
                pass

            elif la_ == 3:
                localctx = Swift5Parser.Superclass_initializer_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2224
                self.match(Swift5Parser.SUPER)
                self.state = 2225
                self.match(Swift5Parser.DOT)
                self.state = 2226
                self.match(Swift5Parser.INIT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closure_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def closure_signature(self):
            return self.getTypedRuleContext(Swift5Parser.Closure_signatureContext,0)


        def statements(self):
            return self.getTypedRuleContext(Swift5Parser.StatementsContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_closure_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosure_expression" ):
                listener.enterClosure_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosure_expression" ):
                listener.exitClosure_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosure_expression" ):
                return visitor.visitClosure_expression(self)
            else:
                return visitor.visitChildren(self)




    def closure_expression(self):

        localctx = Swift5Parser.Closure_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_closure_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2229
            self.match(Swift5Parser.LCURLY)
            self.state = 2231
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.state = 2230
                self.closure_signature()


            self.state = 2234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                self.state = 2233
                self.statements()


            self.state = 2236
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closure_signatureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closure_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Closure_parameter_clauseContext,0)


        def IN(self):
            return self.getToken(Swift5Parser.IN, 0)

        def capture_list(self):
            return self.getTypedRuleContext(Swift5Parser.Capture_listContext,0)


        def THROWS(self):
            return self.getToken(Swift5Parser.THROWS, 0)

        def function_result(self):
            return self.getTypedRuleContext(Swift5Parser.Function_resultContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_closure_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosure_signature" ):
                listener.enterClosure_signature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosure_signature" ):
                listener.exitClosure_signature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosure_signature" ):
                return visitor.visitClosure_signature(self)
            else:
                return visitor.visitChildren(self)




    def closure_signature(self):

        localctx = Swift5Parser.Closure_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_closure_signature)
        self._la = 0 # Token type
        try:
            self.state = 2253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Swift5Parser.LBRACK:
                    self.state = 2238
                    self.capture_list()


                self.state = 2241
                self.closure_parameter_clause()
                self.state = 2243
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                if la_ == 1:
                    self.state = 2242
                    self.match(Swift5Parser.THROWS)


                self.state = 2246
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
                if la_ == 1:
                    self.state = 2245
                    self.function_result()


                self.state = 2248
                self.match(Swift5Parser.IN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2250
                self.capture_list()
                self.state = 2251
                self.match(Swift5Parser.IN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closure_parameter_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def closure_parameter_list(self):
            return self.getTypedRuleContext(Swift5Parser.Closure_parameter_listContext,0)


        def identifier_list(self):
            return self.getTypedRuleContext(Swift5Parser.Identifier_listContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_closure_parameter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosure_parameter_clause" ):
                listener.enterClosure_parameter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosure_parameter_clause" ):
                listener.exitClosure_parameter_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosure_parameter_clause" ):
                return visitor.visitClosure_parameter_clause(self)
            else:
                return visitor.visitChildren(self)




    def closure_parameter_clause(self):

        localctx = Swift5Parser.Closure_parameter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_closure_parameter_clause)
        self._la = 0 # Token type
        try:
            self.state = 2261
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.LPAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2255
                self.match(Swift5Parser.LPAREN)
                self.state = 2257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET) | (1 << Swift5Parser.WILL_SET) | (1 << Swift5Parser.DID_SET) | (1 << Swift5Parser.INDIRECT) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.LEFT) | (1 << Swift5Parser.RIGHT) | (1 << Swift5Parser.NONE) | (1 << Swift5Parser.PRECEDENCE_GROUP) | (1 << Swift5Parser.HIGHER_THAN) | (1 << Swift5Parser.LOWER_THAN) | (1 << Swift5Parser.ASSIGNMENT) | (1 << Swift5Parser.ASSOCIATIVITY) | (1 << Swift5Parser.POSTFIX) | (1 << Swift5Parser.OPERATOR) | (1 << Swift5Parser.OS) | (1 << Swift5Parser.ARCH) | (1 << Swift5Parser.SWIFT) | (1 << Swift5Parser.COMPILER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)) | (1 << (Swift5Parser.SELF_BIG - 64)) | (1 << (Swift5Parser.MAC_OS - 64)) | (1 << (Swift5Parser.I_OS - 64)) | (1 << (Swift5Parser.OSX - 64)) | (1 << (Swift5Parser.WATCH_OS - 64)) | (1 << (Swift5Parser.TV_OS - 64)) | (1 << (Swift5Parser.LINUX - 64)) | (1 << (Swift5Parser.WINDOWS - 64)) | (1 << (Swift5Parser.I386 - 64)) | (1 << (Swift5Parser.X86_64 - 64)) | (1 << (Swift5Parser.ARM - 64)) | (1 << (Swift5Parser.ARM64 - 64)) | (1 << (Swift5Parser.SIMULATOR - 64)) | (1 << (Swift5Parser.MAC_CATALYST - 64)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.FILE - 64)) | (1 << (Swift5Parser.LINE - 64)))) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) != 0):
                    self.state = 2256
                    self.closure_parameter_list()


                self.state = 2259
                self.match(Swift5Parser.RPAREN)
                pass
            elif token in [Swift5Parser.AS, Swift5Parser.ALPHA, Swift5Parser.CATCH, Swift5Parser.CLASS, Swift5Parser.DEFAULT, Swift5Parser.DO, Swift5Parser.GUARD, Swift5Parser.FOR, Swift5Parser.IN, Swift5Parser.INTERNAL, Swift5Parser.FINAL, Swift5Parser.OPEN, Swift5Parser.PRIVATE, Swift5Parser.PUBLIC, Swift5Parser.WHERE, Swift5Parser.WHILE, Swift5Parser.PROTOCOL, Swift5Parser.GET, Swift5Parser.SET, Swift5Parser.WILL_SET, Swift5Parser.DID_SET, Swift5Parser.INDIRECT, Swift5Parser.PREFIX, Swift5Parser.INFIX, Swift5Parser.LEFT, Swift5Parser.RIGHT, Swift5Parser.NONE, Swift5Parser.PRECEDENCE_GROUP, Swift5Parser.HIGHER_THAN, Swift5Parser.LOWER_THAN, Swift5Parser.ASSIGNMENT, Swift5Parser.ASSOCIATIVITY, Swift5Parser.POSTFIX, Swift5Parser.OPERATOR, Swift5Parser.OS, Swift5Parser.ARCH, Swift5Parser.SWIFT, Swift5Parser.COMPILER, Swift5Parser.CAN_IMPORT, Swift5Parser.TARGET_ENVIRONMENT, Swift5Parser.CONVENIENCE, Swift5Parser.DYNAMIC, Swift5Parser.LAZY, Swift5Parser.OPTIONAL, Swift5Parser.OVERRIDE, Swift5Parser.REQUIRED, Swift5Parser.WEAK, Swift5Parser.UNOWNED, Swift5Parser.SAFE, Swift5Parser.UNSAFE, Swift5Parser.MUTATING, Swift5Parser.NONMUTATING, Swift5Parser.RED, Swift5Parser.BLUE, Swift5Parser.GREEN, Swift5Parser.RESOURCE_NAME, Swift5Parser.SOME, Swift5Parser.TYPE, Swift5Parser.PRECEDENCE, Swift5Parser.SELF, Swift5Parser.SELF_BIG, Swift5Parser.MAC_OS, Swift5Parser.I_OS, Swift5Parser.OSX, Swift5Parser.WATCH_OS, Swift5Parser.TV_OS, Swift5Parser.LINUX, Swift5Parser.WINDOWS, Swift5Parser.I386, Swift5Parser.X86_64, Swift5Parser.ARM, Swift5Parser.ARM64, Swift5Parser.SIMULATOR, Swift5Parser.MAC_CATALYST, Swift5Parser.I_OS_APPLICATION_EXTENSION, Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION, Swift5Parser.MAC_OS_APPLICATION_EXTENSION, Swift5Parser.FILE, Swift5Parser.LINE, Swift5Parser.GETTER, Swift5Parser.SETTER, Swift5Parser.Identifier, Swift5Parser.BACKTICK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2260
                self.identifier_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closure_parameter_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closure_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Closure_parameterContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Closure_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_closure_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosure_parameter_list" ):
                listener.enterClosure_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosure_parameter_list" ):
                listener.exitClosure_parameter_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosure_parameter_list" ):
                return visitor.visitClosure_parameter_list(self)
            else:
                return visitor.visitChildren(self)




    def closure_parameter_list(self):

        localctx = Swift5Parser.Closure_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_closure_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2263
            self.closure_parameter()
            self.state = 2268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Swift5Parser.COMMA:
                self.state = 2264
                self.match(Swift5Parser.COMMA)
                self.state = 2265
                self.closure_parameter()
                self.state = 2270
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closure_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.closure_parameter_name = None # IdentifierContext

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def type_annotation(self):
            return self.getTypedRuleContext(Swift5Parser.Type_annotationContext,0)


        def range_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Range_operatorContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_closure_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosure_parameter" ):
                listener.enterClosure_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosure_parameter" ):
                listener.exitClosure_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosure_parameter" ):
                return visitor.visitClosure_parameter(self)
            else:
                return visitor.visitChildren(self)




    def closure_parameter(self):

        localctx = Swift5Parser.Closure_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_closure_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2271
            localctx.closure_parameter_name = self.identifier()
            self.state = 2276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.COLON:
                self.state = 2272
                self.type_annotation()
                self.state = 2274
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
                if la_ == 1:
                    self.state = 2273
                    self.range_operator()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Capture_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(Swift5Parser.LBRACK, 0)

        def capture_list_items(self):
            return self.getTypedRuleContext(Swift5Parser.Capture_list_itemsContext,0)


        def RBRACK(self):
            return self.getToken(Swift5Parser.RBRACK, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_capture_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture_list" ):
                listener.enterCapture_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture_list" ):
                listener.exitCapture_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture_list" ):
                return visitor.visitCapture_list(self)
            else:
                return visitor.visitChildren(self)




    def capture_list(self):

        localctx = Swift5Parser.Capture_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_capture_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2278
            self.match(Swift5Parser.LBRACK)
            self.state = 2279
            self.capture_list_items()
            self.state = 2280
            self.match(Swift5Parser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Capture_list_itemsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capture_list_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Capture_list_itemContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Capture_list_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_capture_list_items

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture_list_items" ):
                listener.enterCapture_list_items(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture_list_items" ):
                listener.exitCapture_list_items(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture_list_items" ):
                return visitor.visitCapture_list_items(self)
            else:
                return visitor.visitChildren(self)




    def capture_list_items(self):

        localctx = Swift5Parser.Capture_list_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_capture_list_items)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2282
            self.capture_list_item()
            self.state = 2287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Swift5Parser.COMMA:
                self.state = 2283
                self.match(Swift5Parser.COMMA)
                self.state = 2284
                self.capture_list_item()
                self.state = 2289
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Capture_list_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def self_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Self_expressionContext,0)


        def capture_specifier(self):
            return self.getTypedRuleContext(Swift5Parser.Capture_specifierContext,0)


        def EQUAL(self):
            return self.getToken(Swift5Parser.EQUAL, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_capture_list_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture_list_item" ):
                listener.enterCapture_list_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture_list_item" ):
                listener.exitCapture_list_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture_list_item" ):
                return visitor.visitCapture_list_item(self)
            else:
                return visitor.visitChildren(self)




    def capture_list_item(self):

        localctx = Swift5Parser.Capture_list_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_capture_list_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.state = 2290
                self.capture_specifier()


            self.state = 2300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.state = 2293
                self.identifier()
                self.state = 2295
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                if la_ == 1:
                    self.state = 2294
                    self.match(Swift5Parser.EQUAL)


                self.state = 2297
                self.expression()
                pass

            elif la_ == 2:
                self.state = 2299
                self.self_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Capture_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WEAK(self):
            return self.getToken(Swift5Parser.WEAK, 0)

        def UNOWNED(self):
            return self.getToken(Swift5Parser.UNOWNED, 0)

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def SAFE(self):
            return self.getToken(Swift5Parser.SAFE, 0)

        def UNSAFE(self):
            return self.getToken(Swift5Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_capture_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture_specifier" ):
                listener.enterCapture_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture_specifier" ):
                listener.exitCapture_specifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture_specifier" ):
                return visitor.visitCapture_specifier(self)
            else:
                return visitor.visitChildren(self)




    def capture_specifier(self):

        localctx = Swift5Parser.Capture_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_capture_specifier)
        self._la = 0 # Token type
        try:
            self.state = 2309
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.WEAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2302
                self.match(Swift5Parser.WEAK)
                pass
            elif token in [Swift5Parser.UNOWNED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2303
                self.match(Swift5Parser.UNOWNED)
                self.state = 2307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Swift5Parser.LPAREN:
                    self.state = 2304
                    self.match(Swift5Parser.LPAREN)
                    self.state = 2305
                    _la = self._input.LA(1)
                    if not(_la==Swift5Parser.SAFE or _la==Swift5Parser.UNSAFE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2306
                    self.match(Swift5Parser.RPAREN)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Implicit_member_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.DOT)
            else:
                return self.getToken(Swift5Parser.DOT, i)

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def keyword(self):
            return self.getTypedRuleContext(Swift5Parser.KeywordContext,0)


        def postfix_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Postfix_expressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_implicit_member_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicit_member_expression" ):
                listener.enterImplicit_member_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicit_member_expression" ):
                listener.exitImplicit_member_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplicit_member_expression" ):
                return visitor.visitImplicit_member_expression(self)
            else:
                return visitor.visitChildren(self)




    def implicit_member_expression(self):

        localctx = Swift5Parser.Implicit_member_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_implicit_member_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2311
            self.match(Swift5Parser.DOT)
            self.state = 2314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.state = 2312
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2313
                self.keyword()
                pass


            self.state = 2318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.state = 2316
                self.match(Swift5Parser.DOT)
                self.state = 2317
                self.postfix_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parenthesized_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_parenthesized_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesized_operator" ):
                listener.enterParenthesized_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesized_operator" ):
                listener.exitParenthesized_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesized_operator" ):
                return visitor.visitParenthesized_operator(self)
            else:
                return visitor.visitChildren(self)




    def parenthesized_operator(self):

        localctx = Swift5Parser.Parenthesized_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_parenthesized_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2320
            self.match(Swift5Parser.LPAREN)
            self.state = 2321
            self.operator()
            self.state = 2322
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parenthesized_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_parenthesized_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesized_expression" ):
                listener.enterParenthesized_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesized_expression" ):
                listener.exitParenthesized_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesized_expression" ):
                return visitor.visitParenthesized_expression(self)
            else:
                return visitor.visitChildren(self)




    def parenthesized_expression(self):

        localctx = Swift5Parser.Parenthesized_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_parenthesized_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2324
            self.match(Swift5Parser.LPAREN)
            self.state = 2325
            self.expression()
            self.state = 2326
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def tuple_element(self):
            return self.getTypedRuleContext(Swift5Parser.Tuple_elementContext,0)


        def COMMA(self):
            return self.getToken(Swift5Parser.COMMA, 0)

        def tuple_element_list(self):
            return self.getTypedRuleContext(Swift5Parser.Tuple_element_listContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_tuple_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_expression" ):
                listener.enterTuple_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_expression" ):
                listener.exitTuple_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTuple_expression" ):
                return visitor.visitTuple_expression(self)
            else:
                return visitor.visitChildren(self)




    def tuple_expression(self):

        localctx = Swift5Parser.Tuple_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_tuple_expression)
        try:
            self.state = 2336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2328
                self.match(Swift5Parser.LPAREN)
                self.state = 2329
                self.match(Swift5Parser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2330
                self.match(Swift5Parser.LPAREN)
                self.state = 2331
                self.tuple_element()
                self.state = 2332
                self.match(Swift5Parser.COMMA)
                self.state = 2333
                self.tuple_element_list()
                self.state = 2334
                self.match(Swift5Parser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_element_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tuple_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Tuple_elementContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Tuple_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_tuple_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_element_list" ):
                listener.enterTuple_element_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_element_list" ):
                listener.exitTuple_element_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTuple_element_list" ):
                return visitor.visitTuple_element_list(self)
            else:
                return visitor.visitChildren(self)




    def tuple_element_list(self):

        localctx = Swift5Parser.Tuple_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_tuple_element_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2338
            self.tuple_element()
            self.state = 2343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Swift5Parser.COMMA:
                self.state = 2339
                self.match(Swift5Parser.COMMA)
                self.state = 2340
                self.tuple_element()
                self.state = 2345
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_tuple_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_element" ):
                listener.enterTuple_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_element" ):
                listener.exitTuple_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTuple_element" ):
                return visitor.visitTuple_element(self)
            else:
                return visitor.visitChildren(self)




    def tuple_element(self):

        localctx = Swift5Parser.Tuple_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_tuple_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.state = 2346
                self.identifier()
                self.state = 2347
                self.match(Swift5Parser.COLON)


            self.state = 2351
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wildcard_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(Swift5Parser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_wildcard_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcard_expression" ):
                listener.enterWildcard_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcard_expression" ):
                listener.exitWildcard_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcard_expression" ):
                return visitor.visitWildcard_expression(self)
            else:
                return visitor.visitChildren(self)




    def wildcard_expression(self):

        localctx = Swift5Parser.Wildcard_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_wildcard_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2353
            self.match(Swift5Parser.UNDERSCORE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_path_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKSLASH(self):
            return self.getToken(Swift5Parser.BACKSLASH, 0)

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def key_path_components(self):
            return self.getTypedRuleContext(Swift5Parser.Key_path_componentsContext,0)


        def type(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_key_path_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_path_expression" ):
                listener.enterKey_path_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_path_expression" ):
                listener.exitKey_path_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey_path_expression" ):
                return visitor.visitKey_path_expression(self)
            else:
                return visitor.visitChildren(self)




    def key_path_expression(self):

        localctx = Swift5Parser.Key_path_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_key_path_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2355
            self.match(Swift5Parser.BACKSLASH)
            self.state = 2357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET) | (1 << Swift5Parser.WILL_SET) | (1 << Swift5Parser.DID_SET) | (1 << Swift5Parser.INDIRECT) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.LEFT) | (1 << Swift5Parser.RIGHT) | (1 << Swift5Parser.NONE) | (1 << Swift5Parser.PRECEDENCE_GROUP) | (1 << Swift5Parser.HIGHER_THAN) | (1 << Swift5Parser.LOWER_THAN) | (1 << Swift5Parser.ASSIGNMENT) | (1 << Swift5Parser.ASSOCIATIVITY) | (1 << Swift5Parser.POSTFIX) | (1 << Swift5Parser.OPERATOR) | (1 << Swift5Parser.OS) | (1 << Swift5Parser.ARCH) | (1 << Swift5Parser.SWIFT) | (1 << Swift5Parser.COMPILER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.ANY - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)) | (1 << (Swift5Parser.SELF_BIG - 64)) | (1 << (Swift5Parser.MAC_OS - 64)) | (1 << (Swift5Parser.I_OS - 64)) | (1 << (Swift5Parser.OSX - 64)) | (1 << (Swift5Parser.WATCH_OS - 64)) | (1 << (Swift5Parser.TV_OS - 64)) | (1 << (Swift5Parser.LINUX - 64)) | (1 << (Swift5Parser.WINDOWS - 64)) | (1 << (Swift5Parser.I386 - 64)) | (1 << (Swift5Parser.X86_64 - 64)) | (1 << (Swift5Parser.ARM - 64)) | (1 << (Swift5Parser.ARM64 - 64)) | (1 << (Swift5Parser.SIMULATOR - 64)) | (1 << (Swift5Parser.MAC_CATALYST - 64)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.FILE - 64)) | (1 << (Swift5Parser.LINE - 64)))) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.LPAREN - 135)) | (1 << (Swift5Parser.LBRACK - 135)) | (1 << (Swift5Parser.AT - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) != 0):
                self.state = 2356
                self.type(0)


            self.state = 2359
            self.match(Swift5Parser.DOT)
            self.state = 2360
            self.key_path_components()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_path_componentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_path_component(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Key_path_componentContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Key_path_componentContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.DOT)
            else:
                return self.getToken(Swift5Parser.DOT, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_key_path_components

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_path_components" ):
                listener.enterKey_path_components(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_path_components" ):
                listener.exitKey_path_components(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey_path_components" ):
                return visitor.visitKey_path_components(self)
            else:
                return visitor.visitChildren(self)




    def key_path_components(self):

        localctx = Swift5Parser.Key_path_componentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_key_path_components)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2362
            self.key_path_component()
            self.state = 2367
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,284,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2363
                    self.match(Swift5Parser.DOT)
                    self.state = 2364
                    self.key_path_component() 
                self.state = 2369
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,284,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_path_componentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def key_path_postfixes(self):
            return self.getTypedRuleContext(Swift5Parser.Key_path_postfixesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_key_path_component

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_path_component" ):
                listener.enterKey_path_component(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_path_component" ):
                listener.exitKey_path_component(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey_path_component" ):
                return visitor.visitKey_path_component(self)
            else:
                return visitor.visitChildren(self)




    def key_path_component(self):

        localctx = Swift5Parser.Key_path_componentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_key_path_component)
        try:
            self.state = 2375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2370
                self.identifier()
                self.state = 2372
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
                if la_ == 1:
                    self.state = 2371
                    self.key_path_postfixes()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2374
                self.key_path_postfixes()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_path_postfixesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_path_postfix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Key_path_postfixContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Key_path_postfixContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_key_path_postfixes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_path_postfixes" ):
                listener.enterKey_path_postfixes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_path_postfixes" ):
                listener.exitKey_path_postfixes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey_path_postfixes" ):
                return visitor.visitKey_path_postfixes(self)
            else:
                return visitor.visitChildren(self)




    def key_path_postfixes(self):

        localctx = Swift5Parser.Key_path_postfixesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_key_path_postfixes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2378 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2377
                    self.key_path_postfix()

                else:
                    raise NoViableAltException(self)
                self.state = 2380 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,287,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_path_postfixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUESTION(self):
            return self.getToken(Swift5Parser.QUESTION, 0)

        def BANG(self):
            return self.getToken(Swift5Parser.BANG, 0)

        def SELF(self):
            return self.getToken(Swift5Parser.SELF, 0)

        def LBRACK(self):
            return self.getToken(Swift5Parser.LBRACK, 0)

        def function_call_argument_list(self):
            return self.getTypedRuleContext(Swift5Parser.Function_call_argument_listContext,0)


        def RBRACK(self):
            return self.getToken(Swift5Parser.RBRACK, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_key_path_postfix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_path_postfix" ):
                listener.enterKey_path_postfix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_path_postfix" ):
                listener.exitKey_path_postfix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey_path_postfix" ):
                return visitor.visitKey_path_postfix(self)
            else:
                return visitor.visitChildren(self)




    def key_path_postfix(self):

        localctx = Swift5Parser.Key_path_postfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_key_path_postfix)
        try:
            self.state = 2389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.QUESTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2382
                self.match(Swift5Parser.QUESTION)
                pass
            elif token in [Swift5Parser.BANG]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2383
                self.match(Swift5Parser.BANG)
                pass
            elif token in [Swift5Parser.SELF]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2384
                self.match(Swift5Parser.SELF)
                pass
            elif token in [Swift5Parser.LBRACK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2385
                self.match(Swift5Parser.LBRACK)
                self.state = 2386
                self.function_call_argument_list()
                self.state = 2387
                self.match(Swift5Parser.RBRACK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selector_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH_SELECTOR(self):
            return self.getToken(Swift5Parser.HASH_SELECTOR, 0)

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def GETTER(self):
            return self.getToken(Swift5Parser.GETTER, 0)

        def SETTER(self):
            return self.getToken(Swift5Parser.SETTER, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_selector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelector_expression" ):
                listener.enterSelector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelector_expression" ):
                listener.exitSelector_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelector_expression" ):
                return visitor.visitSelector_expression(self)
            else:
                return visitor.visitChildren(self)




    def selector_expression(self):

        localctx = Swift5Parser.Selector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_selector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2391
            self.match(Swift5Parser.HASH_SELECTOR)
            self.state = 2392
            self.match(Swift5Parser.LPAREN)
            self.state = 2395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
            if la_ == 1:
                self.state = 2393
                _la = self._input.LA(1)
                if not(_la==Swift5Parser.GETTER or _la==Swift5Parser.SETTER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2394
                self.match(Swift5Parser.COLON)


            self.state = 2397
            self.expression()
            self.state = 2398
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_path_string_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH_KEYPATH(self):
            return self.getToken(Swift5Parser.HASH_KEYPATH, 0)

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_key_path_string_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_path_string_expression" ):
                listener.enterKey_path_string_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_path_string_expression" ):
                listener.exitKey_path_string_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey_path_string_expression" ):
                return visitor.visitKey_path_string_expression(self)
            else:
                return visitor.visitChildren(self)




    def key_path_string_expression(self):

        localctx = Swift5Parser.Key_path_string_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_key_path_string_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2400
            self.match(Swift5Parser.HASH_KEYPATH)
            self.state = 2401
            self.match(Swift5Parser.LPAREN)
            self.state = 2402
            self.expression()
            self.state = 2403
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Primary_expressionContext,0)


        def function_call_suffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Function_call_suffixContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Function_call_suffixContext,i)


        def initializer_suffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Initializer_suffixContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Initializer_suffixContext,i)


        def explicit_member_suffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Explicit_member_suffixContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Explicit_member_suffixContext,i)


        def postfix_self_suffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Postfix_self_suffixContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Postfix_self_suffixContext,i)


        def subscript_suffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Subscript_suffixContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Subscript_suffixContext,i)


        def forced_value_suffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Forced_value_suffixContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Forced_value_suffixContext,i)


        def optional_chaining_suffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Optional_chaining_suffixContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Optional_chaining_suffixContext,i)


        def postfix_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Postfix_operatorContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Postfix_operatorContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_postfix_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix_expression" ):
                listener.enterPostfix_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix_expression" ):
                listener.exitPostfix_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfix_expression" ):
                return visitor.visitPostfix_expression(self)
            else:
                return visitor.visitChildren(self)




    def postfix_expression(self):

        localctx = Swift5Parser.Postfix_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_postfix_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2405
            self.primary_expression()
            self.state = 2415
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,291,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2413
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                    if la_ == 1:
                        self.state = 2406
                        self.function_call_suffix()
                        pass

                    elif la_ == 2:
                        self.state = 2407
                        self.initializer_suffix()
                        pass

                    elif la_ == 3:
                        self.state = 2408
                        self.explicit_member_suffix()
                        pass

                    elif la_ == 4:
                        self.state = 2409
                        self.postfix_self_suffix()
                        pass

                    elif la_ == 5:
                        self.state = 2410
                        self.subscript_suffix()
                        pass

                    elif la_ == 6:
                        self.state = 2411
                        self.forced_value_suffix()
                        pass

                    elif la_ == 7:
                        self.state = 2412
                        self.optional_chaining_suffix()
                        pass

             
                self.state = 2417
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,291,self._ctx)

            self.state = 2421
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,292,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 2418
                    self.postfix_operator() 
                self.state = 2423
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,292,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_call_suffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailing_closures(self):
            return self.getTypedRuleContext(Swift5Parser.Trailing_closuresContext,0)


        def function_call_argument_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Function_call_argument_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_function_call_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_suffix" ):
                listener.enterFunction_call_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_suffix" ):
                listener.exitFunction_call_suffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call_suffix" ):
                return visitor.visitFunction_call_suffix(self)
            else:
                return visitor.visitChildren(self)




    def function_call_suffix(self):

        localctx = Swift5Parser.Function_call_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_function_call_suffix)
        self._la = 0 # Token type
        try:
            self.state = 2429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Swift5Parser.LPAREN:
                    self.state = 2424
                    self.function_call_argument_clause()


                self.state = 2427
                self.trailing_closures()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2428
                self.function_call_argument_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initializer_suffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def INIT(self):
            return self.getToken(Swift5Parser.INIT, 0)

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def argument_names(self):
            return self.getTypedRuleContext(Swift5Parser.Argument_namesContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_initializer_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer_suffix" ):
                listener.enterInitializer_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer_suffix" ):
                listener.exitInitializer_suffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer_suffix" ):
                return visitor.visitInitializer_suffix(self)
            else:
                return visitor.visitChildren(self)




    def initializer_suffix(self):

        localctx = Swift5Parser.Initializer_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_initializer_suffix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2431
            self.match(Swift5Parser.DOT)
            self.state = 2432
            self.match(Swift5Parser.INIT)
            self.state = 2437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 2433
                self.match(Swift5Parser.LPAREN)
                self.state = 2434
                self.argument_names()
                self.state = 2435
                self.match(Swift5Parser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_member_suffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def Decimal_digits(self):
            return self.getToken(Swift5Parser.Decimal_digits, 0)

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def generic_argument_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_argument_clauseContext,0)


        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def argument_names(self):
            return self.getTypedRuleContext(Swift5Parser.Argument_namesContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_explicit_member_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_member_suffix" ):
                listener.enterExplicit_member_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_member_suffix" ):
                listener.exitExplicit_member_suffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicit_member_suffix" ):
                return visitor.visitExplicit_member_suffix(self)
            else:
                return visitor.visitChildren(self)




    def explicit_member_suffix(self):

        localctx = Swift5Parser.Explicit_member_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_explicit_member_suffix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2439
            self.match(Swift5Parser.DOT)
            self.state = 2449
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.Decimal_digits]:
                self.state = 2440
                self.match(Swift5Parser.Decimal_digits)
                pass
            elif token in [Swift5Parser.AS, Swift5Parser.ALPHA, Swift5Parser.CATCH, Swift5Parser.CLASS, Swift5Parser.DEFAULT, Swift5Parser.DO, Swift5Parser.GUARD, Swift5Parser.FOR, Swift5Parser.IN, Swift5Parser.INTERNAL, Swift5Parser.FINAL, Swift5Parser.OPEN, Swift5Parser.PRIVATE, Swift5Parser.PUBLIC, Swift5Parser.WHERE, Swift5Parser.WHILE, Swift5Parser.PROTOCOL, Swift5Parser.GET, Swift5Parser.SET, Swift5Parser.WILL_SET, Swift5Parser.DID_SET, Swift5Parser.INDIRECT, Swift5Parser.PREFIX, Swift5Parser.INFIX, Swift5Parser.LEFT, Swift5Parser.RIGHT, Swift5Parser.NONE, Swift5Parser.PRECEDENCE_GROUP, Swift5Parser.HIGHER_THAN, Swift5Parser.LOWER_THAN, Swift5Parser.ASSIGNMENT, Swift5Parser.ASSOCIATIVITY, Swift5Parser.POSTFIX, Swift5Parser.OPERATOR, Swift5Parser.OS, Swift5Parser.ARCH, Swift5Parser.SWIFT, Swift5Parser.COMPILER, Swift5Parser.CAN_IMPORT, Swift5Parser.TARGET_ENVIRONMENT, Swift5Parser.CONVENIENCE, Swift5Parser.DYNAMIC, Swift5Parser.LAZY, Swift5Parser.OPTIONAL, Swift5Parser.OVERRIDE, Swift5Parser.REQUIRED, Swift5Parser.WEAK, Swift5Parser.UNOWNED, Swift5Parser.SAFE, Swift5Parser.UNSAFE, Swift5Parser.MUTATING, Swift5Parser.NONMUTATING, Swift5Parser.RED, Swift5Parser.BLUE, Swift5Parser.GREEN, Swift5Parser.RESOURCE_NAME, Swift5Parser.SOME, Swift5Parser.TYPE, Swift5Parser.PRECEDENCE, Swift5Parser.SELF, Swift5Parser.SELF_BIG, Swift5Parser.MAC_OS, Swift5Parser.I_OS, Swift5Parser.OSX, Swift5Parser.WATCH_OS, Swift5Parser.TV_OS, Swift5Parser.LINUX, Swift5Parser.WINDOWS, Swift5Parser.I386, Swift5Parser.X86_64, Swift5Parser.ARM, Swift5Parser.ARM64, Swift5Parser.SIMULATOR, Swift5Parser.MAC_CATALYST, Swift5Parser.I_OS_APPLICATION_EXTENSION, Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION, Swift5Parser.MAC_OS_APPLICATION_EXTENSION, Swift5Parser.FILE, Swift5Parser.LINE, Swift5Parser.GETTER, Swift5Parser.SETTER, Swift5Parser.Identifier, Swift5Parser.BACKTICK]:
                self.state = 2441
                self.identifier()
                self.state = 2447
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
                if la_ == 1:
                    self.state = 2442
                    self.generic_argument_clause()

                elif la_ == 2:
                    self.state = 2443
                    self.match(Swift5Parser.LPAREN)
                    self.state = 2444
                    self.argument_names()
                    self.state = 2445
                    self.match(Swift5Parser.RPAREN)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_self_suffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def SELF(self):
            return self.getToken(Swift5Parser.SELF, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_postfix_self_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix_self_suffix" ):
                listener.enterPostfix_self_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix_self_suffix" ):
                listener.exitPostfix_self_suffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfix_self_suffix" ):
                return visitor.visitPostfix_self_suffix(self)
            else:
                return visitor.visitChildren(self)




    def postfix_self_suffix(self):

        localctx = Swift5Parser.Postfix_self_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_postfix_self_suffix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2451
            self.match(Swift5Parser.DOT)
            self.state = 2452
            self.match(Swift5Parser.SELF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subscript_suffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(Swift5Parser.LBRACK, 0)

        def function_call_argument_list(self):
            return self.getTypedRuleContext(Swift5Parser.Function_call_argument_listContext,0)


        def RBRACK(self):
            return self.getToken(Swift5Parser.RBRACK, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_subscript_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript_suffix" ):
                listener.enterSubscript_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript_suffix" ):
                listener.exitSubscript_suffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript_suffix" ):
                return visitor.visitSubscript_suffix(self)
            else:
                return visitor.visitChildren(self)




    def subscript_suffix(self):

        localctx = Swift5Parser.Subscript_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_subscript_suffix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2454
            self.match(Swift5Parser.LBRACK)
            self.state = 2455
            self.function_call_argument_list()
            self.state = 2456
            self.match(Swift5Parser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Forced_value_suffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANG(self):
            return self.getToken(Swift5Parser.BANG, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_forced_value_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForced_value_suffix" ):
                listener.enterForced_value_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForced_value_suffix" ):
                listener.exitForced_value_suffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForced_value_suffix" ):
                return visitor.visitForced_value_suffix(self)
            else:
                return visitor.visitChildren(self)




    def forced_value_suffix(self):

        localctx = Swift5Parser.Forced_value_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_forced_value_suffix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2458
            if not SwiftSupport.isBinaryOp(_input):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "!SwiftSupport.isBinaryOp(_input)")
            self.state = 2459
            self.match(Swift5Parser.BANG)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Optional_chaining_suffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUESTION(self):
            return self.getToken(Swift5Parser.QUESTION, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_optional_chaining_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptional_chaining_suffix" ):
                listener.enterOptional_chaining_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptional_chaining_suffix" ):
                listener.exitOptional_chaining_suffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptional_chaining_suffix" ):
                return visitor.visitOptional_chaining_suffix(self)
            else:
                return visitor.visitChildren(self)




    def optional_chaining_suffix(self):

        localctx = Swift5Parser.Optional_chaining_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_optional_chaining_suffix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2461
            if not SwiftSupport.isBinaryOp(_input):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "!SwiftSupport.isBinaryOp(_input)")
            self.state = 2462
            self.match(Swift5Parser.QUESTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_call_argument_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def function_call_argument_list(self):
            return self.getTypedRuleContext(Swift5Parser.Function_call_argument_listContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_function_call_argument_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_argument_clause" ):
                listener.enterFunction_call_argument_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_argument_clause" ):
                listener.exitFunction_call_argument_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call_argument_clause" ):
                return visitor.visitFunction_call_argument_clause(self)
            else:
                return visitor.visitChildren(self)




    def function_call_argument_clause(self):

        localctx = Swift5Parser.Function_call_argument_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_function_call_argument_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2464
            self.match(Swift5Parser.LPAREN)
            self.state = 2466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.state = 2465
                self.function_call_argument_list()


            self.state = 2468
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_call_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_call_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Function_call_argumentContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Function_call_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_function_call_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_argument_list" ):
                listener.enterFunction_call_argument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_argument_list" ):
                listener.exitFunction_call_argument_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call_argument_list" ):
                return visitor.visitFunction_call_argument_list(self)
            else:
                return visitor.visitChildren(self)




    def function_call_argument_list(self):

        localctx = Swift5Parser.Function_call_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_function_call_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2470
            self.function_call_argument()
            self.state = 2475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Swift5Parser.COMMA:
                self.state = 2471
                self.match(Swift5Parser.COMMA)
                self.state = 2472
                self.function_call_argument()
                self.state = 2477
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_call_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def argument_name(self):
            return self.getTypedRuleContext(Swift5Parser.Argument_nameContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_function_call_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_argument" ):
                listener.enterFunction_call_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_argument" ):
                listener.exitFunction_call_argument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call_argument" ):
                return visitor.visitFunction_call_argument(self)
            else:
                return visitor.visitChildren(self)




    def function_call_argument(self):

        localctx = Swift5Parser.Function_call_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_function_call_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2479
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                self.state = 2478
                self.argument_name()


            self.state = 2484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2481
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2482
                self.expression()
                pass

            elif la_ == 3:
                self.state = 2483
                self.operator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trailing_closuresContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closure_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Closure_expressionContext,0)


        def labeled_trailing_closures(self):
            return self.getTypedRuleContext(Swift5Parser.Labeled_trailing_closuresContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_trailing_closures

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailing_closures" ):
                listener.enterTrailing_closures(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailing_closures" ):
                listener.exitTrailing_closures(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailing_closures" ):
                return visitor.visitTrailing_closures(self)
            else:
                return visitor.visitChildren(self)




    def trailing_closures(self):

        localctx = Swift5Parser.Trailing_closuresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_trailing_closures)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2486
            self.closure_expression()
            self.state = 2488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.state = 2487
                self.labeled_trailing_closures()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Labeled_trailing_closuresContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeled_trailing_closure(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Labeled_trailing_closureContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Labeled_trailing_closureContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_labeled_trailing_closures

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeled_trailing_closures" ):
                listener.enterLabeled_trailing_closures(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeled_trailing_closures" ):
                listener.exitLabeled_trailing_closures(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeled_trailing_closures" ):
                return visitor.visitLabeled_trailing_closures(self)
            else:
                return visitor.visitChildren(self)




    def labeled_trailing_closures(self):

        localctx = Swift5Parser.Labeled_trailing_closuresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_labeled_trailing_closures)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2491 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2490
                    self.labeled_trailing_closure()

                else:
                    raise NoViableAltException(self)
                self.state = 2493 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,303,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Labeled_trailing_closureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def closure_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Closure_expressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_labeled_trailing_closure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeled_trailing_closure" ):
                listener.enterLabeled_trailing_closure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeled_trailing_closure" ):
                listener.exitLabeled_trailing_closure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeled_trailing_closure" ):
                return visitor.visitLabeled_trailing_closure(self)
            else:
                return visitor.visitChildren(self)




    def labeled_trailing_closure(self):

        localctx = Swift5Parser.Labeled_trailing_closureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_labeled_trailing_closure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2495
            self.identifier()
            self.state = 2496
            self.match(Swift5Parser.COLON)
            self.state = 2497
            self.closure_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Argument_nameContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Argument_nameContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_argument_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_names" ):
                listener.enterArgument_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_names" ):
                listener.exitArgument_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument_names" ):
                return visitor.visitArgument_names(self)
            else:
                return visitor.visitChildren(self)




    def argument_names(self):

        localctx = Swift5Parser.Argument_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_argument_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2500 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2499
                self.argument_name()
                self.state = 2502 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET) | (1 << Swift5Parser.WILL_SET) | (1 << Swift5Parser.DID_SET) | (1 << Swift5Parser.INDIRECT) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.LEFT) | (1 << Swift5Parser.RIGHT) | (1 << Swift5Parser.NONE) | (1 << Swift5Parser.PRECEDENCE_GROUP) | (1 << Swift5Parser.HIGHER_THAN) | (1 << Swift5Parser.LOWER_THAN) | (1 << Swift5Parser.ASSIGNMENT) | (1 << Swift5Parser.ASSOCIATIVITY) | (1 << Swift5Parser.POSTFIX) | (1 << Swift5Parser.OPERATOR) | (1 << Swift5Parser.OS) | (1 << Swift5Parser.ARCH) | (1 << Swift5Parser.SWIFT) | (1 << Swift5Parser.COMPILER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)) | (1 << (Swift5Parser.SELF_BIG - 64)) | (1 << (Swift5Parser.MAC_OS - 64)) | (1 << (Swift5Parser.I_OS - 64)) | (1 << (Swift5Parser.OSX - 64)) | (1 << (Swift5Parser.WATCH_OS - 64)) | (1 << (Swift5Parser.TV_OS - 64)) | (1 << (Swift5Parser.LINUX - 64)) | (1 << (Swift5Parser.WINDOWS - 64)) | (1 << (Swift5Parser.I386 - 64)) | (1 << (Swift5Parser.X86_64 - 64)) | (1 << (Swift5Parser.ARM - 64)) | (1 << (Swift5Parser.ARM64 - 64)) | (1 << (Swift5Parser.SIMULATOR - 64)) | (1 << (Swift5Parser.MAC_CATALYST - 64)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.FILE - 64)) | (1 << (Swift5Parser.LINE - 64)))) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_argument_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_name" ):
                listener.enterArgument_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_name" ):
                listener.exitArgument_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument_name" ):
                return visitor.visitArgument_name(self)
            else:
                return visitor.visitChildren(self)




    def argument_name(self):

        localctx = Swift5Parser.Argument_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_argument_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2504
            self.identifier()
            self.state = 2505
            self.match(Swift5Parser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_type(self):
            return self.getTypedRuleContext(Swift5Parser.Function_typeContext,0)


        def array_type(self):
            return self.getTypedRuleContext(Swift5Parser.Array_typeContext,0)


        def dictionary_type(self):
            return self.getTypedRuleContext(Swift5Parser.Dictionary_typeContext,0)


        def protocol_composition_type(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_composition_typeContext,0)


        def type_identifier(self):
            return self.getTypedRuleContext(Swift5Parser.Type_identifierContext,0)


        def tuple_type(self):
            return self.getTypedRuleContext(Swift5Parser.Tuple_typeContext,0)


        def opaque_type(self):
            return self.getTypedRuleContext(Swift5Parser.Opaque_typeContext,0)


        def any_type(self):
            return self.getTypedRuleContext(Swift5Parser.Any_typeContext,0)


        def self_type(self):
            return self.getTypedRuleContext(Swift5Parser.Self_typeContext,0)


        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def type(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def QUESTION(self):
            return self.getToken(Swift5Parser.QUESTION, 0)

        def BANG(self):
            return self.getToken(Swift5Parser.BANG, 0)

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def TYPE(self):
            return self.getToken(Swift5Parser.TYPE, 0)

        def PROTOCOL(self):
            return self.getToken(Swift5Parser.PROTOCOL, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType" ):
                return visitor.visitType(self)
            else:
                return visitor.visitChildren(self)



    def type(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Swift5Parser.TypeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 522
        self.enterRecursionRule(localctx, 522, self.RULE_type, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.state = 2508
                self.function_type()
                pass

            elif la_ == 2:
                self.state = 2509
                self.array_type()
                pass

            elif la_ == 3:
                self.state = 2510
                self.dictionary_type()
                pass

            elif la_ == 4:
                self.state = 2511
                self.protocol_composition_type()
                pass

            elif la_ == 5:
                self.state = 2512
                self.type_identifier()
                pass

            elif la_ == 6:
                self.state = 2513
                self.tuple_type()
                pass

            elif la_ == 7:
                self.state = 2514
                self.opaque_type()
                pass

            elif la_ == 8:
                self.state = 2515
                self.any_type()
                pass

            elif la_ == 9:
                self.state = 2516
                self.self_type()
                pass

            elif la_ == 10:
                self.state = 2517
                self.match(Swift5Parser.LPAREN)
                self.state = 2518
                self.type(0)
                self.state = 2519
                self.match(Swift5Parser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2536
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,307,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Swift5Parser.TypeContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_type)
                    self.state = 2523
                    if not self.precpred(self._ctx, 4):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                    self.state = 2532
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
                    if la_ == 1:
                        self.state = 2524
                        if not SwiftSupport.isBinaryOp(_input):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "!SwiftSupport.isBinaryOp(_input)")
                        self.state = 2525
                        self.match(Swift5Parser.QUESTION)
                        pass

                    elif la_ == 2:
                        self.state = 2526
                        if not SwiftSupport.isBinaryOp(_input):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "!SwiftSupport.isBinaryOp(_input)")
                        self.state = 2527
                        self.match(Swift5Parser.BANG)
                        pass

                    elif la_ == 3:
                        self.state = 2528
                        self.match(Swift5Parser.DOT)
                        self.state = 2529
                        self.match(Swift5Parser.TYPE)
                        pass

                    elif la_ == 4:
                        self.state = 2530
                        self.match(Swift5Parser.DOT)
                        self.state = 2531
                        self.match(Swift5Parser.PROTOCOL)
                        pass

             
                self.state = 2538
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,307,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Type_annotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def type(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def INOUT(self):
            return self.getToken(Swift5Parser.INOUT, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_type_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_annotation" ):
                listener.enterType_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_annotation" ):
                listener.exitType_annotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_annotation" ):
                return visitor.visitType_annotation(self)
            else:
                return visitor.visitChildren(self)




    def type_annotation(self):

        localctx = Swift5Parser.Type_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_type_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2539
            self.match(Swift5Parser.COLON)
            self.state = 2541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                self.state = 2540
                self.attributes()


            self.state = 2544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.INOUT:
                self.state = 2543
                self.match(Swift5Parser.INOUT)


            self.state = 2546
            self.type(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(Swift5Parser.Type_nameContext,0)


        def generic_argument_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_argument_clauseContext,0)


        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(Swift5Parser.Type_identifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_type_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_identifier" ):
                listener.enterType_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_identifier" ):
                listener.exitType_identifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_identifier" ):
                return visitor.visitType_identifier(self)
            else:
                return visitor.visitChildren(self)




    def type_identifier(self):

        localctx = Swift5Parser.Type_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_type_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2548
            self.type_name()
            self.state = 2550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.state = 2549
                self.generic_argument_clause()


            self.state = 2554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                self.state = 2552
                self.match(Swift5Parser.DOT)
                self.state = 2553
                self.type_identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_name" ):
                return visitor.visitType_name(self)
            else:
                return visitor.visitChildren(self)




    def type_name(self):

        localctx = Swift5Parser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2556
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def tuple_type_element_list(self):
            return self.getTypedRuleContext(Swift5Parser.Tuple_type_element_listContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_tuple_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_type" ):
                listener.enterTuple_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_type" ):
                listener.exitTuple_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTuple_type" ):
                return visitor.visitTuple_type(self)
            else:
                return visitor.visitChildren(self)




    def tuple_type(self):

        localctx = Swift5Parser.Tuple_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_tuple_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2558
            self.match(Swift5Parser.LPAREN)
            self.state = 2560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET) | (1 << Swift5Parser.WILL_SET) | (1 << Swift5Parser.DID_SET) | (1 << Swift5Parser.INDIRECT) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.LEFT) | (1 << Swift5Parser.RIGHT) | (1 << Swift5Parser.NONE) | (1 << Swift5Parser.PRECEDENCE_GROUP) | (1 << Swift5Parser.HIGHER_THAN) | (1 << Swift5Parser.LOWER_THAN) | (1 << Swift5Parser.ASSIGNMENT) | (1 << Swift5Parser.ASSOCIATIVITY) | (1 << Swift5Parser.POSTFIX) | (1 << Swift5Parser.OPERATOR) | (1 << Swift5Parser.OS) | (1 << Swift5Parser.ARCH) | (1 << Swift5Parser.SWIFT) | (1 << Swift5Parser.COMPILER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.ANY - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)) | (1 << (Swift5Parser.SELF_BIG - 64)) | (1 << (Swift5Parser.MAC_OS - 64)) | (1 << (Swift5Parser.I_OS - 64)) | (1 << (Swift5Parser.OSX - 64)) | (1 << (Swift5Parser.WATCH_OS - 64)) | (1 << (Swift5Parser.TV_OS - 64)) | (1 << (Swift5Parser.LINUX - 64)) | (1 << (Swift5Parser.WINDOWS - 64)) | (1 << (Swift5Parser.I386 - 64)) | (1 << (Swift5Parser.X86_64 - 64)) | (1 << (Swift5Parser.ARM - 64)) | (1 << (Swift5Parser.ARM64 - 64)) | (1 << (Swift5Parser.SIMULATOR - 64)) | (1 << (Swift5Parser.MAC_CATALYST - 64)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.FILE - 64)) | (1 << (Swift5Parser.LINE - 64)))) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.LPAREN - 135)) | (1 << (Swift5Parser.LBRACK - 135)) | (1 << (Swift5Parser.AT - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) != 0):
                self.state = 2559
                self.tuple_type_element_list()


            self.state = 2562
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_type_element_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tuple_type_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Tuple_type_elementContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Tuple_type_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_tuple_type_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_type_element_list" ):
                listener.enterTuple_type_element_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_type_element_list" ):
                listener.exitTuple_type_element_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTuple_type_element_list" ):
                return visitor.visitTuple_type_element_list(self)
            else:
                return visitor.visitChildren(self)




    def tuple_type_element_list(self):

        localctx = Swift5Parser.Tuple_type_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_tuple_type_element_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2564
            self.tuple_type_element()
            self.state = 2569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Swift5Parser.COMMA:
                self.state = 2565
                self.match(Swift5Parser.COMMA)
                self.state = 2566
                self.tuple_type_element()
                self.state = 2571
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_type_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_name(self):
            return self.getTypedRuleContext(Swift5Parser.Element_nameContext,0)


        def type_annotation(self):
            return self.getTypedRuleContext(Swift5Parser.Type_annotationContext,0)


        def type(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def EQUAL(self):
            return self.getToken(Swift5Parser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_tuple_type_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_type_element" ):
                listener.enterTuple_type_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_type_element" ):
                listener.exitTuple_type_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTuple_type_element" ):
                return visitor.visitTuple_type_element(self)
            else:
                return visitor.visitChildren(self)




    def tuple_type_element(self):

        localctx = Swift5Parser.Tuple_type_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_tuple_type_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
            if la_ == 1:
                self.state = 2572
                self.element_name()
                self.state = 2573
                self.type_annotation()
                pass

            elif la_ == 2:
                self.state = 2575
                self.type(0)
                pass


            self.state = 2580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.EQUAL:
                self.state = 2578
                self.match(Swift5Parser.EQUAL)
                self.state = 2579
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.IdentifierContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_element_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_name" ):
                listener.enterElement_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_name" ):
                listener.exitElement_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement_name" ):
                return visitor.visitElement_name(self)
            else:
                return visitor.visitChildren(self)




    def element_name(self):

        localctx = Swift5Parser.Element_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_element_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2583 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2582
                self.identifier()
                self.state = 2585 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET) | (1 << Swift5Parser.WILL_SET) | (1 << Swift5Parser.DID_SET) | (1 << Swift5Parser.INDIRECT) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.LEFT) | (1 << Swift5Parser.RIGHT) | (1 << Swift5Parser.NONE) | (1 << Swift5Parser.PRECEDENCE_GROUP) | (1 << Swift5Parser.HIGHER_THAN) | (1 << Swift5Parser.LOWER_THAN) | (1 << Swift5Parser.ASSIGNMENT) | (1 << Swift5Parser.ASSOCIATIVITY) | (1 << Swift5Parser.POSTFIX) | (1 << Swift5Parser.OPERATOR) | (1 << Swift5Parser.OS) | (1 << Swift5Parser.ARCH) | (1 << Swift5Parser.SWIFT) | (1 << Swift5Parser.COMPILER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)) | (1 << (Swift5Parser.SELF_BIG - 64)) | (1 << (Swift5Parser.MAC_OS - 64)) | (1 << (Swift5Parser.I_OS - 64)) | (1 << (Swift5Parser.OSX - 64)) | (1 << (Swift5Parser.WATCH_OS - 64)) | (1 << (Swift5Parser.TV_OS - 64)) | (1 << (Swift5Parser.LINUX - 64)) | (1 << (Swift5Parser.WINDOWS - 64)) | (1 << (Swift5Parser.I386 - 64)) | (1 << (Swift5Parser.X86_64 - 64)) | (1 << (Swift5Parser.ARM - 64)) | (1 << (Swift5Parser.ARM64 - 64)) | (1 << (Swift5Parser.SIMULATOR - 64)) | (1 << (Swift5Parser.MAC_CATALYST - 64)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.FILE - 64)) | (1 << (Swift5Parser.LINE - 64)))) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_type_argument_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Function_type_argument_clauseContext,0)


        def arrow_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Arrow_operatorContext,0)


        def type(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def THROWS(self):
            return self.getToken(Swift5Parser.THROWS, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_function_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_type" ):
                listener.enterFunction_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_type" ):
                listener.exitFunction_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_type" ):
                return visitor.visitFunction_type(self)
            else:
                return visitor.visitChildren(self)




    def function_type(self):

        localctx = Swift5Parser.Function_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_function_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Swift5Parser.AT:
                self.state = 2587
                self.attributes()


            self.state = 2590
            self.function_type_argument_clause()
            self.state = 2592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                self.state = 2591
                self.match(Swift5Parser.THROWS)


            self.state = 2594
            self.arrow_operator()
            self.state = 2595
            self.type(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_type_argument_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def function_type_argument_list(self):
            return self.getTypedRuleContext(Swift5Parser.Function_type_argument_listContext,0)


        def range_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Range_operatorContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_function_type_argument_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_type_argument_clause" ):
                listener.enterFunction_type_argument_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_type_argument_clause" ):
                listener.exitFunction_type_argument_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_type_argument_clause" ):
                return visitor.visitFunction_type_argument_clause(self)
            else:
                return visitor.visitChildren(self)




    def function_type_argument_clause(self):

        localctx = Swift5Parser.Function_type_argument_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_function_type_argument_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2597
            self.match(Swift5Parser.LPAREN)
            self.state = 2602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET) | (1 << Swift5Parser.WILL_SET) | (1 << Swift5Parser.DID_SET) | (1 << Swift5Parser.INDIRECT) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.LEFT) | (1 << Swift5Parser.RIGHT) | (1 << Swift5Parser.NONE) | (1 << Swift5Parser.PRECEDENCE_GROUP) | (1 << Swift5Parser.HIGHER_THAN) | (1 << Swift5Parser.LOWER_THAN) | (1 << Swift5Parser.ASSIGNMENT) | (1 << Swift5Parser.ASSOCIATIVITY) | (1 << Swift5Parser.POSTFIX) | (1 << Swift5Parser.OPERATOR) | (1 << Swift5Parser.OS) | (1 << Swift5Parser.ARCH) | (1 << Swift5Parser.SWIFT) | (1 << Swift5Parser.COMPILER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.ANY - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.INOUT - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)) | (1 << (Swift5Parser.SELF_BIG - 64)) | (1 << (Swift5Parser.MAC_OS - 64)) | (1 << (Swift5Parser.I_OS - 64)) | (1 << (Swift5Parser.OSX - 64)) | (1 << (Swift5Parser.WATCH_OS - 64)) | (1 << (Swift5Parser.TV_OS - 64)) | (1 << (Swift5Parser.LINUX - 64)) | (1 << (Swift5Parser.WINDOWS - 64)) | (1 << (Swift5Parser.I386 - 64)) | (1 << (Swift5Parser.X86_64 - 64)) | (1 << (Swift5Parser.ARM - 64)) | (1 << (Swift5Parser.ARM64 - 64)) | (1 << (Swift5Parser.SIMULATOR - 64)) | (1 << (Swift5Parser.MAC_CATALYST - 64)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.FILE - 64)) | (1 << (Swift5Parser.LINE - 64)))) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.LPAREN - 135)) | (1 << (Swift5Parser.LBRACK - 135)) | (1 << (Swift5Parser.AT - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) != 0):
                self.state = 2598
                self.function_type_argument_list()
                self.state = 2600
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
                if la_ == 1:
                    self.state = 2599
                    self.range_operator()




            self.state = 2604
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_type_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_type_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Function_type_argumentContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Function_type_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_function_type_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_type_argument_list" ):
                listener.enterFunction_type_argument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_type_argument_list" ):
                listener.exitFunction_type_argument_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_type_argument_list" ):
                return visitor.visitFunction_type_argument_list(self)
            else:
                return visitor.visitChildren(self)




    def function_type_argument_list(self):

        localctx = Swift5Parser.Function_type_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_function_type_argument_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2606
            self.function_type_argument()
            self.state = 2611
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,321,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2607
                    self.match(Swift5Parser.COMMA)
                    self.state = 2608
                    self.function_type_argument() 
                self.state = 2613
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,321,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_type_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def INOUT(self):
            return self.getToken(Swift5Parser.INOUT, 0)

        def argument_label(self):
            return self.getTypedRuleContext(Swift5Parser.Argument_labelContext,0)


        def type_annotation(self):
            return self.getTypedRuleContext(Swift5Parser.Type_annotationContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_function_type_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_type_argument" ):
                listener.enterFunction_type_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_type_argument" ):
                listener.exitFunction_type_argument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_type_argument" ):
                return visitor.visitFunction_type_argument(self)
            else:
                return visitor.visitChildren(self)




    def function_type_argument(self):

        localctx = Swift5Parser.Function_type_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_function_type_argument)
        self._la = 0 # Token type
        try:
            self.state = 2624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2615
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
                if la_ == 1:
                    self.state = 2614
                    self.attributes()


                self.state = 2618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Swift5Parser.INOUT:
                    self.state = 2617
                    self.match(Swift5Parser.INOUT)


                self.state = 2620
                self.type(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2621
                self.argument_label()
                self.state = 2622
                self.type_annotation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_labelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.IdentifierContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_argument_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_label" ):
                listener.enterArgument_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_label" ):
                listener.exitArgument_label(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument_label" ):
                return visitor.visitArgument_label(self)
            else:
                return visitor.visitChildren(self)




    def argument_label(self):

        localctx = Swift5Parser.Argument_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_argument_label)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2627 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2626
                self.identifier()
                self.state = 2629 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET) | (1 << Swift5Parser.WILL_SET) | (1 << Swift5Parser.DID_SET) | (1 << Swift5Parser.INDIRECT) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.LEFT) | (1 << Swift5Parser.RIGHT) | (1 << Swift5Parser.NONE) | (1 << Swift5Parser.PRECEDENCE_GROUP) | (1 << Swift5Parser.HIGHER_THAN) | (1 << Swift5Parser.LOWER_THAN) | (1 << Swift5Parser.ASSIGNMENT) | (1 << Swift5Parser.ASSOCIATIVITY) | (1 << Swift5Parser.POSTFIX) | (1 << Swift5Parser.OPERATOR) | (1 << Swift5Parser.OS) | (1 << Swift5Parser.ARCH) | (1 << Swift5Parser.SWIFT) | (1 << Swift5Parser.COMPILER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)) | (1 << (Swift5Parser.SELF_BIG - 64)) | (1 << (Swift5Parser.MAC_OS - 64)) | (1 << (Swift5Parser.I_OS - 64)) | (1 << (Swift5Parser.OSX - 64)) | (1 << (Swift5Parser.WATCH_OS - 64)) | (1 << (Swift5Parser.TV_OS - 64)) | (1 << (Swift5Parser.LINUX - 64)) | (1 << (Swift5Parser.WINDOWS - 64)) | (1 << (Swift5Parser.I386 - 64)) | (1 << (Swift5Parser.X86_64 - 64)) | (1 << (Swift5Parser.ARM - 64)) | (1 << (Swift5Parser.ARM64 - 64)) | (1 << (Swift5Parser.SIMULATOR - 64)) | (1 << (Swift5Parser.MAC_CATALYST - 64)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.FILE - 64)) | (1 << (Swift5Parser.LINE - 64)))) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(Swift5Parser.LBRACK, 0)

        def type(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def RBRACK(self):
            return self.getToken(Swift5Parser.RBRACK, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_array_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_type" ):
                listener.enterArray_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_type" ):
                listener.exitArray_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_type" ):
                return visitor.visitArray_type(self)
            else:
                return visitor.visitChildren(self)




    def array_type(self):

        localctx = Swift5Parser.Array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_array_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2631
            self.match(Swift5Parser.LBRACK)
            self.state = 2632
            self.type(0)
            self.state = 2633
            self.match(Swift5Parser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dictionary_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(Swift5Parser.LBRACK, 0)

        def type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.TypeContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.TypeContext,i)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def RBRACK(self):
            return self.getToken(Swift5Parser.RBRACK, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_dictionary_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionary_type" ):
                listener.enterDictionary_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionary_type" ):
                listener.exitDictionary_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictionary_type" ):
                return visitor.visitDictionary_type(self)
            else:
                return visitor.visitChildren(self)




    def dictionary_type(self):

        localctx = Swift5Parser.Dictionary_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_dictionary_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2635
            self.match(Swift5Parser.LBRACK)
            self.state = 2636
            self.type(0)
            self.state = 2637
            self.match(Swift5Parser.COLON)
            self.state = 2638
            self.type(0)
            self.state = 2639
            self.match(Swift5Parser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_composition_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Type_identifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Type_identifierContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.AND)
            else:
                return self.getToken(Swift5Parser.AND, i)

        def trailing_composition_and(self):
            return self.getTypedRuleContext(Swift5Parser.Trailing_composition_andContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_composition_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_composition_type" ):
                listener.enterProtocol_composition_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_composition_type" ):
                listener.exitProtocol_composition_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProtocol_composition_type" ):
                return visitor.visitProtocol_composition_type(self)
            else:
                return visitor.visitChildren(self)




    def protocol_composition_type(self):

        localctx = Swift5Parser.Protocol_composition_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_protocol_composition_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2641
            self.type_identifier()
            self.state = 2646
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,326,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2642
                    self.match(Swift5Parser.AND)
                    self.state = 2643
                    self.type_identifier() 
                self.state = 2648
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,326,self._ctx)

            self.state = 2650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
            if la_ == 1:
                self.state = 2649
                self.trailing_composition_and()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trailing_composition_andContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(Swift5Parser.AND, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_trailing_composition_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailing_composition_and" ):
                listener.enterTrailing_composition_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailing_composition_and" ):
                listener.exitTrailing_composition_and(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailing_composition_and" ):
                return visitor.visitTrailing_composition_and(self)
            else:
                return visitor.visitChildren(self)




    def trailing_composition_and(self):

        localctx = Swift5Parser.Trailing_composition_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_trailing_composition_and)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2652
            if not SwiftSupport.isBinaryOp(_input):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "!SwiftSupport.isBinaryOp(_input)")
            self.state = 2653
            self.match(Swift5Parser.AND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opaque_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOME(self):
            return self.getToken(Swift5Parser.SOME, 0)

        def type(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_opaque_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpaque_type" ):
                listener.enterOpaque_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpaque_type" ):
                listener.exitOpaque_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpaque_type" ):
                return visitor.visitOpaque_type(self)
            else:
                return visitor.visitChildren(self)




    def opaque_type(self):

        localctx = Swift5Parser.Opaque_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_opaque_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2655
            self.match(Swift5Parser.SOME)
            self.state = 2656
            self.type(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(Swift5Parser.ANY, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_any_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_type" ):
                listener.enterAny_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_type" ):
                listener.exitAny_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAny_type" ):
                return visitor.visitAny_type(self)
            else:
                return visitor.visitChildren(self)




    def any_type(self):

        localctx = Swift5Parser.Any_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_any_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2658
            self.match(Swift5Parser.ANY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Self_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELF_BIG(self):
            return self.getToken(Swift5Parser.SELF_BIG, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_self_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelf_type" ):
                listener.enterSelf_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelf_type" ):
                listener.exitSelf_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelf_type" ):
                return visitor.visitSelf_type(self)
            else:
                return visitor.visitChildren(self)




    def self_type(self):

        localctx = Swift5Parser.Self_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_self_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2660
            self.match(Swift5Parser.SELF_BIG)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_inheritance_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def type_inheritance_list(self):
            return self.getTypedRuleContext(Swift5Parser.Type_inheritance_listContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_type_inheritance_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_inheritance_clause" ):
                listener.enterType_inheritance_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_inheritance_clause" ):
                listener.exitType_inheritance_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_inheritance_clause" ):
                return visitor.visitType_inheritance_clause(self)
            else:
                return visitor.visitChildren(self)




    def type_inheritance_clause(self):

        localctx = Swift5Parser.Type_inheritance_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_type_inheritance_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2662
            self.match(Swift5Parser.COLON)
            self.state = 2663
            self.type_inheritance_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_inheritance_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Type_identifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Type_identifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_type_inheritance_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_inheritance_list" ):
                listener.enterType_inheritance_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_inheritance_list" ):
                listener.exitType_inheritance_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_inheritance_list" ):
                return visitor.visitType_inheritance_list(self)
            else:
                return visitor.visitChildren(self)




    def type_inheritance_list(self):

        localctx = Swift5Parser.Type_inheritance_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_type_inheritance_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2665
            self.type_identifier()
            self.state = 2670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Swift5Parser.COMMA:
                self.state = 2666
                self.match(Swift5Parser.COMMA)
                self.state = 2667
                self.type_identifier()
                self.state = 2672
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINUX(self):
            return self.getToken(Swift5Parser.LINUX, 0)

        def WINDOWS(self):
            return self.getToken(Swift5Parser.WINDOWS, 0)

        def ALPHA(self):
            return self.getToken(Swift5Parser.ALPHA, 0)

        def ARCH(self):
            return self.getToken(Swift5Parser.ARCH, 0)

        def ARM(self):
            return self.getToken(Swift5Parser.ARM, 0)

        def ARM64(self):
            return self.getToken(Swift5Parser.ARM64, 0)

        def ASSIGNMENT(self):
            return self.getToken(Swift5Parser.ASSIGNMENT, 0)

        def BLUE(self):
            return self.getToken(Swift5Parser.BLUE, 0)

        def CAN_IMPORT(self):
            return self.getToken(Swift5Parser.CAN_IMPORT, 0)

        def COMPILER(self):
            return self.getToken(Swift5Parser.COMPILER, 0)

        def FILE(self):
            return self.getToken(Swift5Parser.FILE, 0)

        def GREEN(self):
            return self.getToken(Swift5Parser.GREEN, 0)

        def HIGHER_THAN(self):
            return self.getToken(Swift5Parser.HIGHER_THAN, 0)

        def I386(self):
            return self.getToken(Swift5Parser.I386, 0)

        def I_OS(self):
            return self.getToken(Swift5Parser.I_OS, 0)

        def OSX(self):
            return self.getToken(Swift5Parser.OSX, 0)

        def I_OS_APPLICATION_EXTENSION(self):
            return self.getToken(Swift5Parser.I_OS_APPLICATION_EXTENSION, 0)

        def LINE(self):
            return self.getToken(Swift5Parser.LINE, 0)

        def LOWER_THAN(self):
            return self.getToken(Swift5Parser.LOWER_THAN, 0)

        def MAC_CATALYST(self):
            return self.getToken(Swift5Parser.MAC_CATALYST, 0)

        def MAC_CATALYST_APPLICATION_EXTENSION(self):
            return self.getToken(Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION, 0)

        def MAC_OS(self):
            return self.getToken(Swift5Parser.MAC_OS, 0)

        def MAC_OS_APPLICATION_EXTENSION(self):
            return self.getToken(Swift5Parser.MAC_OS_APPLICATION_EXTENSION, 0)

        def OS(self):
            return self.getToken(Swift5Parser.OS, 0)

        def PRECEDENCE_GROUP(self):
            return self.getToken(Swift5Parser.PRECEDENCE_GROUP, 0)

        def RED(self):
            return self.getToken(Swift5Parser.RED, 0)

        def RESOURCE_NAME(self):
            return self.getToken(Swift5Parser.RESOURCE_NAME, 0)

        def SAFE(self):
            return self.getToken(Swift5Parser.SAFE, 0)

        def SIMULATOR(self):
            return self.getToken(Swift5Parser.SIMULATOR, 0)

        def SOME(self):
            return self.getToken(Swift5Parser.SOME, 0)

        def SWIFT(self):
            return self.getToken(Swift5Parser.SWIFT, 0)

        def TARGET_ENVIRONMENT(self):
            return self.getToken(Swift5Parser.TARGET_ENVIRONMENT, 0)

        def TV_OS(self):
            return self.getToken(Swift5Parser.TV_OS, 0)

        def UNSAFE(self):
            return self.getToken(Swift5Parser.UNSAFE, 0)

        def WATCH_OS(self):
            return self.getToken(Swift5Parser.WATCH_OS, 0)

        def X86_64(self):
            return self.getToken(Swift5Parser.X86_64, 0)

        def ASSOCIATIVITY(self):
            return self.getToken(Swift5Parser.ASSOCIATIVITY, 0)

        def CONVENIENCE(self):
            return self.getToken(Swift5Parser.CONVENIENCE, 0)

        def DYNAMIC(self):
            return self.getToken(Swift5Parser.DYNAMIC, 0)

        def DID_SET(self):
            return self.getToken(Swift5Parser.DID_SET, 0)

        def FINAL(self):
            return self.getToken(Swift5Parser.FINAL, 0)

        def GET(self):
            return self.getToken(Swift5Parser.GET, 0)

        def INFIX(self):
            return self.getToken(Swift5Parser.INFIX, 0)

        def INDIRECT(self):
            return self.getToken(Swift5Parser.INDIRECT, 0)

        def LAZY(self):
            return self.getToken(Swift5Parser.LAZY, 0)

        def LEFT(self):
            return self.getToken(Swift5Parser.LEFT, 0)

        def MUTATING(self):
            return self.getToken(Swift5Parser.MUTATING, 0)

        def NONE(self):
            return self.getToken(Swift5Parser.NONE, 0)

        def NONMUTATING(self):
            return self.getToken(Swift5Parser.NONMUTATING, 0)

        def OPTIONAL(self):
            return self.getToken(Swift5Parser.OPTIONAL, 0)

        def OVERRIDE(self):
            return self.getToken(Swift5Parser.OVERRIDE, 0)

        def POSTFIX(self):
            return self.getToken(Swift5Parser.POSTFIX, 0)

        def PRECEDENCE(self):
            return self.getToken(Swift5Parser.PRECEDENCE, 0)

        def PREFIX(self):
            return self.getToken(Swift5Parser.PREFIX, 0)

        def PROTOCOL(self):
            return self.getToken(Swift5Parser.PROTOCOL, 0)

        def REQUIRED(self):
            return self.getToken(Swift5Parser.REQUIRED, 0)

        def RIGHT(self):
            return self.getToken(Swift5Parser.RIGHT, 0)

        def SET(self):
            return self.getToken(Swift5Parser.SET, 0)

        def TYPE(self):
            return self.getToken(Swift5Parser.TYPE, 0)

        def UNOWNED(self):
            return self.getToken(Swift5Parser.UNOWNED, 0)

        def WEAK(self):
            return self.getToken(Swift5Parser.WEAK, 0)

        def WILL_SET(self):
            return self.getToken(Swift5Parser.WILL_SET, 0)

        def IN(self):
            return self.getToken(Swift5Parser.IN, 0)

        def FOR(self):
            return self.getToken(Swift5Parser.FOR, 0)

        def GUARD(self):
            return self.getToken(Swift5Parser.GUARD, 0)

        def WHERE(self):
            return self.getToken(Swift5Parser.WHERE, 0)

        def DEFAULT(self):
            return self.getToken(Swift5Parser.DEFAULT, 0)

        def INTERNAL(self):
            return self.getToken(Swift5Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(Swift5Parser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(Swift5Parser.PUBLIC, 0)

        def OPEN(self):
            return self.getToken(Swift5Parser.OPEN, 0)

        def AS(self):
            return self.getToken(Swift5Parser.AS, 0)

        def WHILE(self):
            return self.getToken(Swift5Parser.WHILE, 0)

        def SELF(self):
            return self.getToken(Swift5Parser.SELF, 0)

        def SELF_BIG(self):
            return self.getToken(Swift5Parser.SELF_BIG, 0)

        def CLASS(self):
            return self.getToken(Swift5Parser.CLASS, 0)

        def GETTER(self):
            return self.getToken(Swift5Parser.GETTER, 0)

        def SETTER(self):
            return self.getToken(Swift5Parser.SETTER, 0)

        def OPERATOR(self):
            return self.getToken(Swift5Parser.OPERATOR, 0)

        def DO(self):
            return self.getToken(Swift5Parser.DO, 0)

        def CATCH(self):
            return self.getToken(Swift5Parser.CATCH, 0)

        def Identifier(self):
            return self.getToken(Swift5Parser.Identifier, 0)

        def BACKTICK(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.BACKTICK)
            else:
                return self.getToken(Swift5Parser.BACKTICK, i)

        def keyword(self):
            return self.getTypedRuleContext(Swift5Parser.KeywordContext,0)


        def DOLLAR(self):
            return self.getToken(Swift5Parser.DOLLAR, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = Swift5Parser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.state = 2682
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.AS, Swift5Parser.ALPHA, Swift5Parser.CATCH, Swift5Parser.CLASS, Swift5Parser.DEFAULT, Swift5Parser.DO, Swift5Parser.GUARD, Swift5Parser.FOR, Swift5Parser.IN, Swift5Parser.INTERNAL, Swift5Parser.FINAL, Swift5Parser.OPEN, Swift5Parser.PRIVATE, Swift5Parser.PUBLIC, Swift5Parser.WHERE, Swift5Parser.WHILE, Swift5Parser.PROTOCOL, Swift5Parser.GET, Swift5Parser.SET, Swift5Parser.WILL_SET, Swift5Parser.DID_SET, Swift5Parser.INDIRECT, Swift5Parser.PREFIX, Swift5Parser.INFIX, Swift5Parser.LEFT, Swift5Parser.RIGHT, Swift5Parser.NONE, Swift5Parser.PRECEDENCE_GROUP, Swift5Parser.HIGHER_THAN, Swift5Parser.LOWER_THAN, Swift5Parser.ASSIGNMENT, Swift5Parser.ASSOCIATIVITY, Swift5Parser.POSTFIX, Swift5Parser.OPERATOR, Swift5Parser.OS, Swift5Parser.ARCH, Swift5Parser.SWIFT, Swift5Parser.COMPILER, Swift5Parser.CAN_IMPORT, Swift5Parser.TARGET_ENVIRONMENT, Swift5Parser.CONVENIENCE, Swift5Parser.DYNAMIC, Swift5Parser.LAZY, Swift5Parser.OPTIONAL, Swift5Parser.OVERRIDE, Swift5Parser.REQUIRED, Swift5Parser.WEAK, Swift5Parser.UNOWNED, Swift5Parser.SAFE, Swift5Parser.UNSAFE, Swift5Parser.MUTATING, Swift5Parser.NONMUTATING, Swift5Parser.RED, Swift5Parser.BLUE, Swift5Parser.GREEN, Swift5Parser.RESOURCE_NAME, Swift5Parser.SOME, Swift5Parser.TYPE, Swift5Parser.PRECEDENCE, Swift5Parser.SELF, Swift5Parser.SELF_BIG, Swift5Parser.MAC_OS, Swift5Parser.I_OS, Swift5Parser.OSX, Swift5Parser.WATCH_OS, Swift5Parser.TV_OS, Swift5Parser.LINUX, Swift5Parser.WINDOWS, Swift5Parser.I386, Swift5Parser.X86_64, Swift5Parser.ARM, Swift5Parser.ARM64, Swift5Parser.SIMULATOR, Swift5Parser.MAC_CATALYST, Swift5Parser.I_OS_APPLICATION_EXTENSION, Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION, Swift5Parser.MAC_OS_APPLICATION_EXTENSION, Swift5Parser.FILE, Swift5Parser.LINE, Swift5Parser.GETTER, Swift5Parser.SETTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2673
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET) | (1 << Swift5Parser.WILL_SET) | (1 << Swift5Parser.DID_SET) | (1 << Swift5Parser.INDIRECT) | (1 << Swift5Parser.PREFIX) | (1 << Swift5Parser.INFIX) | (1 << Swift5Parser.LEFT) | (1 << Swift5Parser.RIGHT) | (1 << Swift5Parser.NONE) | (1 << Swift5Parser.PRECEDENCE_GROUP) | (1 << Swift5Parser.HIGHER_THAN) | (1 << Swift5Parser.LOWER_THAN) | (1 << Swift5Parser.ASSIGNMENT) | (1 << Swift5Parser.ASSOCIATIVITY) | (1 << Swift5Parser.POSTFIX) | (1 << Swift5Parser.OPERATOR) | (1 << Swift5Parser.OS) | (1 << Swift5Parser.ARCH) | (1 << Swift5Parser.SWIFT) | (1 << Swift5Parser.COMPILER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)) | (1 << (Swift5Parser.SELF_BIG - 64)) | (1 << (Swift5Parser.MAC_OS - 64)) | (1 << (Swift5Parser.I_OS - 64)) | (1 << (Swift5Parser.OSX - 64)) | (1 << (Swift5Parser.WATCH_OS - 64)) | (1 << (Swift5Parser.TV_OS - 64)) | (1 << (Swift5Parser.LINUX - 64)) | (1 << (Swift5Parser.WINDOWS - 64)) | (1 << (Swift5Parser.I386 - 64)) | (1 << (Swift5Parser.X86_64 - 64)) | (1 << (Swift5Parser.ARM - 64)) | (1 << (Swift5Parser.ARM64 - 64)) | (1 << (Swift5Parser.SIMULATOR - 64)) | (1 << (Swift5Parser.MAC_CATALYST - 64)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 64)) | (1 << (Swift5Parser.FILE - 64)) | (1 << (Swift5Parser.LINE - 64)))) != 0) or _la==Swift5Parser.GETTER or _la==Swift5Parser.SETTER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [Swift5Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2674
                self.match(Swift5Parser.Identifier)
                pass
            elif token in [Swift5Parser.BACKTICK]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2675
                self.match(Swift5Parser.BACKTICK)
                self.state = 2679
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Swift5Parser.AS, Swift5Parser.BREAK, Swift5Parser.CASE, Swift5Parser.CATCH, Swift5Parser.CLASS, Swift5Parser.CONTINUE, Swift5Parser.DEFAULT, Swift5Parser.DEFER, Swift5Parser.DO, Swift5Parser.GUARD, Swift5Parser.ELSE, Swift5Parser.ENUM, Swift5Parser.FOR, Swift5Parser.FALLTHROUGH, Swift5Parser.FUNC, Swift5Parser.IN, Swift5Parser.IF, Swift5Parser.IMPORT, Swift5Parser.INTERNAL, Swift5Parser.OPEN, Swift5Parser.PRIVATE, Swift5Parser.PUBLIC, Swift5Parser.WHERE, Swift5Parser.WHILE, Swift5Parser.LET, Swift5Parser.VAR, Swift5Parser.PROTOCOL, Swift5Parser.REPEAT, Swift5Parser.SWITCH, Swift5Parser.STRUCT, Swift5Parser.RETURN, Swift5Parser.THROW, Swift5Parser.THROWS, Swift5Parser.RETHROWS, Swift5Parser.INIT, Swift5Parser.DEINIT, Swift5Parser.ASSOCIATED_TYPE, Swift5Parser.EXTENSION, Swift5Parser.SUBSCRIPT, Swift5Parser.OPERATOR, Swift5Parser.TYPEALIAS, Swift5Parser.STATIC, Swift5Parser.FILE_PRIVATE, Swift5Parser.IS, Swift5Parser.TRY, Swift5Parser.SUPER, Swift5Parser.ANY, Swift5Parser.FALSE, Swift5Parser.TRUE, Swift5Parser.NIL, Swift5Parser.INOUT, Swift5Parser.SELF, Swift5Parser.SELF_BIG, Swift5Parser.SOURCE_LOCATION, Swift5Parser.ERROR, Swift5Parser.WARNING, Swift5Parser.AVAILABLE, Swift5Parser.HASH_IF, Swift5Parser.HASH_ELSEIF, Swift5Parser.HASH_ELSE, Swift5Parser.HASH_ENDIF, Swift5Parser.HASH_FILE, Swift5Parser.HASH_FILE_ID, Swift5Parser.HASH_FILE_PATH, Swift5Parser.HASH_LINE, Swift5Parser.HASH_COLUMN, Swift5Parser.HASH_FUNCTION, Swift5Parser.HASH_SELECTOR, Swift5Parser.HASH_COLOR_LITERAL, Swift5Parser.HASH_FILE_LITERAL, Swift5Parser.HASH_IMAGE_LITERAL, Swift5Parser.UNDERSCORE]:
                    self.state = 2676
                    self.keyword()
                    pass
                elif token in [Swift5Parser.Identifier]:
                    self.state = 2677
                    self.match(Swift5Parser.Identifier)
                    pass
                elif token in [Swift5Parser.DOLLAR]:
                    self.state = 2678
                    self.match(Swift5Parser.DOLLAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2681
                self.match(Swift5Parser.BACKTICK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Identifier_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_identifier_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier_list" ):
                listener.enterIdentifier_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier_list" ):
                listener.exitIdentifier_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier_list" ):
                return visitor.visitIdentifier_list(self)
            else:
                return visitor.visitChildren(self)




    def identifier_list(self):

        localctx = Swift5Parser.Identifier_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_identifier_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2684
            self.identifier()
            self.state = 2689
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,331,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2685
                    self.match(Swift5Parser.COMMA)
                    self.state = 2686
                    self.identifier() 
                self.state = 2691
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,331,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSOCIATED_TYPE(self):
            return self.getToken(Swift5Parser.ASSOCIATED_TYPE, 0)

        def CLASS(self):
            return self.getToken(Swift5Parser.CLASS, 0)

        def DEINIT(self):
            return self.getToken(Swift5Parser.DEINIT, 0)

        def ENUM(self):
            return self.getToken(Swift5Parser.ENUM, 0)

        def EXTENSION(self):
            return self.getToken(Swift5Parser.EXTENSION, 0)

        def FILE_PRIVATE(self):
            return self.getToken(Swift5Parser.FILE_PRIVATE, 0)

        def FUNC(self):
            return self.getToken(Swift5Parser.FUNC, 0)

        def IMPORT(self):
            return self.getToken(Swift5Parser.IMPORT, 0)

        def INIT(self):
            return self.getToken(Swift5Parser.INIT, 0)

        def INOUT(self):
            return self.getToken(Swift5Parser.INOUT, 0)

        def INTERNAL(self):
            return self.getToken(Swift5Parser.INTERNAL, 0)

        def LET(self):
            return self.getToken(Swift5Parser.LET, 0)

        def OPEN(self):
            return self.getToken(Swift5Parser.OPEN, 0)

        def OPERATOR(self):
            return self.getToken(Swift5Parser.OPERATOR, 0)

        def PRIVATE(self):
            return self.getToken(Swift5Parser.PRIVATE, 0)

        def PROTOCOL(self):
            return self.getToken(Swift5Parser.PROTOCOL, 0)

        def PUBLIC(self):
            return self.getToken(Swift5Parser.PUBLIC, 0)

        def RETHROWS(self):
            return self.getToken(Swift5Parser.RETHROWS, 0)

        def STATIC(self):
            return self.getToken(Swift5Parser.STATIC, 0)

        def STRUCT(self):
            return self.getToken(Swift5Parser.STRUCT, 0)

        def SUBSCRIPT(self):
            return self.getToken(Swift5Parser.SUBSCRIPT, 0)

        def TYPEALIAS(self):
            return self.getToken(Swift5Parser.TYPEALIAS, 0)

        def VAR(self):
            return self.getToken(Swift5Parser.VAR, 0)

        def BREAK(self):
            return self.getToken(Swift5Parser.BREAK, 0)

        def CASE(self):
            return self.getToken(Swift5Parser.CASE, 0)

        def CONTINUE(self):
            return self.getToken(Swift5Parser.CONTINUE, 0)

        def DEFAULT(self):
            return self.getToken(Swift5Parser.DEFAULT, 0)

        def DEFER(self):
            return self.getToken(Swift5Parser.DEFER, 0)

        def DO(self):
            return self.getToken(Swift5Parser.DO, 0)

        def ELSE(self):
            return self.getToken(Swift5Parser.ELSE, 0)

        def FALLTHROUGH(self):
            return self.getToken(Swift5Parser.FALLTHROUGH, 0)

        def FOR(self):
            return self.getToken(Swift5Parser.FOR, 0)

        def GUARD(self):
            return self.getToken(Swift5Parser.GUARD, 0)

        def IF(self):
            return self.getToken(Swift5Parser.IF, 0)

        def IN(self):
            return self.getToken(Swift5Parser.IN, 0)

        def REPEAT(self):
            return self.getToken(Swift5Parser.REPEAT, 0)

        def RETURN(self):
            return self.getToken(Swift5Parser.RETURN, 0)

        def SWITCH(self):
            return self.getToken(Swift5Parser.SWITCH, 0)

        def WHERE(self):
            return self.getToken(Swift5Parser.WHERE, 0)

        def WHILE(self):
            return self.getToken(Swift5Parser.WHILE, 0)

        def AS(self):
            return self.getToken(Swift5Parser.AS, 0)

        def ANY(self):
            return self.getToken(Swift5Parser.ANY, 0)

        def CATCH(self):
            return self.getToken(Swift5Parser.CATCH, 0)

        def FALSE(self):
            return self.getToken(Swift5Parser.FALSE, 0)

        def IS(self):
            return self.getToken(Swift5Parser.IS, 0)

        def NIL(self):
            return self.getToken(Swift5Parser.NIL, 0)

        def SUPER(self):
            return self.getToken(Swift5Parser.SUPER, 0)

        def SELF(self):
            return self.getToken(Swift5Parser.SELF, 0)

        def SELF_BIG(self):
            return self.getToken(Swift5Parser.SELF_BIG, 0)

        def THROW(self):
            return self.getToken(Swift5Parser.THROW, 0)

        def THROWS(self):
            return self.getToken(Swift5Parser.THROWS, 0)

        def TRUE(self):
            return self.getToken(Swift5Parser.TRUE, 0)

        def TRY(self):
            return self.getToken(Swift5Parser.TRY, 0)

        def UNDERSCORE(self):
            return self.getToken(Swift5Parser.UNDERSCORE, 0)

        def AVAILABLE(self):
            return self.getToken(Swift5Parser.AVAILABLE, 0)

        def HASH_COLOR_LITERAL(self):
            return self.getToken(Swift5Parser.HASH_COLOR_LITERAL, 0)

        def HASH_COLUMN(self):
            return self.getToken(Swift5Parser.HASH_COLUMN, 0)

        def HASH_ELSE(self):
            return self.getToken(Swift5Parser.HASH_ELSE, 0)

        def HASH_ELSEIF(self):
            return self.getToken(Swift5Parser.HASH_ELSEIF, 0)

        def HASH_ENDIF(self):
            return self.getToken(Swift5Parser.HASH_ENDIF, 0)

        def ERROR(self):
            return self.getToken(Swift5Parser.ERROR, 0)

        def HASH_FILE(self):
            return self.getToken(Swift5Parser.HASH_FILE, 0)

        def HASH_FILE_ID(self):
            return self.getToken(Swift5Parser.HASH_FILE_ID, 0)

        def HASH_FILE_LITERAL(self):
            return self.getToken(Swift5Parser.HASH_FILE_LITERAL, 0)

        def HASH_FILE_PATH(self):
            return self.getToken(Swift5Parser.HASH_FILE_PATH, 0)

        def HASH_FUNCTION(self):
            return self.getToken(Swift5Parser.HASH_FUNCTION, 0)

        def HASH_IF(self):
            return self.getToken(Swift5Parser.HASH_IF, 0)

        def HASH_IMAGE_LITERAL(self):
            return self.getToken(Swift5Parser.HASH_IMAGE_LITERAL, 0)

        def HASH_LINE(self):
            return self.getToken(Swift5Parser.HASH_LINE, 0)

        def HASH_SELECTOR(self):
            return self.getToken(Swift5Parser.HASH_SELECTOR, 0)

        def SOURCE_LOCATION(self):
            return self.getToken(Swift5Parser.SOURCE_LOCATION, 0)

        def WARNING(self):
            return self.getToken(Swift5Parser.WARNING, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = Swift5Parser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2692
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.BREAK) | (1 << Swift5Parser.CASE) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.CONTINUE) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DEFER) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.ELSE) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.FALLTHROUGH) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.IF) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.REPEAT) | (1 << Swift5Parser.SWITCH) | (1 << Swift5Parser.STRUCT) | (1 << Swift5Parser.RETURN) | (1 << Swift5Parser.THROW) | (1 << Swift5Parser.THROWS) | (1 << Swift5Parser.RETHROWS) | (1 << Swift5Parser.INIT) | (1 << Swift5Parser.DEINIT) | (1 << Swift5Parser.ASSOCIATED_TYPE) | (1 << Swift5Parser.EXTENSION) | (1 << Swift5Parser.SUBSCRIPT) | (1 << Swift5Parser.OPERATOR) | (1 << Swift5Parser.TYPEALIAS))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (Swift5Parser.STATIC - 72)) | (1 << (Swift5Parser.FILE_PRIVATE - 72)) | (1 << (Swift5Parser.IS - 72)) | (1 << (Swift5Parser.TRY - 72)) | (1 << (Swift5Parser.SUPER - 72)) | (1 << (Swift5Parser.ANY - 72)) | (1 << (Swift5Parser.FALSE - 72)) | (1 << (Swift5Parser.TRUE - 72)) | (1 << (Swift5Parser.NIL - 72)) | (1 << (Swift5Parser.INOUT - 72)) | (1 << (Swift5Parser.SELF - 72)) | (1 << (Swift5Parser.SELF_BIG - 72)) | (1 << (Swift5Parser.SOURCE_LOCATION - 72)) | (1 << (Swift5Parser.ERROR - 72)) | (1 << (Swift5Parser.WARNING - 72)) | (1 << (Swift5Parser.AVAILABLE - 72)) | (1 << (Swift5Parser.HASH_IF - 72)) | (1 << (Swift5Parser.HASH_ELSEIF - 72)) | (1 << (Swift5Parser.HASH_ELSE - 72)) | (1 << (Swift5Parser.HASH_ENDIF - 72)) | (1 << (Swift5Parser.HASH_FILE - 72)) | (1 << (Swift5Parser.HASH_FILE_ID - 72)) | (1 << (Swift5Parser.HASH_FILE_PATH - 72)) | (1 << (Swift5Parser.HASH_LINE - 72)) | (1 << (Swift5Parser.HASH_COLUMN - 72)) | (1 << (Swift5Parser.HASH_FUNCTION - 72)) | (1 << (Swift5Parser.HASH_SELECTOR - 72)) | (1 << (Swift5Parser.HASH_COLOR_LITERAL - 72)) | (1 << (Swift5Parser.HASH_FILE_LITERAL - 72)) | (1 << (Swift5Parser.HASH_IMAGE_LITERAL - 72)))) != 0) or _la==Swift5Parser.UNDERSCORE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(Swift5Parser.EQUAL, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_operator" ):
                return visitor.visitAssignment_operator(self)
            else:
                return visitor.visitChildren(self)




    def assignment_operator(self):

        localctx = Swift5Parser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_assignment_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2694
            if not SwiftSupport.isBinaryOp(_input):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "SwiftSupport.isBinaryOp(_input)")
            self.state = 2695
            self.match(Swift5Parser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Negate_prefix_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(Swift5Parser.SUB, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_negate_prefix_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNegate_prefix_operator" ):
                listener.enterNegate_prefix_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNegate_prefix_operator" ):
                listener.exitNegate_prefix_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNegate_prefix_operator" ):
                return visitor.visitNegate_prefix_operator(self)
            else:
                return visitor.visitChildren(self)




    def negate_prefix_operator(self):

        localctx = Swift5Parser.Negate_prefix_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_negate_prefix_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2697
            if not SwiftSupport.isPrefixOp(_input):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "SwiftSupport.isPrefixOp(_input)")
            self.state = 2698
            self.match(Swift5Parser.SUB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compilation_condition_ANDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.AND)
            else:
                return self.getToken(Swift5Parser.AND, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_compilation_condition_AND

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_condition_AND" ):
                listener.enterCompilation_condition_AND(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_condition_AND" ):
                listener.exitCompilation_condition_AND(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilation_condition_AND" ):
                return visitor.visitCompilation_condition_AND(self)
            else:
                return visitor.visitChildren(self)




    def compilation_condition_AND(self):

        localctx = Swift5Parser.Compilation_condition_ANDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_compilation_condition_AND)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2700
            if not SwiftSupport.isOperator(_input,"&&"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "SwiftSupport.isOperator(_input,\"&&\")")
            self.state = 2701
            self.match(Swift5Parser.AND)
            self.state = 2702
            self.match(Swift5Parser.AND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compilation_condition_ORContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.OR)
            else:
                return self.getToken(Swift5Parser.OR, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_compilation_condition_OR

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_condition_OR" ):
                listener.enterCompilation_condition_OR(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_condition_OR" ):
                listener.exitCompilation_condition_OR(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilation_condition_OR" ):
                return visitor.visitCompilation_condition_OR(self)
            else:
                return visitor.visitChildren(self)




    def compilation_condition_OR(self):

        localctx = Swift5Parser.Compilation_condition_ORContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_compilation_condition_OR)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2704
            if not SwiftSupport.isOperator(_input,"||"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "SwiftSupport.isOperator(_input,\"||\")")
            self.state = 2705
            self.match(Swift5Parser.OR)
            self.state = 2706
            self.match(Swift5Parser.OR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compilation_condition_GEContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self):
            return self.getToken(Swift5Parser.GT, 0)

        def EQUAL(self):
            return self.getToken(Swift5Parser.EQUAL, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_compilation_condition_GE

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_condition_GE" ):
                listener.enterCompilation_condition_GE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_condition_GE" ):
                listener.exitCompilation_condition_GE(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilation_condition_GE" ):
                return visitor.visitCompilation_condition_GE(self)
            else:
                return visitor.visitChildren(self)




    def compilation_condition_GE(self):

        localctx = Swift5Parser.Compilation_condition_GEContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_compilation_condition_GE)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2708
            if not SwiftSupport.isOperator(_input,">="):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "SwiftSupport.isOperator(_input,\">=\")")
            self.state = 2709
            self.match(Swift5Parser.GT)
            self.state = 2710
            self.match(Swift5Parser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compilation_condition_LContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(Swift5Parser.LT, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_compilation_condition_L

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_condition_L" ):
                listener.enterCompilation_condition_L(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_condition_L" ):
                listener.exitCompilation_condition_L(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilation_condition_L" ):
                return visitor.visitCompilation_condition_L(self)
            else:
                return visitor.visitChildren(self)




    def compilation_condition_L(self):

        localctx = Swift5Parser.Compilation_condition_LContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_compilation_condition_L)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2712
            if not SwiftSupport.isOperator(_input,"<"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "SwiftSupport.isOperator(_input,\"<\")")
            self.state = 2713
            self.match(Swift5Parser.LT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arrow_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(Swift5Parser.SUB, 0)

        def GT(self):
            return self.getToken(Swift5Parser.GT, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_arrow_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrow_operator" ):
                listener.enterArrow_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrow_operator" ):
                listener.exitArrow_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrow_operator" ):
                return visitor.visitArrow_operator(self)
            else:
                return visitor.visitChildren(self)




    def arrow_operator(self):

        localctx = Swift5Parser.Arrow_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_arrow_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2715
            if not SwiftSupport.isOperator(_input,"->"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "SwiftSupport.isOperator(_input,\"->\")")
            self.state = 2716
            self.match(Swift5Parser.SUB)
            self.state = 2717
            self.match(Swift5Parser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.DOT)
            else:
                return self.getToken(Swift5Parser.DOT, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_range_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_operator" ):
                listener.enterRange_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_operator" ):
                listener.exitRange_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRange_operator" ):
                return visitor.visitRange_operator(self)
            else:
                return visitor.visitChildren(self)




    def range_operator(self):

        localctx = Swift5Parser.Range_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_range_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2719
            if not SwiftSupport.isOperator(_input,"..."):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "SwiftSupport.isOperator(_input,\"...\")")
            self.state = 2720
            self.match(Swift5Parser.DOT)
            self.state = 2721
            self.match(Swift5Parser.DOT)
            self.state = 2722
            self.match(Swift5Parser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Same_type_equalsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.EQUAL)
            else:
                return self.getToken(Swift5Parser.EQUAL, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_same_type_equals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSame_type_equals" ):
                listener.enterSame_type_equals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSame_type_equals" ):
                listener.exitSame_type_equals(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSame_type_equals" ):
                return visitor.visitSame_type_equals(self)
            else:
                return visitor.visitChildren(self)




    def same_type_equals(self):

        localctx = Swift5Parser.Same_type_equalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_same_type_equals)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2724
            if not SwiftSupport.isOperator(_input,"=="):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "SwiftSupport.isOperator(_input,\"==\")")
            self.state = 2725
            self.match(Swift5Parser.EQUAL)
            self.state = 2726
            self.match(Swift5Parser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_binary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_operator" ):
                listener.enterBinary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_operator" ):
                listener.exitBinary_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinary_operator" ):
                return visitor.visitBinary_operator(self)
            else:
                return visitor.visitChildren(self)




    def binary_operator(self):

        localctx = Swift5Parser.Binary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_binary_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2728
            if not SwiftSupport.isBinaryOp(_input):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "SwiftSupport.isBinaryOp(_input)")
            self.state = 2729
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prefix_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_prefix_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefix_operator" ):
                listener.enterPrefix_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefix_operator" ):
                listener.exitPrefix_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefix_operator" ):
                return visitor.visitPrefix_operator(self)
            else:
                return visitor.visitChildren(self)




    def prefix_operator(self):

        localctx = Swift5Parser.Prefix_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_prefix_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2731
            if not SwiftSupport.isPrefixOp(_input):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "SwiftSupport.isPrefixOp(_input)")
            self.state = 2732
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_postfix_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix_operator" ):
                listener.enterPostfix_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix_operator" ):
                listener.exitPostfix_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfix_operator" ):
                return visitor.visitPostfix_operator(self)
            else:
                return visitor.visitChildren(self)




    def postfix_operator(self):

        localctx = Swift5Parser.Postfix_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_postfix_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2734
            if not SwiftSupport.isPostfixOp(_input):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "SwiftSupport.isPostfixOp(_input)")
            self.state = 2735
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator_head(self):
            return self.getTypedRuleContext(Swift5Parser.Operator_headContext,0)


        def operator_characters(self):
            return self.getTypedRuleContext(Swift5Parser.Operator_charactersContext,0)


        def dot_operator_head(self):
            return self.getTypedRuleContext(Swift5Parser.Dot_operator_headContext,0)


        def dot_operator_characters(self):
            return self.getTypedRuleContext(Swift5Parser.Dot_operator_charactersContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperator" ):
                return visitor.visitOperator(self)
            else:
                return visitor.visitChildren(self)




    def operator(self):

        localctx = Swift5Parser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_operator)
        try:
            self.state = 2744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.LT, Swift5Parser.GT, Swift5Parser.BANG, Swift5Parser.QUESTION, Swift5Parser.AND, Swift5Parser.SUB, Swift5Parser.EQUAL, Swift5Parser.OR, Swift5Parser.DIV, Swift5Parser.ADD, Swift5Parser.MUL, Swift5Parser.MOD, Swift5Parser.CARET, Swift5Parser.TILDE, Swift5Parser.Operator_head_other]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2737
                self.operator_head()
                self.state = 2739
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
                if la_ == 1:
                    self.state = 2738
                    self.operator_characters()


                pass
            elif token in [Swift5Parser.DOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2741
                self.dot_operator_head()
                self.state = 2742
                self.dot_operator_characters()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV(self):
            return self.getToken(Swift5Parser.DIV, 0)

        def EQUAL(self):
            return self.getToken(Swift5Parser.EQUAL, 0)

        def SUB(self):
            return self.getToken(Swift5Parser.SUB, 0)

        def ADD(self):
            return self.getToken(Swift5Parser.ADD, 0)

        def BANG(self):
            return self.getToken(Swift5Parser.BANG, 0)

        def MUL(self):
            return self.getToken(Swift5Parser.MUL, 0)

        def MOD(self):
            return self.getToken(Swift5Parser.MOD, 0)

        def AND(self):
            return self.getToken(Swift5Parser.AND, 0)

        def OR(self):
            return self.getToken(Swift5Parser.OR, 0)

        def LT(self):
            return self.getToken(Swift5Parser.LT, 0)

        def GT(self):
            return self.getToken(Swift5Parser.GT, 0)

        def CARET(self):
            return self.getToken(Swift5Parser.CARET, 0)

        def TILDE(self):
            return self.getToken(Swift5Parser.TILDE, 0)

        def QUESTION(self):
            return self.getToken(Swift5Parser.QUESTION, 0)

        def Operator_head_other(self):
            return self.getToken(Swift5Parser.Operator_head_other, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_operator_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_head" ):
                listener.enterOperator_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_head" ):
                listener.exitOperator_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperator_head" ):
                return visitor.visitOperator_head(self)
            else:
                return visitor.visitChildren(self)




    def operator_head(self):

        localctx = Swift5Parser.Operator_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_operator_head)
        self._la = 0 # Token type
        try:
            self.state = 2748
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.LT, Swift5Parser.GT, Swift5Parser.BANG, Swift5Parser.QUESTION, Swift5Parser.AND, Swift5Parser.SUB, Swift5Parser.EQUAL, Swift5Parser.OR, Swift5Parser.DIV, Swift5Parser.ADD, Swift5Parser.MUL, Swift5Parser.MOD, Swift5Parser.CARET, Swift5Parser.TILDE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2746
                _la = self._input.LA(1)
                if not(((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & ((1 << (Swift5Parser.LT - 148)) | (1 << (Swift5Parser.GT - 148)) | (1 << (Swift5Parser.BANG - 148)) | (1 << (Swift5Parser.QUESTION - 148)) | (1 << (Swift5Parser.AND - 148)) | (1 << (Swift5Parser.SUB - 148)) | (1 << (Swift5Parser.EQUAL - 148)) | (1 << (Swift5Parser.OR - 148)) | (1 << (Swift5Parser.DIV - 148)) | (1 << (Swift5Parser.ADD - 148)) | (1 << (Swift5Parser.MUL - 148)) | (1 << (Swift5Parser.MOD - 148)) | (1 << (Swift5Parser.CARET - 148)) | (1 << (Swift5Parser.TILDE - 148)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [Swift5Parser.Operator_head_other]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2747
                self.match(Swift5Parser.Operator_head_other)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_characterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator_head(self):
            return self.getTypedRuleContext(Swift5Parser.Operator_headContext,0)


        def Operator_following_character(self):
            return self.getToken(Swift5Parser.Operator_following_character, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_operator_character

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_character" ):
                listener.enterOperator_character(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_character" ):
                listener.exitOperator_character(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperator_character" ):
                return visitor.visitOperator_character(self)
            else:
                return visitor.visitChildren(self)




    def operator_character(self):

        localctx = Swift5Parser.Operator_characterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_operator_character)
        try:
            self.state = 2752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.LT, Swift5Parser.GT, Swift5Parser.BANG, Swift5Parser.QUESTION, Swift5Parser.AND, Swift5Parser.SUB, Swift5Parser.EQUAL, Swift5Parser.OR, Swift5Parser.DIV, Swift5Parser.ADD, Swift5Parser.MUL, Swift5Parser.MOD, Swift5Parser.CARET, Swift5Parser.TILDE, Swift5Parser.Operator_head_other]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2750
                self.operator_head()
                pass
            elif token in [Swift5Parser.Operator_following_character]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2751
                self.match(Swift5Parser.Operator_following_character)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_charactersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator_character(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Operator_characterContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Operator_characterContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_operator_characters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_characters" ):
                listener.enterOperator_characters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_characters" ):
                listener.exitOperator_characters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperator_characters" ):
                return visitor.visitOperator_characters(self)
            else:
                return visitor.visitChildren(self)




    def operator_characters(self):

        localctx = Swift5Parser.Operator_charactersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_operator_characters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2756 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2754
                    if not _input.get(_input.index()-1).getType()!=WS:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "_input.get(_input.index()-1).getType()!=WS")
                    self.state = 2755
                    self.operator_character()

                else:
                    raise NoViableAltException(self)
                self.state = 2758 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,336,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_operator_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_dot_operator_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_operator_head" ):
                listener.enterDot_operator_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_operator_head" ):
                listener.exitDot_operator_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDot_operator_head" ):
                return visitor.visitDot_operator_head(self)
            else:
                return visitor.visitChildren(self)




    def dot_operator_head(self):

        localctx = Swift5Parser.Dot_operator_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_dot_operator_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2760
            self.match(Swift5Parser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_operator_characterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def operator_character(self):
            return self.getTypedRuleContext(Swift5Parser.Operator_characterContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_dot_operator_character

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_operator_character" ):
                listener.enterDot_operator_character(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_operator_character" ):
                listener.exitDot_operator_character(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDot_operator_character" ):
                return visitor.visitDot_operator_character(self)
            else:
                return visitor.visitChildren(self)




    def dot_operator_character(self):

        localctx = Swift5Parser.Dot_operator_characterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_dot_operator_character)
        try:
            self.state = 2764
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.DOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2762
                self.match(Swift5Parser.DOT)
                pass
            elif token in [Swift5Parser.LT, Swift5Parser.GT, Swift5Parser.BANG, Swift5Parser.QUESTION, Swift5Parser.AND, Swift5Parser.SUB, Swift5Parser.EQUAL, Swift5Parser.OR, Swift5Parser.DIV, Swift5Parser.ADD, Swift5Parser.MUL, Swift5Parser.MOD, Swift5Parser.CARET, Swift5Parser.TILDE, Swift5Parser.Operator_head_other, Swift5Parser.Operator_following_character]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2763
                self.operator_character()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_operator_charactersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_operator_character(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Dot_operator_characterContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Dot_operator_characterContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_dot_operator_characters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_operator_characters" ):
                listener.enterDot_operator_characters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_operator_characters" ):
                listener.exitDot_operator_characters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDot_operator_characters" ):
                return visitor.visitDot_operator_characters(self)
            else:
                return visitor.visitChildren(self)




    def dot_operator_characters(self):

        localctx = Swift5Parser.Dot_operator_charactersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_dot_operator_characters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2768 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2766
                    if not _input.get(_input.index()-1).getType()!=WS:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "_input.get(_input.index()-1).getType()!=WS")
                    self.state = 2767
                    self.dot_operator_character()

                else:
                    raise NoViableAltException(self)
                self.state = 2770 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,338,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Numeric_literalContext,0)


        def string_literal(self):
            return self.getTypedRuleContext(Swift5Parser.String_literalContext,0)


        def boolean_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Boolean_literalContext,0)


        def nil_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Nil_literalContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = Swift5Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_literal)
        try:
            self.state = 2776
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2772
                self.numeric_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2773
                self.string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2774
                self.boolean_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2775
                self.nil_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Integer_literalContext,0)


        def negate_prefix_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Negate_prefix_operatorContext,0)


        def Floating_point_literal(self):
            return self.getToken(Swift5Parser.Floating_point_literal, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_numeric_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_literal" ):
                listener.enterNumeric_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_literal" ):
                listener.exitNumeric_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumeric_literal" ):
                return visitor.visitNumeric_literal(self)
            else:
                return visitor.visitChildren(self)




    def numeric_literal(self):

        localctx = Swift5Parser.Numeric_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_numeric_literal)
        try:
            self.state = 2786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2779
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
                if la_ == 1:
                    self.state = 2778
                    self.negate_prefix_operator()


                self.state = 2781
                self.integer_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2783
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
                if la_ == 1:
                    self.state = 2782
                    self.negate_prefix_operator()


                self.state = 2785
                self.match(Swift5Parser.Floating_point_literal)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(Swift5Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Swift5Parser.FALSE, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolean_literal" ):
                return visitor.visitBoolean_literal(self)
            else:
                return visitor.visitChildren(self)

    def boolean_literal(self):

        localctx = Swift5Parser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2788
            _la = self._input.LA(1)
            if not(_la==Swift5Parser.FALSE or _la==Swift5Parser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nil_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NIL(self):
            return self.getToken(Swift5Parser.NIL, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_nil_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNil_literal" ):
                listener.enterNil_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNil_literal" ):
                listener.exitNil_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNil_literal" ):
                return visitor.visitNil_literal(self)
            else:
                return visitor.visitChildren(self)




    def nil_literal(self):

        localctx = Swift5Parser.Nil_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_nil_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2790
            self.match(Swift5Parser.NIL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decimal_digits(self):
            return self.getToken(Swift5Parser.Decimal_digits, 0)

        def Decimal_literal(self):
            return self.getToken(Swift5Parser.Decimal_literal, 0)

        def Binary_literal(self):
            return self.getToken(Swift5Parser.Binary_literal, 0)

        def Octal_literal(self):
            return self.getToken(Swift5Parser.Octal_literal, 0)

        def Hexadecimal_literal(self):
            return self.getToken(Swift5Parser.Hexadecimal_literal, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_integer_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_literal" ):
                listener.enterInteger_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_literal" ):
                listener.exitInteger_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger_literal" ):
                return visitor.visitInteger_literal(self)
            else:
                return visitor.visitChildren(self)




    def integer_literal(self):

        localctx = Swift5Parser.Integer_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_integer_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2792
            _la = self._input.LA(1)
            if not(((((_la - 170)) & ~0x3f) == 0 and ((1 << (_la - 170)) & ((1 << (Swift5Parser.Binary_literal - 170)) | (1 << (Swift5Parser.Octal_literal - 170)) | (1 << (Swift5Parser.Decimal_digits - 170)) | (1 << (Swift5Parser.Decimal_literal - 170)) | (1 << (Swift5Parser.Hexadecimal_literal - 170)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extended_string_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Extended_string_literalContext,0)


        def interpolated_string_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Interpolated_string_literalContext,0)


        def static_string_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Static_string_literalContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString_literal" ):
                return visitor.visitString_literal(self)
            else:
                return visitor.visitChildren(self)




    def string_literal(self):

        localctx = Swift5Parser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_string_literal)
        try:
            self.state = 2797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2794
                self.extended_string_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2795
                self.interpolated_string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2796
                self.static_string_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extended_string_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Multi_line_extended_string_open(self):
            return self.getToken(Swift5Parser.Multi_line_extended_string_open, 0)

        def Multi_line_extended_string_close(self):
            return self.getToken(Swift5Parser.Multi_line_extended_string_close, 0)

        def Quoted_multi_line_extended_text(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.Quoted_multi_line_extended_text)
            else:
                return self.getToken(Swift5Parser.Quoted_multi_line_extended_text, i)

        def Single_line_extended_string_open(self):
            return self.getToken(Swift5Parser.Single_line_extended_string_open, 0)

        def Single_line_extended_string_close(self):
            return self.getToken(Swift5Parser.Single_line_extended_string_close, 0)

        def Quoted_single_line_extended_text(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.Quoted_single_line_extended_text)
            else:
                return self.getToken(Swift5Parser.Quoted_single_line_extended_text, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_extended_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtended_string_literal" ):
                listener.enterExtended_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtended_string_literal" ):
                listener.exitExtended_string_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtended_string_literal" ):
                return visitor.visitExtended_string_literal(self)
            else:
                return visitor.visitChildren(self)




    def extended_string_literal(self):

        localctx = Swift5Parser.Extended_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_extended_string_literal)
        self._la = 0 # Token type
        try:
            self.state = 2813
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.Multi_line_extended_string_open]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2799
                self.match(Swift5Parser.Multi_line_extended_string_open)
                self.state = 2801 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2800
                    self.match(Swift5Parser.Quoted_multi_line_extended_text)
                    self.state = 2803 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Swift5Parser.Quoted_multi_line_extended_text):
                        break

                self.state = 2805
                self.match(Swift5Parser.Multi_line_extended_string_close)
                pass
            elif token in [Swift5Parser.Single_line_extended_string_open]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2806
                self.match(Swift5Parser.Single_line_extended_string_open)
                self.state = 2808 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2807
                    self.match(Swift5Parser.Quoted_single_line_extended_text)
                    self.state = 2810 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Swift5Parser.Quoted_single_line_extended_text):
                        break

                self.state = 2812
                self.match(Swift5Parser.Single_line_extended_string_close)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Static_string_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Single_line_string_open(self):
            return self.getToken(Swift5Parser.Single_line_string_open, 0)

        def Single_line_string_close(self):
            return self.getToken(Swift5Parser.Single_line_string_close, 0)

        def Quoted_single_line_text(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.Quoted_single_line_text)
            else:
                return self.getToken(Swift5Parser.Quoted_single_line_text, i)

        def Multi_line_string_open(self):
            return self.getToken(Swift5Parser.Multi_line_string_open, 0)

        def Multi_line_string_close(self):
            return self.getToken(Swift5Parser.Multi_line_string_close, 0)

        def Quoted_multi_line_text(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.Quoted_multi_line_text)
            else:
                return self.getToken(Swift5Parser.Quoted_multi_line_text, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_static_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatic_string_literal" ):
                listener.enterStatic_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatic_string_literal" ):
                listener.exitStatic_string_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatic_string_literal" ):
                return visitor.visitStatic_string_literal(self)
            else:
                return visitor.visitChildren(self)




    def static_string_literal(self):

        localctx = Swift5Parser.Static_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_static_string_literal)
        self._la = 0 # Token type
        try:
            self.state = 2831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.Single_line_string_open]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2815
                self.match(Swift5Parser.Single_line_string_open)
                self.state = 2819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Swift5Parser.Quoted_single_line_text:
                    self.state = 2816
                    self.match(Swift5Parser.Quoted_single_line_text)
                    self.state = 2821
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2822
                self.match(Swift5Parser.Single_line_string_close)
                pass
            elif token in [Swift5Parser.Multi_line_string_open]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2823
                self.match(Swift5Parser.Multi_line_string_open)
                self.state = 2827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Swift5Parser.Quoted_multi_line_text:
                    self.state = 2824
                    self.match(Swift5Parser.Quoted_multi_line_text)
                    self.state = 2829
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2830
                self.match(Swift5Parser.Multi_line_string_close)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_string_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Single_line_string_open(self):
            return self.getToken(Swift5Parser.Single_line_string_open, 0)

        def Single_line_string_close(self):
            return self.getToken(Swift5Parser.Single_line_string_close, 0)

        def Quoted_single_line_text(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.Quoted_single_line_text)
            else:
                return self.getToken(Swift5Parser.Quoted_single_line_text, i)

        def Interpolataion_single_line(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.Interpolataion_single_line)
            else:
                return self.getToken(Swift5Parser.Interpolataion_single_line, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.RPAREN)
            else:
                return self.getToken(Swift5Parser.RPAREN, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.ExpressionContext,i)


        def tuple_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Tuple_elementContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Tuple_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def tuple_element_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Tuple_element_listContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Tuple_element_listContext,i)


        def Multi_line_string_open(self):
            return self.getToken(Swift5Parser.Multi_line_string_open, 0)

        def Multi_line_string_close(self):
            return self.getToken(Swift5Parser.Multi_line_string_close, 0)

        def Quoted_multi_line_text(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.Quoted_multi_line_text)
            else:
                return self.getToken(Swift5Parser.Quoted_multi_line_text, i)

        def Interpolataion_multi_line(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.Interpolataion_multi_line)
            else:
                return self.getToken(Swift5Parser.Interpolataion_multi_line, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_interpolated_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_string_literal" ):
                listener.enterInterpolated_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_string_literal" ):
                listener.exitInterpolated_string_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterpolated_string_literal" ):
                return visitor.visitInterpolated_string_literal(self)
            else:
                return visitor.visitChildren(self)




    def interpolated_string_literal(self):

        localctx = Swift5Parser.Interpolated_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_interpolated_string_literal)
        self._la = 0 # Token type
        try:
            self.state = 2869
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Swift5Parser.Single_line_string_open]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2833
                self.match(Swift5Parser.Single_line_string_open)
                self.state = 2847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Swift5Parser.Interpolataion_single_line or _la==Swift5Parser.Quoted_single_line_text:
                    self.state = 2845
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Swift5Parser.Quoted_single_line_text]:
                        self.state = 2834
                        self.match(Swift5Parser.Quoted_single_line_text)
                        pass
                    elif token in [Swift5Parser.Interpolataion_single_line]:
                        self.state = 2835
                        self.match(Swift5Parser.Interpolataion_single_line)
                        self.state = 2841
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
                        if la_ == 1:
                            self.state = 2836
                            self.expression()
                            pass

                        elif la_ == 2:
                            self.state = 2837
                            self.tuple_element()
                            self.state = 2838
                            self.match(Swift5Parser.COMMA)
                            self.state = 2839
                            self.tuple_element_list()
                            pass


                        self.state = 2843
                        self.match(Swift5Parser.RPAREN)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2849
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2850
                self.match(Swift5Parser.Single_line_string_close)
                pass
            elif token in [Swift5Parser.Multi_line_string_open]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2851
                self.match(Swift5Parser.Multi_line_string_open)
                self.state = 2865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Swift5Parser.Interpolataion_multi_line or _la==Swift5Parser.Quoted_multi_line_text:
                    self.state = 2863
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Swift5Parser.Quoted_multi_line_text]:
                        self.state = 2852
                        self.match(Swift5Parser.Quoted_multi_line_text)
                        pass
                    elif token in [Swift5Parser.Interpolataion_multi_line]:
                        self.state = 2853
                        self.match(Swift5Parser.Interpolataion_multi_line)
                        self.state = 2859
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
                        if la_ == 1:
                            self.state = 2854
                            self.expression()
                            pass

                        elif la_ == 2:
                            self.state = 2855
                            self.tuple_element()
                            self.state = 2856
                            self.match(Swift5Parser.COMMA)
                            self.state = 2857
                            self.tuple_element_list()
                            pass


                        self.state = 2861
                        self.match(Swift5Parser.RPAREN)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2867
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2868
                self.match(Swift5Parser.Multi_line_string_close)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[2] = self.statements_sempred
        self._predicates[49] = self.compilation_condition_sempred
        self._predicates[184] = self.pattern_sempred
        self._predicates[200] = self.balanced_token_punctuation_sempred
        self._predicates[251] = self.forced_value_suffix_sempred
        self._predicates[252] = self.optional_chaining_suffix_sempred
        self._predicates[261] = self.type_sempred
        self._predicates[277] = self.trailing_composition_and_sempred
        self._predicates[286] = self.assignment_operator_sempred
        self._predicates[287] = self.negate_prefix_operator_sempred
        self._predicates[288] = self.compilation_condition_AND_sempred
        self._predicates[289] = self.compilation_condition_OR_sempred
        self._predicates[290] = self.compilation_condition_GE_sempred
        self._predicates[291] = self.compilation_condition_L_sempred
        self._predicates[292] = self.arrow_operator_sempred
        self._predicates[293] = self.range_operator_sempred
        self._predicates[294] = self.same_type_equals_sempred
        self._predicates[295] = self.binary_operator_sempred
        self._predicates[296] = self.prefix_operator_sempred
        self._predicates[297] = self.postfix_operator_sempred
        self._predicates[301] = self.operator_characters_sempred
        self._predicates[304] = self.dot_operator_characters_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def statements_sempred(self, localctx:StatementsContext, predIndex:int):
            if predIndex == 0:
                return SwiftSupport.isSeparatedStatement(_input, localctx.indexBefore)
         

    def compilation_condition_sempred(self, localctx:Compilation_conditionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def pattern_sempred(self, localctx:PatternContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def balanced_token_punctuation_sempred(self, localctx:Balanced_token_punctuationContext, predIndex:int):
            if predIndex == 3:
                return SwiftSupport.isPrefixOp(_input)
         

            if predIndex == 4:
                return SwiftSupport.isPostfixOp(_input)
         

    def forced_value_suffix_sempred(self, localctx:Forced_value_suffixContext, predIndex:int):
            if predIndex == 5:
                return SwiftSupport.isBinaryOp(_input)
         

    def optional_chaining_suffix_sempred(self, localctx:Optional_chaining_suffixContext, predIndex:int):
            if predIndex == 6:
                return SwiftSupport.isBinaryOp(_input)
         

    def type_sempred(self, localctx:TypeContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 8:
                return SwiftSupport.isBinaryOp(_input)
         

            if predIndex == 9:
                return SwiftSupport.isBinaryOp(_input)
         

    def trailing_composition_and_sempred(self, localctx:Trailing_composition_andContext, predIndex:int):
            if predIndex == 10:
                return SwiftSupport.isBinaryOp(_input)
         

    def assignment_operator_sempred(self, localctx:Assignment_operatorContext, predIndex:int):
            if predIndex == 11:
                return SwiftSupport.isBinaryOp(_input)
         

    def negate_prefix_operator_sempred(self, localctx:Negate_prefix_operatorContext, predIndex:int):
            if predIndex == 12:
                return SwiftSupport.isPrefixOp(_input)
         

    def compilation_condition_AND_sempred(self, localctx:Compilation_condition_ANDContext, predIndex:int):
            if predIndex == 13:
                return SwiftSupport.isOperator(_input,"&&")
         

    def compilation_condition_OR_sempred(self, localctx:Compilation_condition_ORContext, predIndex:int):
            if predIndex == 14:
                return SwiftSupport.isOperator(_input,"||")
         

    def compilation_condition_GE_sempred(self, localctx:Compilation_condition_GEContext, predIndex:int):
            if predIndex == 15:
                return SwiftSupport.isOperator(_input,">=")
         

    def compilation_condition_L_sempred(self, localctx:Compilation_condition_LContext, predIndex:int):
            if predIndex == 16:
                return SwiftSupport.isOperator(_input,"<")
         

    def arrow_operator_sempred(self, localctx:Arrow_operatorContext, predIndex:int):
            if predIndex == 17:
                return SwiftSupport.isOperator(_input,"->")
         

    def range_operator_sempred(self, localctx:Range_operatorContext, predIndex:int):
            if predIndex == 18:
                return SwiftSupport.isOperator(_input,"...")
         

    def same_type_equals_sempred(self, localctx:Same_type_equalsContext, predIndex:int):
            if predIndex == 19:
                return SwiftSupport.isOperator(_input,"==")
         

    def binary_operator_sempred(self, localctx:Binary_operatorContext, predIndex:int):
            if predIndex == 20:
                return SwiftSupport.isBinaryOp(_input)
         

    def prefix_operator_sempred(self, localctx:Prefix_operatorContext, predIndex:int):
            if predIndex == 21:
                return SwiftSupport.isPrefixOp(_input)
         

    def postfix_operator_sempred(self, localctx:Postfix_operatorContext, predIndex:int):
            if predIndex == 22:
                return SwiftSupport.isPostfixOp(_input)
         

    def operator_characters_sempred(self, localctx:Operator_charactersContext, predIndex:int):
            if predIndex == 23:
                return _input.get(_input.index()-1).getType()!=WS
         

    def dot_operator_characters_sempred(self, localctx:Dot_operator_charactersContext, predIndex:int):
            if predIndex == 24:
                return _input.get(_input.index()-1).getType()!=WS
         




