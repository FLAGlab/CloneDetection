# Generated from RustParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .RustParserBase import RustParserBase
else:
    from RustParserBase import RustParserBase

def serializedATN():
    return [
        4,1,130,2475,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,1,0,5,0,394,8,0,
        10,0,12,0,397,9,0,1,0,5,0,400,8,0,10,0,12,0,403,9,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,2,1,2,5,2,413,8,2,10,2,12,2,416,9,2,1,2,1,2,1,2,5,
        2,421,8,2,10,2,12,2,424,9,2,1,2,1,2,1,2,5,2,429,8,2,10,2,12,2,432,
        9,2,1,2,3,2,435,8,2,1,3,4,3,438,8,3,11,3,12,3,439,1,3,3,3,443,8,
        3,1,4,1,4,1,4,1,4,1,4,3,4,450,8,4,1,5,1,5,1,5,1,5,5,5,456,8,5,10,
        5,12,5,459,9,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,468,8,5,10,5,12,5,
        471,9,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,480,8,5,10,5,12,5,483,9,
        5,1,5,1,5,3,5,487,8,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,508,8,7,1,8,1,8,1,8,5,8,513,
        8,8,10,8,12,8,516,9,8,1,8,3,8,519,8,8,1,9,1,9,1,9,1,9,1,10,1,10,
        5,10,527,8,10,10,10,12,10,530,9,10,1,10,1,10,1,10,5,10,535,8,10,
        10,10,12,10,538,9,10,1,10,1,10,1,10,5,10,543,8,10,10,10,12,10,546,
        9,10,1,10,3,10,549,8,10,1,11,4,11,552,8,11,11,11,12,11,553,1,11,
        1,11,1,11,1,11,3,11,560,8,11,1,11,1,11,1,11,1,11,1,11,4,11,567,8,
        11,11,11,12,11,568,1,11,1,11,3,11,573,8,11,1,11,1,11,3,11,577,8,
        11,1,12,1,12,1,12,1,12,3,12,583,8,12,1,13,1,13,1,14,1,14,1,14,1,
        14,3,14,591,8,14,1,15,1,15,1,16,1,16,1,17,5,17,598,8,17,10,17,12,
        17,601,9,17,1,17,1,17,3,17,605,8,17,1,18,3,18,608,8,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,623,
        8,18,1,19,1,19,3,19,627,8,19,1,20,3,20,630,8,20,1,20,1,20,1,20,1,
        20,1,20,5,20,637,8,20,10,20,12,20,640,9,20,1,20,5,20,643,8,20,10,
        20,12,20,646,9,20,1,20,3,20,649,8,20,1,21,1,21,1,21,1,21,3,21,655,
        8,21,1,21,1,21,1,22,1,22,3,22,661,8,22,1,23,1,23,1,23,3,23,666,8,
        23,1,24,1,24,1,24,1,24,1,25,3,25,673,8,25,1,25,3,25,676,8,25,1,25,
        1,25,1,25,1,25,1,25,5,25,683,8,25,10,25,12,25,686,9,25,1,25,3,25,
        689,8,25,3,25,691,8,25,1,25,3,25,694,8,25,1,25,1,25,1,25,1,25,3,
        25,700,8,25,3,25,702,8,25,3,25,704,8,25,1,26,1,26,1,26,1,26,3,26,
        710,8,26,1,26,1,26,3,26,714,8,26,1,26,1,26,3,26,718,8,26,1,26,3,
        26,721,8,26,1,26,1,26,3,26,725,8,26,1,27,3,27,728,8,27,1,27,3,27,
        731,8,27,1,27,3,27,734,8,27,1,27,1,27,3,27,738,8,27,3,27,740,8,27,
        1,28,1,28,1,29,1,29,3,29,746,8,29,1,29,1,29,1,29,3,29,751,8,29,1,
        29,1,29,1,29,5,29,756,8,29,10,29,12,29,759,9,29,1,29,3,29,762,8,
        29,3,29,764,8,29,1,30,5,30,767,8,30,10,30,12,30,770,9,30,1,30,1,
        30,3,30,774,8,30,1,31,1,31,3,31,778,8,31,3,31,780,8,31,1,31,3,31,
        783,8,31,1,31,1,31,1,32,3,32,788,8,32,1,32,1,32,1,32,1,32,1,33,5,
        33,795,8,33,10,33,12,33,798,9,33,1,33,1,33,1,33,3,33,803,8,33,1,
        34,1,34,1,34,1,34,3,34,809,8,34,1,35,1,35,1,35,1,36,1,36,1,36,3,
        36,817,8,36,1,36,3,36,820,8,36,1,36,1,36,3,36,824,8,36,1,36,1,36,
        1,37,1,37,3,37,830,8,37,1,38,1,38,1,38,3,38,835,8,38,1,38,3,38,838,
        8,38,1,38,1,38,3,38,842,8,38,1,38,1,38,3,38,846,8,38,1,39,1,39,1,
        39,3,39,851,8,39,1,39,1,39,3,39,855,8,39,1,39,1,39,3,39,859,8,39,
        1,39,1,39,1,40,1,40,1,40,5,40,866,8,40,10,40,12,40,869,9,40,1,40,
        3,40,872,8,40,1,41,5,41,875,8,41,10,41,12,41,878,9,41,1,41,3,41,
        881,8,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,5,42,890,8,42,10,42,
        12,42,893,9,42,1,42,3,42,896,8,42,1,43,5,43,899,8,43,10,43,12,43,
        902,9,43,1,43,3,43,905,8,43,1,43,1,43,1,44,1,44,1,44,3,44,912,8,
        44,1,44,3,44,915,8,44,1,44,1,44,3,44,919,8,44,1,44,1,44,1,45,1,45,
        1,45,5,45,926,8,45,10,45,12,45,929,9,45,1,45,3,45,932,8,45,1,46,
        5,46,935,8,46,10,46,12,46,938,9,46,1,46,3,46,941,8,46,1,46,1,46,
        1,46,1,46,3,46,947,8,46,1,47,1,47,3,47,951,8,47,1,47,1,47,1,48,1,
        48,3,48,957,8,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,3,50,967,
        8,50,1,50,3,50,970,8,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,3,51,
        979,8,51,1,51,1,51,1,51,1,51,3,51,985,8,51,1,51,1,51,1,52,1,52,3,
        52,991,8,52,1,52,1,52,1,52,1,52,1,52,3,52,998,8,52,1,52,1,52,1,53,
        3,53,1003,8,53,1,53,1,53,1,53,3,53,1008,8,53,1,53,1,53,3,53,1012,
        8,53,3,53,1014,8,53,1,53,3,53,1017,8,53,1,53,1,53,5,53,1021,8,53,
        10,53,12,53,1024,9,53,1,53,5,53,1027,8,53,10,53,12,53,1030,9,53,
        1,53,1,53,1,54,1,54,3,54,1036,8,54,1,55,1,55,3,55,1040,8,55,1,55,
        1,55,3,55,1044,8,55,1,55,1,55,5,55,1048,8,55,10,55,12,55,1051,9,
        55,1,55,5,55,1054,8,55,10,55,12,55,1057,9,55,1,55,1,55,1,56,3,56,
        1062,8,56,1,56,1,56,3,56,1066,8,56,1,56,3,56,1069,8,56,1,56,1,56,
        1,56,1,56,3,56,1075,8,56,1,56,1,56,5,56,1079,8,56,10,56,12,56,1082,
        9,56,1,56,5,56,1085,8,56,10,56,12,56,1088,9,56,1,56,1,56,1,57,3,
        57,1093,8,57,1,57,1,57,3,57,1097,8,57,1,57,1,57,5,57,1101,8,57,10,
        57,12,57,1104,9,57,1,57,5,57,1107,8,57,10,57,12,57,1110,9,57,1,57,
        1,57,1,58,5,58,1115,8,58,10,58,12,58,1118,9,58,1,58,1,58,3,58,1122,
        8,58,1,58,1,58,3,58,1126,8,58,3,58,1128,8,58,1,59,1,59,1,59,1,59,
        5,59,1134,8,59,10,59,12,59,1137,9,59,1,59,1,59,3,59,1141,8,59,3,
        59,1143,8,59,1,59,1,59,1,60,5,60,1148,8,60,10,60,12,60,1151,9,60,
        1,60,1,60,1,60,3,60,1156,8,60,1,61,3,61,1159,8,61,1,61,1,61,1,61,
        3,61,1164,8,61,1,62,3,62,1167,8,62,1,62,1,62,1,62,3,62,1172,8,62,
        3,62,1174,8,62,1,62,1,62,3,62,1178,8,62,1,63,1,63,1,63,1,63,1,63,
        1,64,1,64,1,64,1,64,5,64,1189,8,64,10,64,12,64,1192,9,64,1,64,3,
        64,1195,8,64,1,65,1,65,3,65,1199,8,65,1,66,1,66,1,66,1,66,1,67,3,
        67,1206,8,67,1,67,1,67,1,67,3,67,1211,8,67,1,68,1,68,1,68,1,69,5,
        69,1217,8,69,10,69,12,69,1220,9,69,1,69,1,69,3,69,1224,8,69,1,69,
        1,69,1,69,3,69,1229,8,69,3,69,1231,8,69,1,70,1,70,1,70,1,70,1,70,
        1,70,1,71,1,71,1,71,1,71,1,71,1,72,1,72,3,72,1246,8,72,1,73,1,73,
        1,73,3,73,1251,8,73,1,74,1,74,1,74,1,74,1,74,3,74,1258,8,74,1,75,
        5,75,1261,8,75,10,75,12,75,1264,9,75,1,75,1,75,1,75,1,75,3,75,1270,
        8,75,1,75,1,75,3,75,1274,8,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,
        3,76,1283,8,76,3,76,1285,8,76,1,77,1,77,4,77,1289,8,77,11,77,12,
        77,1290,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1299,8,77,1,77,1,77,1,
        77,1,77,1,77,1,77,1,77,3,77,1308,8,77,1,77,1,77,1,77,1,77,3,77,1314,
        8,77,1,77,3,77,1317,8,77,1,77,1,77,3,77,1321,8,77,1,77,3,77,1324,
        8,77,1,77,1,77,3,77,1328,8,77,1,77,1,77,5,77,1332,8,77,10,77,12,
        77,1335,9,77,1,77,1,77,1,77,1,77,1,77,5,77,1342,8,77,10,77,12,77,
        1345,9,77,1,77,3,77,1348,8,77,1,77,1,77,1,77,5,77,1353,8,77,10,77,
        12,77,1356,9,77,1,77,3,77,1359,8,77,1,77,1,77,1,77,1,77,1,77,1,77,
        3,77,1367,8,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,
        1378,8,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,
        1416,8,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,3,77,1432,8,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1448,8,77,5,77,1450,8,77,
        10,77,12,77,1453,9,77,1,78,1,78,1,79,1,79,1,80,4,80,1460,8,80,11,
        80,12,80,1461,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,
        1473,8,80,1,81,1,81,1,82,1,82,3,82,1479,8,82,1,83,1,83,5,83,1483,
        8,83,10,83,12,83,1486,9,83,1,83,3,83,1489,8,83,1,83,1,83,1,84,4,
        84,1494,8,84,11,84,12,84,1495,1,84,3,84,1499,8,84,1,84,3,84,1502,
        8,84,1,85,1,85,3,85,1506,8,85,1,85,1,85,1,86,1,86,1,86,1,87,1,87,
        1,87,5,87,1516,8,87,10,87,12,87,1519,9,87,1,87,3,87,1522,8,87,1,
        87,1,87,1,87,1,87,3,87,1528,8,87,1,88,1,88,1,88,4,88,1533,8,88,11,
        88,12,88,1534,1,88,3,88,1538,8,88,1,89,1,89,1,90,1,90,1,90,3,90,
        1545,8,90,1,91,1,91,1,91,5,91,1550,8,91,10,91,12,91,1553,9,91,1,
        91,1,91,3,91,1557,8,91,1,91,1,91,1,92,1,92,1,92,5,92,1564,8,92,10,
        92,12,92,1567,9,92,1,92,1,92,1,92,3,92,1572,8,92,3,92,1574,8,92,
        1,93,5,93,1577,8,93,10,93,12,93,1580,9,93,1,93,1,93,1,93,3,93,1585,
        8,93,1,93,1,93,1,93,3,93,1590,8,93,1,94,1,94,1,94,1,95,1,95,1,95,
        5,95,1598,8,95,10,95,12,95,1601,9,95,1,95,1,95,1,95,5,95,1606,8,
        95,10,95,12,95,1609,9,95,1,95,3,95,1612,8,95,3,95,1614,8,95,1,95,
        1,95,1,96,1,96,1,97,1,97,1,97,3,97,1623,8,97,1,98,1,98,1,98,3,98,
        1628,8,98,1,98,1,98,1,99,1,99,1,99,5,99,1635,8,99,10,99,12,99,1638,
        9,99,1,99,3,99,1641,8,99,1,100,1,100,1,100,3,100,1646,8,100,1,100,
        1,100,1,100,3,100,1651,8,100,1,101,1,101,1,101,1,101,1,101,5,101,
        1658,8,101,10,101,12,101,1661,9,101,1,101,3,101,1664,8,101,3,101,
        1666,8,101,1,101,1,101,1,102,1,102,1,103,1,103,1,103,5,103,1675,
        8,103,10,103,12,103,1678,9,103,1,103,3,103,1681,8,103,1,104,3,104,
        1684,8,104,1,104,1,104,1,104,3,104,1689,8,104,1,104,3,104,1692,8,
        104,1,104,1,104,1,104,1,104,1,104,3,104,1699,8,104,1,105,1,105,1,
        105,5,105,1704,8,105,10,105,12,105,1707,9,105,1,105,3,105,1710,8,
        105,1,106,5,106,1713,8,106,10,106,12,106,1716,9,106,1,106,1,106,
        1,106,3,106,1721,8,106,1,107,3,107,1724,8,107,1,107,1,107,1,107,
        1,107,3,107,1730,8,107,1,108,1,108,1,108,1,109,1,109,1,109,1,109,
        1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,
        1,111,1,111,1,112,1,112,1,112,1,113,1,113,1,113,1,113,1,113,1,113,
        1,113,3,113,1762,8,113,3,113,1764,8,113,1,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,1,114,3,114,1776,8,114,3,114,1778,
        8,114,1,115,1,115,1,115,1,115,5,115,1784,8,115,10,115,12,115,1787,
        9,115,1,115,3,115,1790,8,115,1,115,1,115,1,116,1,116,1,116,1,116,
        5,116,1798,8,116,10,116,12,116,1801,9,116,1,116,1,116,1,116,1,116,
        3,116,1807,8,116,1,117,1,117,1,117,1,117,1,117,3,117,1814,8,117,
        3,117,1816,8,117,1,118,5,118,1819,8,118,10,118,12,118,1822,9,118,
        1,118,1,118,3,118,1826,8,118,1,119,1,119,1,119,1,120,3,120,1832,
        8,120,1,120,1,120,1,120,5,120,1837,8,120,10,120,12,120,1840,9,120,
        1,121,1,121,3,121,1844,8,121,1,122,1,122,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,1,122,1,122,3,122,1858,8,122,1,123,1,123,
        1,123,1,123,1,123,1,123,1,123,1,123,1,123,3,123,1869,8,123,1,123,
        1,123,3,123,1873,8,123,1,123,3,123,1876,8,123,1,124,3,124,1879,8,
        124,1,124,3,124,1882,8,124,1,124,1,124,1,124,3,124,1887,8,124,1,
        125,1,125,1,126,1,126,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
        1,127,1,127,1,127,1,127,3,127,1904,8,127,1,128,1,128,1,128,3,128,
        1909,8,128,1,128,1,128,3,128,1913,8,128,1,128,1,128,3,128,1917,8,
        128,1,129,1,129,3,129,1921,8,129,1,129,1,129,1,130,1,130,1,130,3,
        130,1928,8,130,1,130,1,130,1,131,1,131,1,131,3,131,1935,8,131,3,
        131,1937,8,131,1,131,3,131,1940,8,131,1,132,1,132,1,132,5,132,1945,
        8,132,10,132,12,132,1948,9,132,1,133,5,133,1951,8,133,10,133,12,
        133,1954,9,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,
        133,3,133,1965,8,133,1,133,3,133,1968,8,133,1,133,3,133,1971,8,133,
        1,134,5,134,1974,8,134,10,134,12,134,1977,9,134,1,134,1,134,1,135,
        1,135,1,135,3,135,1984,8,135,1,135,1,135,1,136,1,136,1,136,5,136,
        1991,8,136,10,136,12,136,1994,9,136,1,136,3,136,1997,8,136,1,137,
        1,137,3,137,2001,8,137,1,137,1,137,1,138,1,138,1,138,1,138,1,138,
        1,138,1,138,4,138,2012,8,138,11,138,12,138,2013,1,138,3,138,2017,
        8,138,3,138,2019,8,138,1,139,1,139,1,139,1,139,1,140,1,140,3,140,
        2027,8,140,1,140,1,140,1,141,1,141,1,141,5,141,2034,8,141,10,141,
        12,141,2037,9,141,1,141,3,141,2040,8,141,1,142,1,142,3,142,2044,
        8,142,1,143,1,143,1,143,3,143,2049,8,143,1,144,1,144,1,144,1,144,
        1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,3,144,
        2065,8,144,1,145,1,145,1,145,1,145,1,146,1,146,1,147,1,147,1,147,
        1,147,4,147,2077,8,147,11,147,12,147,2078,1,147,3,147,2082,8,147,
        3,147,2084,8,147,1,147,1,147,1,148,1,148,1,148,1,148,1,148,1,148,
        1,149,1,149,1,149,1,149,1,150,1,150,3,150,2100,8,150,1,150,3,150,
        2103,8,150,1,150,1,150,1,151,1,151,1,151,1,151,1,152,3,152,2112,
        8,152,1,152,1,152,1,152,1,152,3,152,2118,8,152,1,152,1,152,3,152,
        2122,8,152,1,153,3,153,2125,8,153,1,153,1,153,3,153,2129,8,153,3,
        153,2131,8,153,1,154,1,154,1,154,1,155,1,155,3,155,2138,8,155,1,
        156,1,156,1,156,5,156,2143,8,156,10,156,12,156,2146,9,156,1,156,
        3,156,2149,8,156,1,157,5,157,2152,8,157,10,157,12,157,2155,9,157,
        1,157,1,157,3,157,2159,8,157,1,157,3,157,2162,8,157,1,157,1,157,
        1,158,1,158,1,158,5,158,2169,8,158,10,158,12,158,2172,9,158,1,158,
        1,158,1,158,5,158,2177,8,158,10,158,12,158,2180,9,158,1,158,1,158,
        1,159,3,159,2185,8,159,1,159,1,159,1,160,3,160,2190,8,160,1,160,
        1,160,1,161,1,161,1,161,1,162,1,162,1,162,1,163,1,163,1,164,1,164,
        1,164,5,164,2205,8,164,10,164,12,164,2208,9,164,1,164,3,164,2211,
        8,164,1,165,1,165,3,165,2215,8,165,1,166,3,166,2218,8,166,1,166,
        3,166,2221,8,166,1,166,1,166,1,166,3,166,2226,8,166,1,166,3,166,
        2229,8,166,1,166,1,166,1,166,3,166,2234,8,166,1,167,1,167,1,167,
        5,167,2239,8,167,10,167,12,167,2242,9,167,1,167,3,167,2245,8,167,
        1,168,1,168,1,169,3,169,2250,8,169,1,169,1,169,1,169,5,169,2255,
        8,169,10,169,12,169,2258,9,169,1,170,1,170,1,170,1,170,1,170,3,170,
        2265,8,170,1,171,3,171,2268,8,171,1,171,1,171,1,171,5,171,2273,8,
        171,10,171,12,171,2276,9,171,1,172,1,172,1,172,3,172,2281,8,172,
        1,173,1,173,1,173,1,173,1,173,1,173,3,173,2289,8,173,1,174,1,174,
        1,174,1,174,1,174,1,174,3,174,2297,8,174,1,174,1,174,3,174,2301,
        8,174,1,174,3,174,2304,8,174,1,174,1,174,1,174,1,174,1,174,1,174,
        3,174,2312,8,174,1,174,3,174,2315,8,174,1,174,1,174,1,174,1,174,
        1,174,1,174,5,174,2323,8,174,10,174,12,174,2326,9,174,1,174,1,174,
        3,174,2330,8,174,1,174,1,174,3,174,2334,8,174,1,175,1,175,1,175,
        1,175,3,175,2340,8,175,1,176,1,176,3,176,2344,8,176,1,176,1,176,
        3,176,2348,8,176,1,177,1,177,1,177,5,177,2353,8,177,10,177,12,177,
        2356,9,177,1,178,1,178,1,178,5,178,2361,8,178,10,178,12,178,2364,
        9,178,1,179,1,179,1,179,5,179,2369,8,179,10,179,12,179,2372,9,179,
        1,180,1,180,1,180,1,180,1,181,1,181,1,181,4,181,2381,8,181,11,181,
        12,181,2382,1,182,1,182,1,182,1,182,3,182,2389,8,182,1,182,1,182,
        1,183,1,183,1,183,4,183,2396,8,183,11,183,12,183,2397,1,184,3,184,
        2401,8,184,1,184,1,184,1,184,5,184,2406,8,184,10,184,12,184,2409,
        9,184,1,185,1,185,3,185,2413,8,185,1,185,1,185,3,185,2417,8,185,
        1,186,1,186,3,186,2421,8,186,1,186,1,186,1,186,3,186,2426,8,186,
        1,187,1,187,1,187,5,187,2431,8,187,10,187,12,187,2434,9,187,1,187,
        3,187,2437,8,187,1,188,1,188,1,188,1,188,1,188,1,188,1,188,3,188,
        2446,8,188,1,188,3,188,2449,8,188,1,189,1,189,1,190,1,190,1,191,
        1,191,1,191,1,191,1,191,1,191,3,191,2461,8,191,1,192,1,192,1,193,
        1,193,1,194,1,194,1,194,1,194,1,195,1,195,1,195,1,195,1,195,0,1,
        154,196,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
        186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
        218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,
        250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
        282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,
        314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,
        346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,
        378,380,382,384,386,388,390,0,14,3,0,82,82,84,84,124,124,1,0,70,
        71,2,0,89,89,91,91,2,0,83,83,88,88,1,0,84,86,1,0,82,83,1,0,104,109,
        1,0,93,102,4,0,9,9,30,30,69,75,80,80,2,0,3,3,20,20,3,0,53,53,55,
        55,81,81,2,0,54,54,57,58,1,0,1,53,2,0,83,83,85,122,2760,0,395,1,
        0,0,0,2,406,1,0,0,0,4,434,1,0,0,0,6,442,1,0,0,0,8,449,1,0,0,0,10,
        486,1,0,0,0,12,488,1,0,0,0,14,507,1,0,0,0,16,509,1,0,0,0,18,520,
        1,0,0,0,20,548,1,0,0,0,22,576,1,0,0,0,24,582,1,0,0,0,26,584,1,0,
        0,0,28,590,1,0,0,0,30,592,1,0,0,0,32,594,1,0,0,0,34,599,1,0,0,0,
        36,607,1,0,0,0,38,626,1,0,0,0,40,629,1,0,0,0,42,650,1,0,0,0,44,660,
        1,0,0,0,46,662,1,0,0,0,48,667,1,0,0,0,50,703,1,0,0,0,52,705,1,0,
        0,0,54,727,1,0,0,0,56,741,1,0,0,0,58,763,1,0,0,0,60,768,1,0,0,0,
        62,779,1,0,0,0,64,787,1,0,0,0,66,796,1,0,0,0,68,804,1,0,0,0,70,810,
        1,0,0,0,72,813,1,0,0,0,74,829,1,0,0,0,76,831,1,0,0,0,78,847,1,0,
        0,0,80,862,1,0,0,0,82,876,1,0,0,0,84,886,1,0,0,0,86,900,1,0,0,0,
        88,908,1,0,0,0,90,922,1,0,0,0,92,936,1,0,0,0,94,948,1,0,0,0,96,954,
        1,0,0,0,98,960,1,0,0,0,100,963,1,0,0,0,102,975,1,0,0,0,104,988,1,
        0,0,0,106,1002,1,0,0,0,108,1035,1,0,0,0,110,1037,1,0,0,0,112,1061,
        1,0,0,0,114,1092,1,0,0,0,116,1116,1,0,0,0,118,1129,1,0,0,0,120,1149,
        1,0,0,0,122,1158,1,0,0,0,124,1166,1,0,0,0,126,1179,1,0,0,0,128,1184,
        1,0,0,0,130,1198,1,0,0,0,132,1200,1,0,0,0,134,1205,1,0,0,0,136,1212,
        1,0,0,0,138,1218,1,0,0,0,140,1232,1,0,0,0,142,1238,1,0,0,0,144,1243,
        1,0,0,0,146,1250,1,0,0,0,148,1257,1,0,0,0,150,1262,1,0,0,0,152,1284,
        1,0,0,0,154,1366,1,0,0,0,156,1454,1,0,0,0,158,1456,1,0,0,0,160,1472,
        1,0,0,0,162,1474,1,0,0,0,164,1478,1,0,0,0,166,1480,1,0,0,0,168,1501,
        1,0,0,0,170,1503,1,0,0,0,172,1509,1,0,0,0,174,1527,1,0,0,0,176,1532,
        1,0,0,0,178,1539,1,0,0,0,180,1544,1,0,0,0,182,1546,1,0,0,0,184,1560,
        1,0,0,0,186,1578,1,0,0,0,188,1591,1,0,0,0,190,1594,1,0,0,0,192,1617,
        1,0,0,0,194,1622,1,0,0,0,196,1624,1,0,0,0,198,1631,1,0,0,0,200,1650,
        1,0,0,0,202,1652,1,0,0,0,204,1669,1,0,0,0,206,1671,1,0,0,0,208,1683,
        1,0,0,0,210,1700,1,0,0,0,212,1714,1,0,0,0,214,1723,1,0,0,0,216,1731,
        1,0,0,0,218,1734,1,0,0,0,220,1738,1,0,0,0,222,1745,1,0,0,0,224,1751,
        1,0,0,0,226,1754,1,0,0,0,228,1765,1,0,0,0,230,1779,1,0,0,0,232,1799,
        1,0,0,0,234,1815,1,0,0,0,236,1820,1,0,0,0,238,1827,1,0,0,0,240,1831,
        1,0,0,0,242,1843,1,0,0,0,244,1857,1,0,0,0,246,1875,1,0,0,0,248,1878,
        1,0,0,0,250,1888,1,0,0,0,252,1890,1,0,0,0,254,1903,1,0,0,0,256,1916,
        1,0,0,0,258,1918,1,0,0,0,260,1924,1,0,0,0,262,1939,1,0,0,0,264,1941,
        1,0,0,0,266,1952,1,0,0,0,268,1975,1,0,0,0,270,1980,1,0,0,0,272,1987,
        1,0,0,0,274,1998,1,0,0,0,276,2018,1,0,0,0,278,2020,1,0,0,0,280,2024,
        1,0,0,0,282,2030,1,0,0,0,284,2043,1,0,0,0,286,2048,1,0,0,0,288,2064,
        1,0,0,0,290,2066,1,0,0,0,292,2070,1,0,0,0,294,2072,1,0,0,0,296,2087,
        1,0,0,0,298,2093,1,0,0,0,300,2097,1,0,0,0,302,2106,1,0,0,0,304,2111,
        1,0,0,0,306,2124,1,0,0,0,308,2132,1,0,0,0,310,2137,1,0,0,0,312,2139,
        1,0,0,0,314,2153,1,0,0,0,316,2170,1,0,0,0,318,2184,1,0,0,0,320,2189,
        1,0,0,0,322,2193,1,0,0,0,324,2196,1,0,0,0,326,2199,1,0,0,0,328,2201,
        1,0,0,0,330,2214,1,0,0,0,332,2233,1,0,0,0,334,2240,1,0,0,0,336,2246,
        1,0,0,0,338,2249,1,0,0,0,340,2264,1,0,0,0,342,2267,1,0,0,0,344,2277,
        1,0,0,0,346,2288,1,0,0,0,348,2333,1,0,0,0,350,2339,1,0,0,0,352,2347,
        1,0,0,0,354,2349,1,0,0,0,356,2357,1,0,0,0,358,2365,1,0,0,0,360,2373,
        1,0,0,0,362,2377,1,0,0,0,364,2384,1,0,0,0,366,2392,1,0,0,0,368,2400,
        1,0,0,0,370,2410,1,0,0,0,372,2418,1,0,0,0,374,2427,1,0,0,0,376,2438,
        1,0,0,0,378,2450,1,0,0,0,380,2452,1,0,0,0,382,2460,1,0,0,0,384,2462,
        1,0,0,0,386,2464,1,0,0,0,388,2466,1,0,0,0,390,2470,1,0,0,0,392,394,
        3,140,70,0,393,392,1,0,0,0,394,397,1,0,0,0,395,393,1,0,0,0,395,396,
        1,0,0,0,396,401,1,0,0,0,397,395,1,0,0,0,398,400,3,34,17,0,399,398,
        1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,404,
        1,0,0,0,403,401,1,0,0,0,404,405,5,0,0,1,405,1,1,0,0,0,406,407,3,
        338,169,0,407,408,5,88,0,0,408,409,3,4,2,0,409,3,1,0,0,0,410,414,
        5,129,0,0,411,413,3,6,3,0,412,411,1,0,0,0,413,416,1,0,0,0,414,412,
        1,0,0,0,414,415,1,0,0,0,415,417,1,0,0,0,416,414,1,0,0,0,417,435,
        5,130,0,0,418,422,5,127,0,0,419,421,3,6,3,0,420,419,1,0,0,0,421,
        424,1,0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,423,425,1,0,0,0,424,
        422,1,0,0,0,425,435,5,128,0,0,426,430,5,125,0,0,427,429,3,6,3,0,
        428,427,1,0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,
        431,433,1,0,0,0,432,430,1,0,0,0,433,435,5,126,0,0,434,410,1,0,0,
        0,434,418,1,0,0,0,434,426,1,0,0,0,435,5,1,0,0,0,436,438,3,8,4,0,
        437,436,1,0,0,0,438,439,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,
        440,443,1,0,0,0,441,443,3,4,2,0,442,437,1,0,0,0,442,441,1,0,0,0,
        443,7,1,0,0,0,444,450,3,382,191,0,445,450,3,384,192,0,446,450,3,
        386,193,0,447,450,3,30,15,0,448,450,5,123,0,0,449,444,1,0,0,0,449,
        445,1,0,0,0,449,446,1,0,0,0,449,447,1,0,0,0,449,448,1,0,0,0,450,
        9,1,0,0,0,451,452,3,338,169,0,452,453,5,88,0,0,453,457,5,129,0,0,
        454,456,3,6,3,0,455,454,1,0,0,0,456,459,1,0,0,0,457,455,1,0,0,0,
        457,458,1,0,0,0,458,460,1,0,0,0,459,457,1,0,0,0,460,461,5,130,0,
        0,461,462,5,117,0,0,462,487,1,0,0,0,463,464,3,338,169,0,464,465,
        5,88,0,0,465,469,5,127,0,0,466,468,3,6,3,0,467,466,1,0,0,0,468,471,
        1,0,0,0,469,467,1,0,0,0,469,470,1,0,0,0,470,472,1,0,0,0,471,469,
        1,0,0,0,472,473,5,128,0,0,473,474,5,117,0,0,474,487,1,0,0,0,475,
        476,3,338,169,0,476,477,5,88,0,0,477,481,5,125,0,0,478,480,3,6,3,
        0,479,478,1,0,0,0,480,483,1,0,0,0,481,479,1,0,0,0,481,482,1,0,0,
        0,482,484,1,0,0,0,483,481,1,0,0,0,484,485,5,126,0,0,485,487,1,0,
        0,0,486,451,1,0,0,0,486,463,1,0,0,0,486,475,1,0,0,0,487,11,1,0,0,
        0,488,489,5,54,0,0,489,490,5,88,0,0,490,491,3,378,189,0,491,492,
        3,14,7,0,492,13,1,0,0,0,493,494,5,129,0,0,494,495,3,16,8,0,495,496,
        5,130,0,0,496,497,5,117,0,0,497,508,1,0,0,0,498,499,5,127,0,0,499,
        500,3,16,8,0,500,501,5,128,0,0,501,502,5,117,0,0,502,508,1,0,0,0,
        503,504,5,125,0,0,504,505,3,16,8,0,505,506,5,126,0,0,506,508,1,0,
        0,0,507,493,1,0,0,0,507,498,1,0,0,0,507,503,1,0,0,0,508,15,1,0,0,
        0,509,514,3,18,9,0,510,511,5,117,0,0,511,513,3,18,9,0,512,510,1,
        0,0,0,513,516,1,0,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,518,1,
        0,0,0,516,514,1,0,0,0,517,519,5,117,0,0,518,517,1,0,0,0,518,519,
        1,0,0,0,519,17,1,0,0,0,520,521,3,20,10,0,521,522,5,121,0,0,522,523,
        3,32,16,0,523,19,1,0,0,0,524,528,5,129,0,0,525,527,3,22,11,0,526,
        525,1,0,0,0,527,530,1,0,0,0,528,526,1,0,0,0,528,529,1,0,0,0,529,
        531,1,0,0,0,530,528,1,0,0,0,531,549,5,130,0,0,532,536,5,127,0,0,
        533,535,3,22,11,0,534,533,1,0,0,0,535,538,1,0,0,0,536,534,1,0,0,
        0,536,537,1,0,0,0,537,539,1,0,0,0,538,536,1,0,0,0,539,549,5,128,
        0,0,540,544,5,125,0,0,541,543,3,22,11,0,542,541,1,0,0,0,543,546,
        1,0,0,0,544,542,1,0,0,0,544,545,1,0,0,0,545,547,1,0,0,0,546,544,
        1,0,0,0,547,549,5,126,0,0,548,524,1,0,0,0,548,532,1,0,0,0,548,540,
        1,0,0,0,549,21,1,0,0,0,550,552,3,24,12,0,551,550,1,0,0,0,552,553,
        1,0,0,0,553,551,1,0,0,0,553,554,1,0,0,0,554,577,1,0,0,0,555,577,
        3,20,10,0,556,559,5,123,0,0,557,560,3,378,189,0,558,560,5,24,0,0,
        559,557,1,0,0,0,559,558,1,0,0,0,560,561,1,0,0,0,561,562,5,118,0,
        0,562,577,3,26,13,0,563,564,5,123,0,0,564,566,5,129,0,0,565,567,
        3,22,11,0,566,565,1,0,0,0,567,568,1,0,0,0,568,566,1,0,0,0,568,569,
        1,0,0,0,569,570,1,0,0,0,570,572,5,130,0,0,571,573,3,28,14,0,572,
        571,1,0,0,0,572,573,1,0,0,0,573,574,1,0,0,0,574,575,3,30,15,0,575,
        577,1,0,0,0,576,551,1,0,0,0,576,555,1,0,0,0,576,556,1,0,0,0,576,
        563,1,0,0,0,577,23,1,0,0,0,578,583,3,382,191,0,579,583,3,384,192,
        0,580,583,3,386,193,0,581,583,3,30,15,0,582,578,1,0,0,0,582,579,
        1,0,0,0,582,580,1,0,0,0,582,581,1,0,0,0,583,25,1,0,0,0,584,585,3,
        378,189,0,585,27,1,0,0,0,586,591,3,382,191,0,587,591,3,384,192,0,
        588,591,3,386,193,0,589,591,5,123,0,0,590,586,1,0,0,0,590,587,1,
        0,0,0,590,588,1,0,0,0,590,589,1,0,0,0,591,29,1,0,0,0,592,593,7,0,
        0,0,593,31,1,0,0,0,594,595,3,4,2,0,595,33,1,0,0,0,596,598,3,142,
        71,0,597,596,1,0,0,0,598,601,1,0,0,0,599,597,1,0,0,0,599,600,1,0,
        0,0,600,604,1,0,0,0,601,599,1,0,0,0,602,605,3,36,18,0,603,605,3,
        38,19,0,604,602,1,0,0,0,604,603,1,0,0,0,605,35,1,0,0,0,606,608,3,
        376,188,0,607,606,1,0,0,0,607,608,1,0,0,0,608,622,1,0,0,0,609,623,
        3,40,20,0,610,623,3,42,21,0,611,623,3,48,24,0,612,623,3,52,26,0,
        613,623,3,72,36,0,614,623,3,74,37,0,615,623,3,88,44,0,616,623,3,
        100,50,0,617,623,3,102,51,0,618,623,3,104,52,0,619,623,3,106,53,
        0,620,623,3,108,54,0,621,623,3,114,57,0,622,609,1,0,0,0,622,610,
        1,0,0,0,622,611,1,0,0,0,622,612,1,0,0,0,622,613,1,0,0,0,622,614,
        1,0,0,0,622,615,1,0,0,0,622,616,1,0,0,0,622,617,1,0,0,0,622,618,
        1,0,0,0,622,619,1,0,0,0,622,620,1,0,0,0,622,621,1,0,0,0,623,37,1,
        0,0,0,624,627,3,10,5,0,625,627,3,12,6,0,626,624,1,0,0,0,626,625,
        1,0,0,0,627,39,1,0,0,0,628,630,5,32,0,0,629,628,1,0,0,0,629,630,
        1,0,0,0,630,631,1,0,0,0,631,632,5,18,0,0,632,648,3,378,189,0,633,
        649,5,117,0,0,634,638,5,125,0,0,635,637,3,140,70,0,636,635,1,0,0,
        0,637,640,1,0,0,0,638,636,1,0,0,0,638,639,1,0,0,0,639,644,1,0,0,
        0,640,638,1,0,0,0,641,643,3,34,17,0,642,641,1,0,0,0,643,646,1,0,
        0,0,644,642,1,0,0,0,644,645,1,0,0,0,645,647,1,0,0,0,646,644,1,0,
        0,0,647,649,5,126,0,0,648,633,1,0,0,0,648,634,1,0,0,0,649,41,1,0,
        0,0,650,651,5,8,0,0,651,652,5,5,0,0,652,654,3,44,22,0,653,655,3,
        46,23,0,654,653,1,0,0,0,654,655,1,0,0,0,655,656,1,0,0,0,656,657,
        5,117,0,0,657,43,1,0,0,0,658,661,3,378,189,0,659,661,5,24,0,0,660,
        658,1,0,0,0,660,659,1,0,0,0,661,45,1,0,0,0,662,665,5,1,0,0,663,666,
        3,378,189,0,664,666,5,111,0,0,665,663,1,0,0,0,665,664,1,0,0,0,666,
        47,1,0,0,0,667,668,5,33,0,0,668,669,3,50,25,0,669,670,5,117,0,0,
        670,49,1,0,0,0,671,673,3,338,169,0,672,671,1,0,0,0,672,673,1,0,0,
        0,673,674,1,0,0,0,674,676,5,119,0,0,675,672,1,0,0,0,675,676,1,0,
        0,0,676,693,1,0,0,0,677,694,5,84,0,0,678,690,5,125,0,0,679,684,3,
        50,25,0,680,681,5,116,0,0,681,683,3,50,25,0,682,680,1,0,0,0,683,
        686,1,0,0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,688,1,0,0,0,686,
        684,1,0,0,0,687,689,5,116,0,0,688,687,1,0,0,0,688,689,1,0,0,0,689,
        691,1,0,0,0,690,679,1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,
        694,5,126,0,0,693,677,1,0,0,0,693,678,1,0,0,0,694,704,1,0,0,0,695,
        701,3,338,169,0,696,699,5,1,0,0,697,700,3,378,189,0,698,700,5,111,
        0,0,699,697,1,0,0,0,699,698,1,0,0,0,700,702,1,0,0,0,701,696,1,0,
        0,0,701,702,1,0,0,0,702,704,1,0,0,0,703,675,1,0,0,0,703,695,1,0,
        0,0,704,51,1,0,0,0,705,706,3,54,27,0,706,707,5,10,0,0,707,709,3,
        378,189,0,708,710,3,118,59,0,709,708,1,0,0,0,709,710,1,0,0,0,710,
        711,1,0,0,0,711,713,5,129,0,0,712,714,3,58,29,0,713,712,1,0,0,0,
        713,714,1,0,0,0,714,715,1,0,0,0,715,717,5,130,0,0,716,718,3,70,35,
        0,717,716,1,0,0,0,717,718,1,0,0,0,718,720,1,0,0,0,719,721,3,128,
        64,0,720,719,1,0,0,0,720,721,1,0,0,0,721,724,1,0,0,0,722,725,3,166,
        83,0,723,725,5,117,0,0,724,722,1,0,0,0,724,723,1,0,0,0,725,53,1,
        0,0,0,726,728,5,3,0,0,727,726,1,0,0,0,727,728,1,0,0,0,728,730,1,
        0,0,0,729,731,5,36,0,0,730,729,1,0,0,0,730,731,1,0,0,0,731,733,1,
        0,0,0,732,734,5,32,0,0,733,732,1,0,0,0,733,734,1,0,0,0,734,739,1,
        0,0,0,735,737,5,8,0,0,736,738,3,56,28,0,737,736,1,0,0,0,737,738,
        1,0,0,0,738,740,1,0,0,0,739,735,1,0,0,0,739,740,1,0,0,0,740,55,1,
        0,0,0,741,742,7,1,0,0,742,57,1,0,0,0,743,745,3,60,30,0,744,746,5,
        116,0,0,745,744,1,0,0,0,745,746,1,0,0,0,746,764,1,0,0,0,747,748,
        3,60,30,0,748,749,5,116,0,0,749,751,1,0,0,0,750,747,1,0,0,0,750,
        751,1,0,0,0,751,752,1,0,0,0,752,757,3,66,33,0,753,754,5,116,0,0,
        754,756,3,66,33,0,755,753,1,0,0,0,756,759,1,0,0,0,757,755,1,0,0,
        0,757,758,1,0,0,0,758,761,1,0,0,0,759,757,1,0,0,0,760,762,5,116,
        0,0,761,760,1,0,0,0,761,762,1,0,0,0,762,764,1,0,0,0,763,743,1,0,
        0,0,763,750,1,0,0,0,764,59,1,0,0,0,765,767,3,142,71,0,766,765,1,
        0,0,0,767,770,1,0,0,0,768,766,1,0,0,0,768,769,1,0,0,0,769,773,1,
        0,0,0,770,768,1,0,0,0,771,774,3,62,31,0,772,774,3,64,32,0,773,771,
        1,0,0,0,773,772,1,0,0,0,774,61,1,0,0,0,775,777,5,89,0,0,776,778,
        3,336,168,0,777,776,1,0,0,0,777,778,1,0,0,0,778,780,1,0,0,0,779,
        775,1,0,0,0,779,780,1,0,0,0,780,782,1,0,0,0,781,783,5,20,0,0,782,
        781,1,0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,785,5,24,0,0,785,
        63,1,0,0,0,786,788,5,20,0,0,787,786,1,0,0,0,787,788,1,0,0,0,788,
        789,1,0,0,0,789,790,5,24,0,0,790,791,5,118,0,0,791,792,3,286,143,
        0,792,65,1,0,0,0,793,795,3,142,71,0,794,793,1,0,0,0,795,798,1,0,
        0,0,796,794,1,0,0,0,796,797,1,0,0,0,797,802,1,0,0,0,798,796,1,0,
        0,0,799,803,3,68,34,0,800,803,5,114,0,0,801,803,3,286,143,0,802,
        799,1,0,0,0,802,800,1,0,0,0,802,801,1,0,0,0,803,67,1,0,0,0,804,805,
        3,240,120,0,805,808,5,118,0,0,806,809,3,286,143,0,807,809,5,114,
        0,0,808,806,1,0,0,0,808,807,1,0,0,0,809,69,1,0,0,0,810,811,5,120,
        0,0,811,812,3,286,143,0,812,71,1,0,0,0,813,814,5,31,0,0,814,816,
        3,378,189,0,815,817,3,118,59,0,816,815,1,0,0,0,816,817,1,0,0,0,817,
        819,1,0,0,0,818,820,3,128,64,0,819,818,1,0,0,0,819,820,1,0,0,0,820,
        823,1,0,0,0,821,822,5,103,0,0,822,824,3,286,143,0,823,821,1,0,0,
        0,823,824,1,0,0,0,824,825,1,0,0,0,825,826,5,117,0,0,826,73,1,0,0,
        0,827,830,3,76,38,0,828,830,3,78,39,0,829,827,1,0,0,0,829,828,1,
        0,0,0,830,75,1,0,0,0,831,832,5,27,0,0,832,834,3,378,189,0,833,835,
        3,118,59,0,834,833,1,0,0,0,834,835,1,0,0,0,835,837,1,0,0,0,836,838,
        3,128,64,0,837,836,1,0,0,0,837,838,1,0,0,0,838,845,1,0,0,0,839,841,
        5,125,0,0,840,842,3,80,40,0,841,840,1,0,0,0,841,842,1,0,0,0,842,
        843,1,0,0,0,843,846,5,126,0,0,844,846,5,117,0,0,845,839,1,0,0,0,
        845,844,1,0,0,0,846,77,1,0,0,0,847,848,5,27,0,0,848,850,3,378,189,
        0,849,851,3,118,59,0,850,849,1,0,0,0,850,851,1,0,0,0,851,852,1,0,
        0,0,852,854,5,129,0,0,853,855,3,84,42,0,854,853,1,0,0,0,854,855,
        1,0,0,0,855,856,1,0,0,0,856,858,5,130,0,0,857,859,3,128,64,0,858,
        857,1,0,0,0,858,859,1,0,0,0,859,860,1,0,0,0,860,861,5,117,0,0,861,
        79,1,0,0,0,862,867,3,82,41,0,863,864,5,116,0,0,864,866,3,82,41,0,
        865,863,1,0,0,0,866,869,1,0,0,0,867,865,1,0,0,0,867,868,1,0,0,0,
        868,871,1,0,0,0,869,867,1,0,0,0,870,872,5,116,0,0,871,870,1,0,0,
        0,871,872,1,0,0,0,872,81,1,0,0,0,873,875,3,142,71,0,874,873,1,0,
        0,0,875,878,1,0,0,0,876,874,1,0,0,0,876,877,1,0,0,0,877,880,1,0,
        0,0,878,876,1,0,0,0,879,881,3,376,188,0,880,879,1,0,0,0,880,881,
        1,0,0,0,881,882,1,0,0,0,882,883,3,378,189,0,883,884,5,118,0,0,884,
        885,3,286,143,0,885,83,1,0,0,0,886,891,3,86,43,0,887,888,5,116,0,
        0,888,890,3,86,43,0,889,887,1,0,0,0,890,893,1,0,0,0,891,889,1,0,
        0,0,891,892,1,0,0,0,892,895,1,0,0,0,893,891,1,0,0,0,894,896,5,116,
        0,0,895,894,1,0,0,0,895,896,1,0,0,0,896,85,1,0,0,0,897,899,3,142,
        71,0,898,897,1,0,0,0,899,902,1,0,0,0,900,898,1,0,0,0,900,901,1,0,
        0,0,901,904,1,0,0,0,902,900,1,0,0,0,903,905,3,376,188,0,904,903,
        1,0,0,0,904,905,1,0,0,0,905,906,1,0,0,0,906,907,3,286,143,0,907,
        87,1,0,0,0,908,909,5,7,0,0,909,911,3,378,189,0,910,912,3,118,59,
        0,911,910,1,0,0,0,911,912,1,0,0,0,912,914,1,0,0,0,913,915,3,128,
        64,0,914,913,1,0,0,0,914,915,1,0,0,0,915,916,1,0,0,0,916,918,5,125,
        0,0,917,919,3,90,45,0,918,917,1,0,0,0,918,919,1,0,0,0,919,920,1,
        0,0,0,920,921,5,126,0,0,921,89,1,0,0,0,922,927,3,92,46,0,923,924,
        5,116,0,0,924,926,3,92,46,0,925,923,1,0,0,0,926,929,1,0,0,0,927,
        925,1,0,0,0,927,928,1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,0,930,
        932,5,116,0,0,931,930,1,0,0,0,931,932,1,0,0,0,932,91,1,0,0,0,933,
        935,3,142,71,0,934,933,1,0,0,0,935,938,1,0,0,0,936,934,1,0,0,0,936,
        937,1,0,0,0,937,940,1,0,0,0,938,936,1,0,0,0,939,941,3,376,188,0,
        940,939,1,0,0,0,940,941,1,0,0,0,941,942,1,0,0,0,942,946,3,378,189,
        0,943,947,3,94,47,0,944,947,3,96,48,0,945,947,3,98,49,0,946,943,
        1,0,0,0,946,944,1,0,0,0,946,945,1,0,0,0,946,947,1,0,0,0,947,93,1,
        0,0,0,948,950,5,129,0,0,949,951,3,84,42,0,950,949,1,0,0,0,950,951,
        1,0,0,0,951,952,1,0,0,0,952,953,5,130,0,0,953,95,1,0,0,0,954,956,
        5,125,0,0,955,957,3,80,40,0,956,955,1,0,0,0,956,957,1,0,0,0,957,
        958,1,0,0,0,958,959,5,126,0,0,959,97,1,0,0,0,960,961,5,103,0,0,961,
        962,3,154,77,0,962,99,1,0,0,0,963,964,5,52,0,0,964,966,3,378,189,
        0,965,967,3,118,59,0,966,965,1,0,0,0,966,967,1,0,0,0,967,969,1,0,
        0,0,968,970,3,128,64,0,969,968,1,0,0,0,969,970,1,0,0,0,970,971,1,
        0,0,0,971,972,5,125,0,0,972,973,3,80,40,0,973,974,5,126,0,0,974,
        101,1,0,0,0,975,978,5,3,0,0,976,979,3,378,189,0,977,979,5,111,0,
        0,978,976,1,0,0,0,978,977,1,0,0,0,979,980,1,0,0,0,980,981,5,118,
        0,0,981,984,3,286,143,0,982,983,5,103,0,0,983,985,3,154,77,0,984,
        982,1,0,0,0,984,985,1,0,0,0,985,986,1,0,0,0,986,987,5,117,0,0,987,
        103,1,0,0,0,988,990,5,26,0,0,989,991,5,20,0,0,990,989,1,0,0,0,990,
        991,1,0,0,0,991,992,1,0,0,0,992,993,3,378,189,0,993,994,5,118,0,
        0,994,997,3,286,143,0,995,996,5,103,0,0,996,998,3,154,77,0,997,995,
        1,0,0,0,997,998,1,0,0,0,998,999,1,0,0,0,999,1000,5,117,0,0,1000,
        105,1,0,0,0,1001,1003,5,32,0,0,1002,1001,1,0,0,0,1002,1003,1,0,0,
        0,1003,1004,1,0,0,0,1004,1005,5,29,0,0,1005,1007,3,378,189,0,1006,
        1008,3,118,59,0,1007,1006,1,0,0,0,1007,1008,1,0,0,0,1008,1013,1,
        0,0,0,1009,1011,5,118,0,0,1010,1012,3,328,164,0,1011,1010,1,0,0,
        0,1011,1012,1,0,0,0,1012,1014,1,0,0,0,1013,1009,1,0,0,0,1013,1014,
        1,0,0,0,1014,1016,1,0,0,0,1015,1017,3,128,64,0,1016,1015,1,0,0,0,
        1016,1017,1,0,0,0,1017,1018,1,0,0,0,1018,1022,5,125,0,0,1019,1021,
        3,140,70,0,1020,1019,1,0,0,0,1021,1024,1,0,0,0,1022,1020,1,0,0,0,
        1022,1023,1,0,0,0,1023,1028,1,0,0,0,1024,1022,1,0,0,0,1025,1027,
        3,138,69,0,1026,1025,1,0,0,0,1027,1030,1,0,0,0,1028,1026,1,0,0,0,
        1028,1029,1,0,0,0,1029,1031,1,0,0,0,1030,1028,1,0,0,0,1031,1032,
        5,126,0,0,1032,107,1,0,0,0,1033,1036,3,110,55,0,1034,1036,3,112,
        56,0,1035,1033,1,0,0,0,1035,1034,1,0,0,0,1036,109,1,0,0,0,1037,1039,
        5,13,0,0,1038,1040,3,118,59,0,1039,1038,1,0,0,0,1039,1040,1,0,0,
        0,1040,1041,1,0,0,0,1041,1043,3,286,143,0,1042,1044,3,128,64,0,1043,
        1042,1,0,0,0,1043,1044,1,0,0,0,1044,1045,1,0,0,0,1045,1049,5,125,
        0,0,1046,1048,3,140,70,0,1047,1046,1,0,0,0,1048,1051,1,0,0,0,1049,
        1047,1,0,0,0,1049,1050,1,0,0,0,1050,1055,1,0,0,0,1051,1049,1,0,0,
        0,1052,1054,3,138,69,0,1053,1052,1,0,0,0,1054,1057,1,0,0,0,1055,
        1053,1,0,0,0,1055,1056,1,0,0,0,1056,1058,1,0,0,0,1057,1055,1,0,0,
        0,1058,1059,5,126,0,0,1059,111,1,0,0,0,1060,1062,5,32,0,0,1061,1060,
        1,0,0,0,1061,1062,1,0,0,0,1062,1063,1,0,0,0,1063,1065,5,13,0,0,1064,
        1066,3,118,59,0,1065,1064,1,0,0,0,1065,1066,1,0,0,0,1066,1068,1,
        0,0,0,1067,1069,5,88,0,0,1068,1067,1,0,0,0,1068,1069,1,0,0,0,1069,
        1070,1,0,0,0,1070,1071,3,368,184,0,1071,1072,5,11,0,0,1072,1074,
        3,286,143,0,1073,1075,3,128,64,0,1074,1073,1,0,0,0,1074,1075,1,0,
        0,0,1075,1076,1,0,0,0,1076,1080,5,125,0,0,1077,1079,3,140,70,0,1078,
        1077,1,0,0,0,1079,1082,1,0,0,0,1080,1078,1,0,0,0,1080,1081,1,0,0,
        0,1081,1086,1,0,0,0,1082,1080,1,0,0,0,1083,1085,3,138,69,0,1084,
        1083,1,0,0,0,1085,1088,1,0,0,0,1086,1084,1,0,0,0,1086,1087,1,0,0,
        0,1087,1089,1,0,0,0,1088,1086,1,0,0,0,1089,1090,5,126,0,0,1090,113,
        1,0,0,0,1091,1093,5,32,0,0,1092,1091,1,0,0,0,1092,1093,1,0,0,0,1093,
        1094,1,0,0,0,1094,1096,5,8,0,0,1095,1097,3,56,28,0,1096,1095,1,0,
        0,0,1096,1097,1,0,0,0,1097,1098,1,0,0,0,1098,1102,5,125,0,0,1099,
        1101,3,140,70,0,1100,1099,1,0,0,0,1101,1104,1,0,0,0,1102,1100,1,
        0,0,0,1102,1103,1,0,0,0,1103,1108,1,0,0,0,1104,1102,1,0,0,0,1105,
        1107,3,116,58,0,1106,1105,1,0,0,0,1107,1110,1,0,0,0,1108,1106,1,
        0,0,0,1108,1109,1,0,0,0,1109,1111,1,0,0,0,1110,1108,1,0,0,0,1111,
        1112,5,126,0,0,1112,115,1,0,0,0,1113,1115,3,142,71,0,1114,1113,1,
        0,0,0,1115,1118,1,0,0,0,1116,1114,1,0,0,0,1116,1117,1,0,0,0,1117,
        1127,1,0,0,0,1118,1116,1,0,0,0,1119,1128,3,10,5,0,1120,1122,3,376,
        188,0,1121,1120,1,0,0,0,1121,1122,1,0,0,0,1122,1125,1,0,0,0,1123,
        1126,3,104,52,0,1124,1126,3,52,26,0,1125,1123,1,0,0,0,1125,1124,
        1,0,0,0,1126,1128,1,0,0,0,1127,1119,1,0,0,0,1127,1121,1,0,0,0,1128,
        117,1,0,0,0,1129,1142,5,107,0,0,1130,1131,3,120,60,0,1131,1132,5,
        116,0,0,1132,1134,1,0,0,0,1133,1130,1,0,0,0,1134,1137,1,0,0,0,1135,
        1133,1,0,0,0,1135,1136,1,0,0,0,1136,1138,1,0,0,0,1137,1135,1,0,0,
        0,1138,1140,3,120,60,0,1139,1141,5,116,0,0,1140,1139,1,0,0,0,1140,
        1141,1,0,0,0,1141,1143,1,0,0,0,1142,1135,1,0,0,0,1142,1143,1,0,0,
        0,1143,1144,1,0,0,0,1144,1145,5,106,0,0,1145,119,1,0,0,0,1146,1148,
        3,142,71,0,1147,1146,1,0,0,0,1148,1151,1,0,0,0,1149,1147,1,0,0,0,
        1149,1150,1,0,0,0,1150,1155,1,0,0,0,1151,1149,1,0,0,0,1152,1156,
        3,122,61,0,1153,1156,3,124,62,0,1154,1156,3,126,63,0,1155,1152,1,
        0,0,0,1155,1153,1,0,0,0,1155,1154,1,0,0,0,1156,121,1,0,0,0,1157,
        1159,3,142,71,0,1158,1157,1,0,0,0,1158,1159,1,0,0,0,1159,1160,1,
        0,0,0,1160,1163,5,81,0,0,1161,1162,5,118,0,0,1162,1164,3,334,167,
        0,1163,1161,1,0,0,0,1163,1164,1,0,0,0,1164,123,1,0,0,0,1165,1167,
        3,142,71,0,1166,1165,1,0,0,0,1166,1167,1,0,0,0,1167,1168,1,0,0,0,
        1168,1173,3,378,189,0,1169,1171,5,118,0,0,1170,1172,3,328,164,0,
        1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,1174,1,0,0,0,1173,1169,
        1,0,0,0,1173,1174,1,0,0,0,1174,1177,1,0,0,0,1175,1176,5,103,0,0,
        1176,1178,3,286,143,0,1177,1175,1,0,0,0,1177,1178,1,0,0,0,1178,125,
        1,0,0,0,1179,1180,5,3,0,0,1180,1181,3,378,189,0,1181,1182,5,118,
        0,0,1182,1183,3,286,143,0,1183,127,1,0,0,0,1184,1190,5,34,0,0,1185,
        1186,3,130,65,0,1186,1187,5,116,0,0,1187,1189,1,0,0,0,1188,1185,
        1,0,0,0,1189,1192,1,0,0,0,1190,1188,1,0,0,0,1190,1191,1,0,0,0,1191,
        1194,1,0,0,0,1192,1190,1,0,0,0,1193,1195,3,130,65,0,1194,1193,1,
        0,0,0,1194,1195,1,0,0,0,1195,129,1,0,0,0,1196,1199,3,132,66,0,1197,
        1199,3,134,67,0,1198,1196,1,0,0,0,1198,1197,1,0,0,0,1199,131,1,0,
        0,0,1200,1201,3,336,168,0,1201,1202,5,118,0,0,1202,1203,3,334,167,
        0,1203,133,1,0,0,0,1204,1206,3,136,68,0,1205,1204,1,0,0,0,1205,1206,
        1,0,0,0,1206,1207,1,0,0,0,1207,1208,3,286,143,0,1208,1210,5,118,
        0,0,1209,1211,3,328,164,0,1210,1209,1,0,0,0,1210,1211,1,0,0,0,1211,
        135,1,0,0,0,1212,1213,5,11,0,0,1213,1214,3,118,59,0,1214,137,1,0,
        0,0,1215,1217,3,142,71,0,1216,1215,1,0,0,0,1217,1220,1,0,0,0,1218,
        1216,1,0,0,0,1218,1219,1,0,0,0,1219,1230,1,0,0,0,1220,1218,1,0,0,
        0,1221,1231,3,10,5,0,1222,1224,3,376,188,0,1223,1222,1,0,0,0,1223,
        1224,1,0,0,0,1224,1228,1,0,0,0,1225,1229,3,72,36,0,1226,1229,3,102,
        51,0,1227,1229,3,52,26,0,1228,1225,1,0,0,0,1228,1226,1,0,0,0,1228,
        1227,1,0,0,0,1229,1231,1,0,0,0,1230,1221,1,0,0,0,1230,1223,1,0,0,
        0,1231,139,1,0,0,0,1232,1233,5,122,0,0,1233,1234,5,88,0,0,1234,1235,
        5,127,0,0,1235,1236,3,144,72,0,1236,1237,5,128,0,0,1237,141,1,0,
        0,0,1238,1239,5,122,0,0,1239,1240,5,127,0,0,1240,1241,3,144,72,0,
        1241,1242,5,128,0,0,1242,143,1,0,0,0,1243,1245,3,338,169,0,1244,
        1246,3,146,73,0,1245,1244,1,0,0,0,1245,1246,1,0,0,0,1246,145,1,0,
        0,0,1247,1251,3,4,2,0,1248,1249,5,103,0,0,1249,1251,3,162,81,0,1250,
        1247,1,0,0,0,1250,1248,1,0,0,0,1251,147,1,0,0,0,1252,1258,5,117,
        0,0,1253,1258,3,34,17,0,1254,1258,3,150,75,0,1255,1258,3,152,76,
        0,1256,1258,3,10,5,0,1257,1252,1,0,0,0,1257,1253,1,0,0,0,1257,1254,
        1,0,0,0,1257,1255,1,0,0,0,1257,1256,1,0,0,0,1258,149,1,0,0,0,1259,
        1261,3,142,71,0,1260,1259,1,0,0,0,1261,1264,1,0,0,0,1262,1260,1,
        0,0,0,1262,1263,1,0,0,0,1263,1265,1,0,0,0,1264,1262,1,0,0,0,1265,
        1266,5,15,0,0,1266,1269,3,242,121,0,1267,1268,5,118,0,0,1268,1270,
        3,286,143,0,1269,1267,1,0,0,0,1269,1270,1,0,0,0,1270,1273,1,0,0,
        0,1271,1272,5,103,0,0,1272,1274,3,154,77,0,1273,1271,1,0,0,0,1273,
        1274,1,0,0,0,1274,1275,1,0,0,0,1275,1276,5,117,0,0,1276,151,1,0,
        0,0,1277,1278,3,154,77,0,1278,1279,5,117,0,0,1279,1285,1,0,0,0,1280,
        1282,3,160,80,0,1281,1283,5,117,0,0,1282,1281,1,0,0,0,1282,1283,
        1,0,0,0,1283,1285,1,0,0,0,1284,1277,1,0,0,0,1284,1280,1,0,0,0,1285,
        153,1,0,0,0,1286,1288,6,77,-1,0,1287,1289,3,142,71,0,1288,1287,1,
        0,0,0,1289,1290,1,0,0,0,1290,1288,1,0,0,0,1290,1291,1,0,0,0,1291,
        1292,1,0,0,0,1292,1293,3,154,77,40,1293,1367,1,0,0,0,1294,1367,3,
        162,81,0,1295,1367,3,164,82,0,1296,1298,7,2,0,0,1297,1299,5,20,0,
        0,1298,1297,1,0,0,0,1298,1299,1,0,0,0,1299,1300,1,0,0,0,1300,1367,
        3,154,77,30,1301,1302,5,84,0,0,1302,1367,3,154,77,29,1303,1304,7,
        3,0,0,1304,1367,3,154,77,28,1305,1307,5,113,0,0,1306,1308,3,154,
        77,0,1307,1306,1,0,0,0,1307,1308,1,0,0,0,1308,1367,1,0,0,0,1309,
        1310,5,115,0,0,1310,1367,3,154,77,15,1311,1313,5,4,0,0,1312,1314,
        5,81,0,0,1313,1312,1,0,0,0,1313,1314,1,0,0,0,1314,1316,1,0,0,0,1315,
        1317,3,154,77,0,1316,1315,1,0,0,0,1316,1317,1,0,0,0,1317,1367,1,
        0,0,0,1318,1320,5,2,0,0,1319,1321,5,81,0,0,1320,1319,1,0,0,0,1320,
        1321,1,0,0,0,1321,1323,1,0,0,0,1322,1324,3,154,77,0,1323,1322,1,
        0,0,0,1323,1324,1,0,0,0,1324,1367,1,0,0,0,1325,1327,5,23,0,0,1326,
        1328,3,154,77,0,1327,1326,1,0,0,0,1327,1328,1,0,0,0,1328,1367,1,
        0,0,0,1329,1333,5,129,0,0,1330,1332,3,140,70,0,1331,1330,1,0,0,0,
        1332,1335,1,0,0,0,1333,1331,1,0,0,0,1333,1334,1,0,0,0,1334,1336,
        1,0,0,0,1335,1333,1,0,0,0,1336,1337,3,154,77,0,1337,1338,5,130,0,
        0,1338,1367,1,0,0,0,1339,1343,5,127,0,0,1340,1342,3,140,70,0,1341,
        1340,1,0,0,0,1342,1345,1,0,0,0,1343,1341,1,0,0,0,1343,1344,1,0,0,
        0,1344,1347,1,0,0,0,1345,1343,1,0,0,0,1346,1348,3,174,87,0,1347,
        1346,1,0,0,0,1347,1348,1,0,0,0,1348,1349,1,0,0,0,1349,1367,5,128,
        0,0,1350,1354,5,129,0,0,1351,1353,3,140,70,0,1352,1351,1,0,0,0,1353,
        1356,1,0,0,0,1354,1352,1,0,0,0,1354,1355,1,0,0,0,1355,1358,1,0,0,
        0,1356,1354,1,0,0,0,1357,1359,3,176,88,0,1358,1357,1,0,0,0,1358,
        1359,1,0,0,0,1359,1360,1,0,0,0,1360,1367,5,130,0,0,1361,1367,3,180,
        90,0,1362,1367,3,194,97,0,1363,1367,3,208,104,0,1364,1367,3,160,
        80,0,1365,1367,3,2,1,0,1366,1286,1,0,0,0,1366,1294,1,0,0,0,1366,
        1295,1,0,0,0,1366,1296,1,0,0,0,1366,1301,1,0,0,0,1366,1303,1,0,0,
        0,1366,1305,1,0,0,0,1366,1309,1,0,0,0,1366,1311,1,0,0,0,1366,1318,
        1,0,0,0,1366,1325,1,0,0,0,1366,1329,1,0,0,0,1366,1339,1,0,0,0,1366,
        1350,1,0,0,0,1366,1361,1,0,0,0,1366,1362,1,0,0,0,1366,1363,1,0,0,
        0,1366,1364,1,0,0,0,1366,1365,1,0,0,0,1367,1451,1,0,0,0,1368,1369,
        10,26,0,0,1369,1370,7,4,0,0,1370,1450,3,154,77,27,1371,1372,10,25,
        0,0,1372,1373,7,5,0,0,1373,1450,3,154,77,26,1374,1377,10,24,0,0,
        1375,1378,3,388,194,0,1376,1378,3,390,195,0,1377,1375,1,0,0,0,1377,
        1376,1,0,0,0,1378,1379,1,0,0,0,1379,1380,3,154,77,25,1380,1450,1,
        0,0,0,1381,1382,10,23,0,0,1382,1383,5,89,0,0,1383,1450,3,154,77,
        24,1384,1385,10,22,0,0,1385,1386,5,87,0,0,1386,1450,3,154,77,23,
        1387,1388,10,21,0,0,1388,1389,5,90,0,0,1389,1450,3,154,77,22,1390,
        1391,10,20,0,0,1391,1392,3,156,78,0,1392,1393,3,154,77,21,1393,1450,
        1,0,0,0,1394,1395,10,19,0,0,1395,1396,5,91,0,0,1396,1450,3,154,77,
        20,1397,1398,10,18,0,0,1398,1399,5,92,0,0,1399,1450,3,154,77,19,
        1400,1401,10,14,0,0,1401,1402,5,115,0,0,1402,1450,3,154,77,15,1403,
        1404,10,13,0,0,1404,1405,5,103,0,0,1405,1450,3,154,77,14,1406,1407,
        10,12,0,0,1407,1408,3,158,79,0,1408,1409,3,154,77,13,1409,1450,1,
        0,0,0,1410,1411,10,37,0,0,1411,1412,5,112,0,0,1412,1413,3,344,172,
        0,1413,1415,5,129,0,0,1414,1416,3,206,103,0,1415,1414,1,0,0,0,1415,
        1416,1,0,0,0,1416,1417,1,0,0,0,1417,1418,5,130,0,0,1418,1450,1,0,
        0,0,1419,1420,10,36,0,0,1420,1421,5,112,0,0,1421,1450,3,378,189,
        0,1422,1423,10,35,0,0,1423,1424,5,112,0,0,1424,1450,3,178,89,0,1425,
        1426,10,34,0,0,1426,1427,5,112,0,0,1427,1450,5,37,0,0,1428,1429,
        10,33,0,0,1429,1431,5,129,0,0,1430,1432,3,206,103,0,1431,1430,1,
        0,0,0,1431,1432,1,0,0,0,1432,1433,1,0,0,0,1433,1450,5,130,0,0,1434,
        1435,10,32,0,0,1435,1436,5,127,0,0,1436,1437,3,154,77,0,1437,1438,
        5,128,0,0,1438,1450,1,0,0,0,1439,1440,10,31,0,0,1440,1450,5,124,
        0,0,1441,1442,10,27,0,0,1442,1443,5,1,0,0,1443,1450,3,288,144,0,
        1444,1445,10,17,0,0,1445,1447,5,113,0,0,1446,1448,3,154,77,0,1447,
        1446,1,0,0,0,1447,1448,1,0,0,0,1448,1450,1,0,0,0,1449,1368,1,0,0,
        0,1449,1371,1,0,0,0,1449,1374,1,0,0,0,1449,1381,1,0,0,0,1449,1384,
        1,0,0,0,1449,1387,1,0,0,0,1449,1390,1,0,0,0,1449,1394,1,0,0,0,1449,
        1397,1,0,0,0,1449,1400,1,0,0,0,1449,1403,1,0,0,0,1449,1406,1,0,0,
        0,1449,1410,1,0,0,0,1449,1419,1,0,0,0,1449,1422,1,0,0,0,1449,1425,
        1,0,0,0,1449,1428,1,0,0,0,1449,1434,1,0,0,0,1449,1439,1,0,0,0,1449,
        1441,1,0,0,0,1449,1444,1,0,0,0,1450,1453,1,0,0,0,1451,1449,1,0,0,
        0,1451,1452,1,0,0,0,1452,155,1,0,0,0,1453,1451,1,0,0,0,1454,1455,
        7,6,0,0,1455,157,1,0,0,0,1456,1457,7,7,0,0,1457,159,1,0,0,0,1458,
        1460,3,142,71,0,1459,1458,1,0,0,0,1460,1461,1,0,0,0,1461,1459,1,
        0,0,0,1461,1462,1,0,0,0,1462,1463,1,0,0,0,1463,1464,3,160,80,0,1464,
        1473,1,0,0,0,1465,1473,3,166,83,0,1466,1473,3,170,85,0,1467,1473,
        3,172,86,0,1468,1473,3,214,107,0,1469,1473,3,226,113,0,1470,1473,
        3,228,114,0,1471,1473,3,230,115,0,1472,1459,1,0,0,0,1472,1465,1,
        0,0,0,1472,1466,1,0,0,0,1472,1467,1,0,0,0,1472,1468,1,0,0,0,1472,
        1469,1,0,0,0,1472,1470,1,0,0,0,1472,1471,1,0,0,0,1473,161,1,0,0,
        0,1474,1475,7,8,0,0,1475,163,1,0,0,0,1476,1479,3,342,171,0,1477,
        1479,3,362,181,0,1478,1476,1,0,0,0,1478,1477,1,0,0,0,1479,165,1,
        0,0,0,1480,1484,5,125,0,0,1481,1483,3,140,70,0,1482,1481,1,0,0,0,
        1483,1486,1,0,0,0,1484,1482,1,0,0,0,1484,1485,1,0,0,0,1485,1488,
        1,0,0,0,1486,1484,1,0,0,0,1487,1489,3,168,84,0,1488,1487,1,0,0,0,
        1488,1489,1,0,0,0,1489,1490,1,0,0,0,1490,1491,5,126,0,0,1491,167,
        1,0,0,0,1492,1494,3,148,74,0,1493,1492,1,0,0,0,1494,1495,1,0,0,0,
        1495,1493,1,0,0,0,1495,1496,1,0,0,0,1496,1498,1,0,0,0,1497,1499,
        3,154,77,0,1498,1497,1,0,0,0,1498,1499,1,0,0,0,1499,1502,1,0,0,0,
        1500,1502,3,154,77,0,1501,1493,1,0,0,0,1501,1500,1,0,0,0,1502,169,
        1,0,0,0,1503,1505,5,36,0,0,1504,1506,5,19,0,0,1505,1504,1,0,0,0,
        1505,1506,1,0,0,0,1506,1507,1,0,0,0,1507,1508,3,166,83,0,1508,171,
        1,0,0,0,1509,1510,5,32,0,0,1510,1511,3,166,83,0,1511,173,1,0,0,0,
        1512,1517,3,154,77,0,1513,1514,5,116,0,0,1514,1516,3,154,77,0,1515,
        1513,1,0,0,0,1516,1519,1,0,0,0,1517,1515,1,0,0,0,1517,1518,1,0,0,
        0,1518,1521,1,0,0,0,1519,1517,1,0,0,0,1520,1522,5,116,0,0,1521,1520,
        1,0,0,0,1521,1522,1,0,0,0,1522,1528,1,0,0,0,1523,1524,3,154,77,0,
        1524,1525,5,117,0,0,1525,1526,3,154,77,0,1526,1528,1,0,0,0,1527,
        1512,1,0,0,0,1527,1523,1,0,0,0,1528,175,1,0,0,0,1529,1530,3,154,
        77,0,1530,1531,5,116,0,0,1531,1533,1,0,0,0,1532,1529,1,0,0,0,1533,
        1534,1,0,0,0,1534,1532,1,0,0,0,1534,1535,1,0,0,0,1535,1537,1,0,0,
        0,1536,1538,3,154,77,0,1537,1536,1,0,0,0,1537,1538,1,0,0,0,1538,
        177,1,0,0,0,1539,1540,5,75,0,0,1540,179,1,0,0,0,1541,1545,3,182,
        91,0,1542,1545,3,190,95,0,1543,1545,3,192,96,0,1544,1541,1,0,0,0,
        1544,1542,1,0,0,0,1544,1543,1,0,0,0,1545,181,1,0,0,0,1546,1547,3,
        342,171,0,1547,1551,5,125,0,0,1548,1550,3,140,70,0,1549,1548,1,0,
        0,0,1550,1553,1,0,0,0,1551,1549,1,0,0,0,1551,1552,1,0,0,0,1552,1556,
        1,0,0,0,1553,1551,1,0,0,0,1554,1557,3,184,92,0,1555,1557,3,188,94,
        0,1556,1554,1,0,0,0,1556,1555,1,0,0,0,1556,1557,1,0,0,0,1557,1558,
        1,0,0,0,1558,1559,5,126,0,0,1559,183,1,0,0,0,1560,1565,3,186,93,
        0,1561,1562,5,116,0,0,1562,1564,3,186,93,0,1563,1561,1,0,0,0,1564,
        1567,1,0,0,0,1565,1563,1,0,0,0,1565,1566,1,0,0,0,1566,1573,1,0,0,
        0,1567,1565,1,0,0,0,1568,1569,5,116,0,0,1569,1574,3,188,94,0,1570,
        1572,5,116,0,0,1571,1570,1,0,0,0,1571,1572,1,0,0,0,1572,1574,1,0,
        0,0,1573,1568,1,0,0,0,1573,1571,1,0,0,0,1574,185,1,0,0,0,1575,1577,
        3,142,71,0,1576,1575,1,0,0,0,1577,1580,1,0,0,0,1578,1576,1,0,0,0,
        1578,1579,1,0,0,0,1579,1589,1,0,0,0,1580,1578,1,0,0,0,1581,1590,
        3,378,189,0,1582,1585,3,378,189,0,1583,1585,3,178,89,0,1584,1582,
        1,0,0,0,1584,1583,1,0,0,0,1585,1586,1,0,0,0,1586,1587,5,118,0,0,
        1587,1588,3,154,77,0,1588,1590,1,0,0,0,1589,1581,1,0,0,0,1589,1584,
        1,0,0,0,1590,187,1,0,0,0,1591,1592,5,113,0,0,1592,1593,3,154,77,
        0,1593,189,1,0,0,0,1594,1595,3,342,171,0,1595,1599,5,129,0,0,1596,
        1598,3,140,70,0,1597,1596,1,0,0,0,1598,1601,1,0,0,0,1599,1597,1,
        0,0,0,1599,1600,1,0,0,0,1600,1613,1,0,0,0,1601,1599,1,0,0,0,1602,
        1607,3,154,77,0,1603,1604,5,116,0,0,1604,1606,3,154,77,0,1605,1603,
        1,0,0,0,1606,1609,1,0,0,0,1607,1605,1,0,0,0,1607,1608,1,0,0,0,1608,
        1611,1,0,0,0,1609,1607,1,0,0,0,1610,1612,5,116,0,0,1611,1610,1,0,
        0,0,1611,1612,1,0,0,0,1612,1614,1,0,0,0,1613,1602,1,0,0,0,1613,1614,
        1,0,0,0,1614,1615,1,0,0,0,1615,1616,5,130,0,0,1616,191,1,0,0,0,1617,
        1618,3,342,171,0,1618,193,1,0,0,0,1619,1623,3,196,98,0,1620,1623,
        3,202,101,0,1621,1623,3,204,102,0,1622,1619,1,0,0,0,1622,1620,1,
        0,0,0,1622,1621,1,0,0,0,1623,195,1,0,0,0,1624,1625,3,342,171,0,1625,
        1627,5,125,0,0,1626,1628,3,198,99,0,1627,1626,1,0,0,0,1627,1628,
        1,0,0,0,1628,1629,1,0,0,0,1629,1630,5,126,0,0,1630,197,1,0,0,0,1631,
        1636,3,200,100,0,1632,1633,5,116,0,0,1633,1635,3,200,100,0,1634,
        1632,1,0,0,0,1635,1638,1,0,0,0,1636,1634,1,0,0,0,1636,1637,1,0,0,
        0,1637,1640,1,0,0,0,1638,1636,1,0,0,0,1639,1641,5,116,0,0,1640,1639,
        1,0,0,0,1640,1641,1,0,0,0,1641,199,1,0,0,0,1642,1651,3,378,189,0,
        1643,1646,3,378,189,0,1644,1646,3,178,89,0,1645,1643,1,0,0,0,1645,
        1644,1,0,0,0,1646,1647,1,0,0,0,1647,1648,5,118,0,0,1648,1649,3,154,
        77,0,1649,1651,1,0,0,0,1650,1642,1,0,0,0,1650,1645,1,0,0,0,1651,
        201,1,0,0,0,1652,1653,3,342,171,0,1653,1665,5,129,0,0,1654,1659,
        3,154,77,0,1655,1656,5,116,0,0,1656,1658,3,154,77,0,1657,1655,1,
        0,0,0,1658,1661,1,0,0,0,1659,1657,1,0,0,0,1659,1660,1,0,0,0,1660,
        1663,1,0,0,0,1661,1659,1,0,0,0,1662,1664,5,116,0,0,1663,1662,1,0,
        0,0,1663,1664,1,0,0,0,1664,1666,1,0,0,0,1665,1654,1,0,0,0,1665,1666,
        1,0,0,0,1666,1667,1,0,0,0,1667,1668,5,130,0,0,1668,203,1,0,0,0,1669,
        1670,3,342,171,0,1670,205,1,0,0,0,1671,1676,3,154,77,0,1672,1673,
        5,116,0,0,1673,1675,3,154,77,0,1674,1672,1,0,0,0,1675,1678,1,0,0,
        0,1676,1674,1,0,0,0,1676,1677,1,0,0,0,1677,1680,1,0,0,0,1678,1676,
        1,0,0,0,1679,1681,5,116,0,0,1680,1679,1,0,0,0,1680,1681,1,0,0,0,
        1681,207,1,0,0,0,1682,1684,5,19,0,0,1683,1682,1,0,0,0,1683,1684,
        1,0,0,0,1684,1691,1,0,0,0,1685,1692,5,92,0,0,1686,1688,5,90,0,0,
        1687,1689,3,210,105,0,1688,1687,1,0,0,0,1688,1689,1,0,0,0,1689,1690,
        1,0,0,0,1690,1692,5,90,0,0,1691,1685,1,0,0,0,1691,1686,1,0,0,0,1692,
        1698,1,0,0,0,1693,1699,3,154,77,0,1694,1695,5,120,0,0,1695,1696,
        3,288,144,0,1696,1697,3,166,83,0,1697,1699,1,0,0,0,1698,1693,1,0,
        0,0,1698,1694,1,0,0,0,1699,209,1,0,0,0,1700,1705,3,212,106,0,1701,
        1702,5,116,0,0,1702,1704,3,212,106,0,1703,1701,1,0,0,0,1704,1707,
        1,0,0,0,1705,1703,1,0,0,0,1705,1706,1,0,0,0,1706,1709,1,0,0,0,1707,
        1705,1,0,0,0,1708,1710,5,116,0,0,1709,1708,1,0,0,0,1709,1710,1,0,
        0,0,1710,211,1,0,0,0,1711,1713,3,142,71,0,1712,1711,1,0,0,0,1713,
        1716,1,0,0,0,1714,1712,1,0,0,0,1714,1715,1,0,0,0,1715,1717,1,0,0,
        0,1716,1714,1,0,0,0,1717,1720,3,240,120,0,1718,1719,5,118,0,0,1719,
        1721,3,286,143,0,1720,1718,1,0,0,0,1720,1721,1,0,0,0,1721,213,1,
        0,0,0,1722,1724,3,224,112,0,1723,1722,1,0,0,0,1723,1724,1,0,0,0,
        1724,1729,1,0,0,0,1725,1730,3,216,108,0,1726,1730,3,218,109,0,1727,
        1730,3,220,110,0,1728,1730,3,222,111,0,1729,1725,1,0,0,0,1729,1726,
        1,0,0,0,1729,1727,1,0,0,0,1729,1728,1,0,0,0,1730,215,1,0,0,0,1731,
        1732,5,16,0,0,1732,1733,3,166,83,0,1733,217,1,0,0,0,1734,1735,5,
        35,0,0,1735,1736,3,154,77,0,1736,1737,3,166,83,0,1737,219,1,0,0,
        0,1738,1739,5,35,0,0,1739,1740,5,15,0,0,1740,1741,3,240,120,0,1741,
        1742,5,103,0,0,1742,1743,3,154,77,0,1743,1744,3,166,83,0,1744,221,
        1,0,0,0,1745,1746,5,11,0,0,1746,1747,3,240,120,0,1747,1748,5,14,
        0,0,1748,1749,3,154,77,0,1749,1750,3,166,83,0,1750,223,1,0,0,0,1751,
        1752,5,81,0,0,1752,1753,5,118,0,0,1753,225,1,0,0,0,1754,1755,5,12,
        0,0,1755,1756,3,154,77,0,1756,1763,3,166,83,0,1757,1761,5,6,0,0,
        1758,1762,3,166,83,0,1759,1762,3,226,113,0,1760,1762,3,228,114,0,
        1761,1758,1,0,0,0,1761,1759,1,0,0,0,1761,1760,1,0,0,0,1762,1764,
        1,0,0,0,1763,1757,1,0,0,0,1763,1764,1,0,0,0,1764,227,1,0,0,0,1765,
        1766,5,12,0,0,1766,1767,5,15,0,0,1767,1768,3,240,120,0,1768,1769,
        5,103,0,0,1769,1770,3,154,77,0,1770,1777,3,166,83,0,1771,1775,5,
        6,0,0,1772,1776,3,166,83,0,1773,1776,3,226,113,0,1774,1776,3,228,
        114,0,1775,1772,1,0,0,0,1775,1773,1,0,0,0,1775,1774,1,0,0,0,1776,
        1778,1,0,0,0,1777,1771,1,0,0,0,1777,1778,1,0,0,0,1778,229,1,0,0,
        0,1779,1780,5,17,0,0,1780,1781,3,154,77,0,1781,1785,5,125,0,0,1782,
        1784,3,140,70,0,1783,1782,1,0,0,0,1784,1787,1,0,0,0,1785,1783,1,
        0,0,0,1785,1786,1,0,0,0,1786,1789,1,0,0,0,1787,1785,1,0,0,0,1788,
        1790,3,232,116,0,1789,1788,1,0,0,0,1789,1790,1,0,0,0,1790,1791,1,
        0,0,0,1791,1792,5,126,0,0,1792,231,1,0,0,0,1793,1794,3,236,118,0,
        1794,1795,5,121,0,0,1795,1796,3,234,117,0,1796,1798,1,0,0,0,1797,
        1793,1,0,0,0,1798,1801,1,0,0,0,1799,1797,1,0,0,0,1799,1800,1,0,0,
        0,1800,1802,1,0,0,0,1801,1799,1,0,0,0,1802,1803,3,236,118,0,1803,
        1804,5,121,0,0,1804,1806,3,154,77,0,1805,1807,5,116,0,0,1806,1805,
        1,0,0,0,1806,1807,1,0,0,0,1807,233,1,0,0,0,1808,1809,3,154,77,0,
        1809,1810,5,116,0,0,1810,1816,1,0,0,0,1811,1813,3,160,80,0,1812,
        1814,5,116,0,0,1813,1812,1,0,0,0,1813,1814,1,0,0,0,1814,1816,1,0,
        0,0,1815,1808,1,0,0,0,1815,1811,1,0,0,0,1816,235,1,0,0,0,1817,1819,
        3,142,71,0,1818,1817,1,0,0,0,1819,1822,1,0,0,0,1820,1818,1,0,0,0,
        1820,1821,1,0,0,0,1821,1823,1,0,0,0,1822,1820,1,0,0,0,1823,1825,
        3,240,120,0,1824,1826,3,238,119,0,1825,1824,1,0,0,0,1825,1826,1,
        0,0,0,1826,237,1,0,0,0,1827,1828,5,12,0,0,1828,1829,3,154,77,0,1829,
        239,1,0,0,0,1830,1832,5,90,0,0,1831,1830,1,0,0,0,1831,1832,1,0,0,
        0,1832,1833,1,0,0,0,1833,1838,3,242,121,0,1834,1835,5,90,0,0,1835,
        1837,3,242,121,0,1836,1834,1,0,0,0,1837,1840,1,0,0,0,1838,1836,1,
        0,0,0,1838,1839,1,0,0,0,1839,241,1,0,0,0,1840,1838,1,0,0,0,1841,
        1844,3,244,122,0,1842,1844,3,254,127,0,1843,1841,1,0,0,0,1843,1842,
        1,0,0,0,1844,243,1,0,0,0,1845,1858,3,246,123,0,1846,1858,3,248,124,
        0,1847,1858,3,250,125,0,1848,1858,3,252,126,0,1849,1858,3,258,129,
        0,1850,1858,3,260,130,0,1851,1858,3,270,135,0,1852,1858,3,274,137,
        0,1853,1858,3,278,139,0,1854,1858,3,280,140,0,1855,1858,3,284,142,
        0,1856,1858,3,2,1,0,1857,1845,1,0,0,0,1857,1846,1,0,0,0,1857,1847,
        1,0,0,0,1857,1848,1,0,0,0,1857,1849,1,0,0,0,1857,1850,1,0,0,0,1857,
        1851,1,0,0,0,1857,1852,1,0,0,0,1857,1853,1,0,0,0,1857,1854,1,0,0,
        0,1857,1855,1,0,0,0,1857,1856,1,0,0,0,1858,245,1,0,0,0,1859,1876,
        5,30,0,0,1860,1876,5,9,0,0,1861,1876,5,69,0,0,1862,1876,5,72,0,0,
        1863,1876,5,70,0,0,1864,1876,5,71,0,0,1865,1876,5,73,0,0,1866,1876,
        5,74,0,0,1867,1869,5,83,0,0,1868,1867,1,0,0,0,1868,1869,1,0,0,0,
        1869,1870,1,0,0,0,1870,1876,5,75,0,0,1871,1873,5,83,0,0,1872,1871,
        1,0,0,0,1872,1873,1,0,0,0,1873,1874,1,0,0,0,1874,1876,5,80,0,0,1875,
        1859,1,0,0,0,1875,1860,1,0,0,0,1875,1861,1,0,0,0,1875,1862,1,0,0,
        0,1875,1863,1,0,0,0,1875,1864,1,0,0,0,1875,1865,1,0,0,0,1875,1866,
        1,0,0,0,1875,1868,1,0,0,0,1875,1872,1,0,0,0,1876,247,1,0,0,0,1877,
        1879,5,22,0,0,1878,1877,1,0,0,0,1878,1879,1,0,0,0,1879,1881,1,0,
        0,0,1880,1882,5,20,0,0,1881,1880,1,0,0,0,1881,1882,1,0,0,0,1882,
        1883,1,0,0,0,1883,1886,3,378,189,0,1884,1885,5,110,0,0,1885,1887,
        3,240,120,0,1886,1884,1,0,0,0,1886,1887,1,0,0,0,1887,249,1,0,0,0,
        1888,1889,5,111,0,0,1889,251,1,0,0,0,1890,1891,5,113,0,0,1891,253,
        1,0,0,0,1892,1893,3,256,128,0,1893,1894,5,115,0,0,1894,1895,3,256,
        128,0,1895,1904,1,0,0,0,1896,1897,3,256,128,0,1897,1898,5,113,0,
        0,1898,1904,1,0,0,0,1899,1900,3,256,128,0,1900,1901,5,114,0,0,1901,
        1902,3,256,128,0,1902,1904,1,0,0,0,1903,1892,1,0,0,0,1903,1896,1,
        0,0,0,1903,1899,1,0,0,0,1904,255,1,0,0,0,1905,1917,5,69,0,0,1906,
        1917,5,72,0,0,1907,1909,5,83,0,0,1908,1907,1,0,0,0,1908,1909,1,0,
        0,0,1909,1910,1,0,0,0,1910,1917,5,75,0,0,1911,1913,5,83,0,0,1912,
        1911,1,0,0,0,1912,1913,1,0,0,0,1913,1914,1,0,0,0,1914,1917,5,80,
        0,0,1915,1917,3,284,142,0,1916,1905,1,0,0,0,1916,1906,1,0,0,0,1916,
        1908,1,0,0,0,1916,1912,1,0,0,0,1916,1915,1,0,0,0,1917,257,1,0,0,
        0,1918,1920,7,2,0,0,1919,1921,5,20,0,0,1920,1919,1,0,0,0,1920,1921,
        1,0,0,0,1921,1922,1,0,0,0,1922,1923,3,244,122,0,1923,259,1,0,0,0,
        1924,1925,3,342,171,0,1925,1927,5,125,0,0,1926,1928,3,262,131,0,
        1927,1926,1,0,0,0,1927,1928,1,0,0,0,1928,1929,1,0,0,0,1929,1930,
        5,126,0,0,1930,261,1,0,0,0,1931,1936,3,264,132,0,1932,1934,5,116,
        0,0,1933,1935,3,268,134,0,1934,1933,1,0,0,0,1934,1935,1,0,0,0,1935,
        1937,1,0,0,0,1936,1932,1,0,0,0,1936,1937,1,0,0,0,1937,1940,1,0,0,
        0,1938,1940,3,268,134,0,1939,1931,1,0,0,0,1939,1938,1,0,0,0,1940,
        263,1,0,0,0,1941,1946,3,266,133,0,1942,1943,5,116,0,0,1943,1945,
        3,266,133,0,1944,1942,1,0,0,0,1945,1948,1,0,0,0,1946,1944,1,0,0,
        0,1946,1947,1,0,0,0,1947,265,1,0,0,0,1948,1946,1,0,0,0,1949,1951,
        3,142,71,0,1950,1949,1,0,0,0,1951,1954,1,0,0,0,1952,1950,1,0,0,0,
        1952,1953,1,0,0,0,1953,1970,1,0,0,0,1954,1952,1,0,0,0,1955,1956,
        3,178,89,0,1956,1957,5,118,0,0,1957,1958,3,240,120,0,1958,1971,1,
        0,0,0,1959,1960,3,378,189,0,1960,1961,5,118,0,0,1961,1962,3,240,
        120,0,1962,1971,1,0,0,0,1963,1965,5,22,0,0,1964,1963,1,0,0,0,1964,
        1965,1,0,0,0,1965,1967,1,0,0,0,1966,1968,5,20,0,0,1967,1966,1,0,
        0,0,1967,1968,1,0,0,0,1968,1969,1,0,0,0,1969,1971,3,378,189,0,1970,
        1955,1,0,0,0,1970,1959,1,0,0,0,1970,1964,1,0,0,0,1971,267,1,0,0,
        0,1972,1974,3,142,71,0,1973,1972,1,0,0,0,1974,1977,1,0,0,0,1975,
        1973,1,0,0,0,1975,1976,1,0,0,0,1976,1978,1,0,0,0,1977,1975,1,0,0,
        0,1978,1979,5,113,0,0,1979,269,1,0,0,0,1980,1981,3,342,171,0,1981,
        1983,5,129,0,0,1982,1984,3,272,136,0,1983,1982,1,0,0,0,1983,1984,
        1,0,0,0,1984,1985,1,0,0,0,1985,1986,5,130,0,0,1986,271,1,0,0,0,1987,
        1992,3,240,120,0,1988,1989,5,116,0,0,1989,1991,3,240,120,0,1990,
        1988,1,0,0,0,1991,1994,1,0,0,0,1992,1990,1,0,0,0,1992,1993,1,0,0,
        0,1993,1996,1,0,0,0,1994,1992,1,0,0,0,1995,1997,5,116,0,0,1996,1995,
        1,0,0,0,1996,1997,1,0,0,0,1997,273,1,0,0,0,1998,2000,5,129,0,0,1999,
        2001,3,276,138,0,2000,1999,1,0,0,0,2000,2001,1,0,0,0,2001,2002,1,
        0,0,0,2002,2003,5,130,0,0,2003,275,1,0,0,0,2004,2005,3,240,120,0,
        2005,2006,5,116,0,0,2006,2019,1,0,0,0,2007,2019,3,252,126,0,2008,
        2011,3,240,120,0,2009,2010,5,116,0,0,2010,2012,3,240,120,0,2011,
        2009,1,0,0,0,2012,2013,1,0,0,0,2013,2011,1,0,0,0,2013,2014,1,0,0,
        0,2014,2016,1,0,0,0,2015,2017,5,116,0,0,2016,2015,1,0,0,0,2016,2017,
        1,0,0,0,2017,2019,1,0,0,0,2018,2004,1,0,0,0,2018,2007,1,0,0,0,2018,
        2008,1,0,0,0,2019,277,1,0,0,0,2020,2021,5,129,0,0,2021,2022,3,240,
        120,0,2022,2023,5,130,0,0,2023,279,1,0,0,0,2024,2026,5,127,0,0,2025,
        2027,3,282,141,0,2026,2025,1,0,0,0,2026,2027,1,0,0,0,2027,2028,1,
        0,0,0,2028,2029,5,128,0,0,2029,281,1,0,0,0,2030,2035,3,240,120,0,
        2031,2032,5,116,0,0,2032,2034,3,240,120,0,2033,2031,1,0,0,0,2034,
        2037,1,0,0,0,2035,2033,1,0,0,0,2035,2036,1,0,0,0,2036,2039,1,0,0,
        0,2037,2035,1,0,0,0,2038,2040,5,116,0,0,2039,2038,1,0,0,0,2039,2040,
        1,0,0,0,2040,283,1,0,0,0,2041,2044,3,342,171,0,2042,2044,3,362,181,
        0,2043,2041,1,0,0,0,2043,2042,1,0,0,0,2044,285,1,0,0,0,2045,2049,
        3,288,144,0,2046,2049,3,322,161,0,2047,2049,3,318,159,0,2048,2045,
        1,0,0,0,2048,2046,1,0,0,0,2048,2047,1,0,0,0,2049,287,1,0,0,0,2050,
        2065,3,290,145,0,2051,2065,3,324,162,0,2052,2065,3,320,160,0,2053,
        2065,3,368,184,0,2054,2065,3,294,147,0,2055,2065,3,292,146,0,2056,
        2065,3,302,151,0,2057,2065,3,300,150,0,2058,2065,3,296,148,0,2059,
        2065,3,298,149,0,2060,2065,3,326,163,0,2061,2065,3,366,183,0,2062,
        2065,3,304,152,0,2063,2065,3,2,1,0,2064,2050,1,0,0,0,2064,2051,1,
        0,0,0,2064,2052,1,0,0,0,2064,2053,1,0,0,0,2064,2054,1,0,0,0,2064,
        2055,1,0,0,0,2064,2056,1,0,0,0,2064,2057,1,0,0,0,2064,2058,1,0,0,
        0,2064,2059,1,0,0,0,2064,2060,1,0,0,0,2064,2061,1,0,0,0,2064,2062,
        1,0,0,0,2064,2063,1,0,0,0,2065,289,1,0,0,0,2066,2067,5,129,0,0,2067,
        2068,3,286,143,0,2068,2069,5,130,0,0,2069,291,1,0,0,0,2070,2071,
        5,88,0,0,2071,293,1,0,0,0,2072,2083,5,129,0,0,2073,2074,3,286,143,
        0,2074,2075,5,116,0,0,2075,2077,1,0,0,0,2076,2073,1,0,0,0,2077,2078,
        1,0,0,0,2078,2076,1,0,0,0,2078,2079,1,0,0,0,2079,2081,1,0,0,0,2080,
        2082,3,286,143,0,2081,2080,1,0,0,0,2081,2082,1,0,0,0,2082,2084,1,
        0,0,0,2083,2076,1,0,0,0,2083,2084,1,0,0,0,2084,2085,1,0,0,0,2085,
        2086,5,130,0,0,2086,295,1,0,0,0,2087,2088,5,127,0,0,2088,2089,3,
        286,143,0,2089,2090,5,117,0,0,2090,2091,3,154,77,0,2091,2092,5,128,
        0,0,2092,297,1,0,0,0,2093,2094,5,127,0,0,2094,2095,3,286,143,0,2095,
        2096,5,128,0,0,2096,299,1,0,0,0,2097,2099,5,89,0,0,2098,2100,3,336,
        168,0,2099,2098,1,0,0,0,2099,2100,1,0,0,0,2100,2102,1,0,0,0,2101,
        2103,5,20,0,0,2102,2101,1,0,0,0,2102,2103,1,0,0,0,2103,2104,1,0,
        0,0,2104,2105,3,288,144,0,2105,301,1,0,0,0,2106,2107,5,84,0,0,2107,
        2108,7,9,0,0,2108,2109,3,288,144,0,2109,303,1,0,0,0,2110,2112,3,
        136,68,0,2111,2110,1,0,0,0,2111,2112,1,0,0,0,2112,2113,1,0,0,0,2113,
        2114,3,306,153,0,2114,2115,5,10,0,0,2115,2117,5,129,0,0,2116,2118,
        3,310,155,0,2117,2116,1,0,0,0,2117,2118,1,0,0,0,2118,2119,1,0,0,
        0,2119,2121,5,130,0,0,2120,2122,3,308,154,0,2121,2120,1,0,0,0,2121,
        2122,1,0,0,0,2122,305,1,0,0,0,2123,2125,5,32,0,0,2124,2123,1,0,0,
        0,2124,2125,1,0,0,0,2125,2130,1,0,0,0,2126,2128,5,8,0,0,2127,2129,
        3,56,28,0,2128,2127,1,0,0,0,2128,2129,1,0,0,0,2129,2131,1,0,0,0,
        2130,2126,1,0,0,0,2130,2131,1,0,0,0,2131,307,1,0,0,0,2132,2133,5,
        120,0,0,2133,2134,3,288,144,0,2134,309,1,0,0,0,2135,2138,3,312,156,
        0,2136,2138,3,316,158,0,2137,2135,1,0,0,0,2137,2136,1,0,0,0,2138,
        311,1,0,0,0,2139,2144,3,314,157,0,2140,2141,5,116,0,0,2141,2143,
        3,314,157,0,2142,2140,1,0,0,0,2143,2146,1,0,0,0,2144,2142,1,0,0,
        0,2144,2145,1,0,0,0,2145,2148,1,0,0,0,2146,2144,1,0,0,0,2147,2149,
        5,116,0,0,2148,2147,1,0,0,0,2148,2149,1,0,0,0,2149,313,1,0,0,0,2150,
        2152,3,142,71,0,2151,2150,1,0,0,0,2152,2155,1,0,0,0,2153,2151,1,
        0,0,0,2153,2154,1,0,0,0,2154,2161,1,0,0,0,2155,2153,1,0,0,0,2156,
        2159,3,378,189,0,2157,2159,5,111,0,0,2158,2156,1,0,0,0,2158,2157,
        1,0,0,0,2159,2160,1,0,0,0,2160,2162,5,118,0,0,2161,2158,1,0,0,0,
        2161,2162,1,0,0,0,2162,2163,1,0,0,0,2163,2164,3,286,143,0,2164,315,
        1,0,0,0,2165,2166,3,314,157,0,2166,2167,5,116,0,0,2167,2169,1,0,
        0,0,2168,2165,1,0,0,0,2169,2172,1,0,0,0,2170,2168,1,0,0,0,2170,2171,
        1,0,0,0,2171,2173,1,0,0,0,2172,2170,1,0,0,0,2173,2174,3,314,157,
        0,2174,2178,5,116,0,0,2175,2177,3,142,71,0,2176,2175,1,0,0,0,2177,
        2180,1,0,0,0,2178,2176,1,0,0,0,2178,2179,1,0,0,0,2179,2181,1,0,0,
        0,2180,2178,1,0,0,0,2181,2182,5,114,0,0,2182,317,1,0,0,0,2183,2185,
        5,38,0,0,2184,2183,1,0,0,0,2184,2185,1,0,0,0,2185,2186,1,0,0,0,2186,
        2187,3,328,164,0,2187,319,1,0,0,0,2188,2190,5,38,0,0,2189,2188,1,
        0,0,0,2189,2190,1,0,0,0,2190,2191,1,0,0,0,2191,2192,3,332,166,0,
        2192,321,1,0,0,0,2193,2194,5,13,0,0,2194,2195,3,328,164,0,2195,323,
        1,0,0,0,2196,2197,5,13,0,0,2197,2198,3,332,166,0,2198,325,1,0,0,
        0,2199,2200,5,111,0,0,2200,327,1,0,0,0,2201,2206,3,330,165,0,2202,
        2203,5,82,0,0,2203,2205,3,330,165,0,2204,2202,1,0,0,0,2205,2208,
        1,0,0,0,2206,2204,1,0,0,0,2206,2207,1,0,0,0,2207,2210,1,0,0,0,2208,
        2206,1,0,0,0,2209,2211,5,82,0,0,2210,2209,1,0,0,0,2210,2211,1,0,
        0,0,2211,329,1,0,0,0,2212,2215,3,336,168,0,2213,2215,3,332,166,0,
        2214,2212,1,0,0,0,2214,2213,1,0,0,0,2215,331,1,0,0,0,2216,2218,5,
        124,0,0,2217,2216,1,0,0,0,2217,2218,1,0,0,0,2218,2220,1,0,0,0,2219,
        2221,3,136,68,0,2220,2219,1,0,0,0,2220,2221,1,0,0,0,2221,2222,1,
        0,0,0,2222,2234,3,368,184,0,2223,2225,5,129,0,0,2224,2226,5,124,
        0,0,2225,2224,1,0,0,0,2225,2226,1,0,0,0,2226,2228,1,0,0,0,2227,2229,
        3,136,68,0,2228,2227,1,0,0,0,2228,2229,1,0,0,0,2229,2230,1,0,0,0,
        2230,2231,3,368,184,0,2231,2232,5,130,0,0,2232,2234,1,0,0,0,2233,
        2217,1,0,0,0,2233,2223,1,0,0,0,2234,333,1,0,0,0,2235,2236,3,336,
        168,0,2236,2237,5,82,0,0,2237,2239,1,0,0,0,2238,2235,1,0,0,0,2239,
        2242,1,0,0,0,2240,2238,1,0,0,0,2240,2241,1,0,0,0,2241,2244,1,0,0,
        0,2242,2240,1,0,0,0,2243,2245,3,336,168,0,2244,2243,1,0,0,0,2244,
        2245,1,0,0,0,2245,335,1,0,0,0,2246,2247,7,10,0,0,2247,337,1,0,0,
        0,2248,2250,5,119,0,0,2249,2248,1,0,0,0,2249,2250,1,0,0,0,2250,2251,
        1,0,0,0,2251,2256,3,340,170,0,2252,2253,5,119,0,0,2253,2255,3,340,
        170,0,2254,2252,1,0,0,0,2255,2258,1,0,0,0,2256,2254,1,0,0,0,2256,
        2257,1,0,0,0,2257,339,1,0,0,0,2258,2256,1,0,0,0,2259,2265,3,378,
        189,0,2260,2265,5,28,0,0,2261,2265,5,24,0,0,2262,2265,5,5,0,0,2263,
        2265,5,56,0,0,2264,2259,1,0,0,0,2264,2260,1,0,0,0,2264,2261,1,0,
        0,0,2264,2262,1,0,0,0,2264,2263,1,0,0,0,2265,341,1,0,0,0,2266,2268,
        5,119,0,0,2267,2266,1,0,0,0,2267,2268,1,0,0,0,2268,2269,1,0,0,0,
        2269,2274,3,344,172,0,2270,2271,5,119,0,0,2271,2273,3,344,172,0,
        2272,2270,1,0,0,0,2273,2276,1,0,0,0,2274,2272,1,0,0,0,2274,2275,
        1,0,0,0,2275,343,1,0,0,0,2276,2274,1,0,0,0,2277,2280,3,346,173,0,
        2278,2279,5,119,0,0,2279,2281,3,348,174,0,2280,2278,1,0,0,0,2280,
        2281,1,0,0,0,2281,345,1,0,0,0,2282,2289,3,378,189,0,2283,2289,5,
        28,0,0,2284,2289,5,24,0,0,2285,2289,5,25,0,0,2286,2289,5,5,0,0,2287,
        2289,5,56,0,0,2288,2282,1,0,0,0,2288,2283,1,0,0,0,2288,2284,1,0,
        0,0,2288,2285,1,0,0,0,2288,2286,1,0,0,0,2288,2287,1,0,0,0,2289,347,
        1,0,0,0,2290,2291,5,107,0,0,2291,2334,5,106,0,0,2292,2293,5,107,
        0,0,2293,2296,3,354,177,0,2294,2295,5,116,0,0,2295,2297,3,356,178,
        0,2296,2294,1,0,0,0,2296,2297,1,0,0,0,2297,2300,1,0,0,0,2298,2299,
        5,116,0,0,2299,2301,3,358,179,0,2300,2298,1,0,0,0,2300,2301,1,0,
        0,0,2301,2303,1,0,0,0,2302,2304,5,116,0,0,2303,2302,1,0,0,0,2303,
        2304,1,0,0,0,2304,2305,1,0,0,0,2305,2306,5,106,0,0,2306,2334,1,0,
        0,0,2307,2308,5,107,0,0,2308,2311,3,356,178,0,2309,2310,5,116,0,
        0,2310,2312,3,358,179,0,2311,2309,1,0,0,0,2311,2312,1,0,0,0,2312,
        2314,1,0,0,0,2313,2315,5,116,0,0,2314,2313,1,0,0,0,2314,2315,1,0,
        0,0,2315,2316,1,0,0,0,2316,2317,5,106,0,0,2317,2334,1,0,0,0,2318,
        2324,5,107,0,0,2319,2320,3,350,175,0,2320,2321,5,116,0,0,2321,2323,
        1,0,0,0,2322,2319,1,0,0,0,2323,2326,1,0,0,0,2324,2322,1,0,0,0,2324,
        2325,1,0,0,0,2325,2327,1,0,0,0,2326,2324,1,0,0,0,2327,2329,3,350,
        175,0,2328,2330,5,116,0,0,2329,2328,1,0,0,0,2329,2330,1,0,0,0,2330,
        2331,1,0,0,0,2331,2332,5,106,0,0,2332,2334,1,0,0,0,2333,2290,1,0,
        0,0,2333,2292,1,0,0,0,2333,2307,1,0,0,0,2333,2318,1,0,0,0,2334,349,
        1,0,0,0,2335,2340,3,336,168,0,2336,2340,3,286,143,0,2337,2340,3,
        352,176,0,2338,2340,3,360,180,0,2339,2335,1,0,0,0,2339,2336,1,0,
        0,0,2339,2337,1,0,0,0,2339,2338,1,0,0,0,2340,351,1,0,0,0,2341,2348,
        3,166,83,0,2342,2344,5,83,0,0,2343,2342,1,0,0,0,2343,2344,1,0,0,
        0,2344,2345,1,0,0,0,2345,2348,3,162,81,0,2346,2348,3,340,170,0,2347,
        2341,1,0,0,0,2347,2343,1,0,0,0,2347,2346,1,0,0,0,2348,353,1,0,0,
        0,2349,2354,3,336,168,0,2350,2351,5,116,0,0,2351,2353,3,336,168,
        0,2352,2350,1,0,0,0,2353,2356,1,0,0,0,2354,2352,1,0,0,0,2354,2355,
        1,0,0,0,2355,355,1,0,0,0,2356,2354,1,0,0,0,2357,2362,3,286,143,0,
        2358,2359,5,116,0,0,2359,2361,3,286,143,0,2360,2358,1,0,0,0,2361,
        2364,1,0,0,0,2362,2360,1,0,0,0,2362,2363,1,0,0,0,2363,357,1,0,0,
        0,2364,2362,1,0,0,0,2365,2370,3,360,180,0,2366,2367,5,116,0,0,2367,
        2369,3,360,180,0,2368,2366,1,0,0,0,2369,2372,1,0,0,0,2370,2368,1,
        0,0,0,2370,2371,1,0,0,0,2371,359,1,0,0,0,2372,2370,1,0,0,0,2373,
        2374,3,378,189,0,2374,2375,5,103,0,0,2375,2376,3,286,143,0,2376,
        361,1,0,0,0,2377,2380,3,364,182,0,2378,2379,5,119,0,0,2379,2381,
        3,344,172,0,2380,2378,1,0,0,0,2381,2382,1,0,0,0,2382,2380,1,0,0,
        0,2382,2383,1,0,0,0,2383,363,1,0,0,0,2384,2385,5,107,0,0,2385,2388,
        3,286,143,0,2386,2387,5,1,0,0,2387,2389,3,368,184,0,2388,2386,1,
        0,0,0,2388,2389,1,0,0,0,2389,2390,1,0,0,0,2390,2391,5,106,0,0,2391,
        365,1,0,0,0,2392,2395,3,364,182,0,2393,2394,5,119,0,0,2394,2396,
        3,370,185,0,2395,2393,1,0,0,0,2396,2397,1,0,0,0,2397,2395,1,0,0,
        0,2397,2398,1,0,0,0,2398,367,1,0,0,0,2399,2401,5,119,0,0,2400,2399,
        1,0,0,0,2400,2401,1,0,0,0,2401,2402,1,0,0,0,2402,2407,3,370,185,
        0,2403,2404,5,119,0,0,2404,2406,3,370,185,0,2405,2403,1,0,0,0,2406,
        2409,1,0,0,0,2407,2405,1,0,0,0,2407,2408,1,0,0,0,2408,369,1,0,0,
        0,2409,2407,1,0,0,0,2410,2412,3,346,173,0,2411,2413,5,119,0,0,2412,
        2411,1,0,0,0,2412,2413,1,0,0,0,2413,2416,1,0,0,0,2414,2417,3,348,
        174,0,2415,2417,3,372,186,0,2416,2414,1,0,0,0,2416,2415,1,0,0,0,
        2416,2417,1,0,0,0,2417,371,1,0,0,0,2418,2420,5,129,0,0,2419,2421,
        3,374,187,0,2420,2419,1,0,0,0,2420,2421,1,0,0,0,2421,2422,1,0,0,
        0,2422,2425,5,130,0,0,2423,2424,5,120,0,0,2424,2426,3,286,143,0,
        2425,2423,1,0,0,0,2425,2426,1,0,0,0,2426,373,1,0,0,0,2427,2432,3,
        286,143,0,2428,2429,5,116,0,0,2429,2431,3,286,143,0,2430,2428,1,
        0,0,0,2431,2434,1,0,0,0,2432,2430,1,0,0,0,2432,2433,1,0,0,0,2433,
        2436,1,0,0,0,2434,2432,1,0,0,0,2435,2437,5,116,0,0,2436,2435,1,0,
        0,0,2436,2437,1,0,0,0,2437,375,1,0,0,0,2438,2448,5,21,0,0,2439,2445,
        5,129,0,0,2440,2446,5,5,0,0,2441,2446,5,24,0,0,2442,2446,5,28,0,
        0,2443,2444,5,14,0,0,2444,2446,3,338,169,0,2445,2440,1,0,0,0,2445,
        2441,1,0,0,0,2445,2442,1,0,0,0,2445,2443,1,0,0,0,2446,2447,1,0,0,
        0,2447,2449,5,130,0,0,2448,2439,1,0,0,0,2448,2449,1,0,0,0,2449,377,
        1,0,0,0,2450,2451,7,11,0,0,2451,379,1,0,0,0,2452,2453,7,12,0,0,2453,
        381,1,0,0,0,2454,2461,3,380,190,0,2455,2461,3,378,189,0,2456,2461,
        5,54,0,0,2457,2461,5,55,0,0,2458,2461,5,56,0,0,2459,2461,5,81,0,
        0,2460,2454,1,0,0,0,2460,2455,1,0,0,0,2460,2456,1,0,0,0,2460,2457,
        1,0,0,0,2460,2458,1,0,0,0,2460,2459,1,0,0,0,2461,383,1,0,0,0,2462,
        2463,3,162,81,0,2463,385,1,0,0,0,2464,2465,7,13,0,0,2465,387,1,0,
        0,0,2466,2467,5,107,0,0,2467,2468,4,194,21,0,2468,2469,5,107,0,0,
        2469,389,1,0,0,0,2470,2471,5,106,0,0,2471,2472,4,195,22,0,2472,2473,
        5,106,0,0,2473,391,1,0,0,0,345,395,401,414,422,430,434,439,442,449,
        457,469,481,486,507,514,518,528,536,544,548,553,559,568,572,576,
        582,590,599,604,607,622,626,629,638,644,648,654,660,665,672,675,
        684,688,690,693,699,701,703,709,713,717,720,724,727,730,733,737,
        739,745,750,757,761,763,768,773,777,779,782,787,796,802,808,816,
        819,823,829,834,837,841,845,850,854,858,867,871,876,880,891,895,
        900,904,911,914,918,927,931,936,940,946,950,956,966,969,978,984,
        990,997,1002,1007,1011,1013,1016,1022,1028,1035,1039,1043,1049,1055,
        1061,1065,1068,1074,1080,1086,1092,1096,1102,1108,1116,1121,1125,
        1127,1135,1140,1142,1149,1155,1158,1163,1166,1171,1173,1177,1190,
        1194,1198,1205,1210,1218,1223,1228,1230,1245,1250,1257,1262,1269,
        1273,1282,1284,1290,1298,1307,1313,1316,1320,1323,1327,1333,1343,
        1347,1354,1358,1366,1377,1415,1431,1447,1449,1451,1461,1472,1478,
        1484,1488,1495,1498,1501,1505,1517,1521,1527,1534,1537,1544,1551,
        1556,1565,1571,1573,1578,1584,1589,1599,1607,1611,1613,1622,1627,
        1636,1640,1645,1650,1659,1663,1665,1676,1680,1683,1688,1691,1698,
        1705,1709,1714,1720,1723,1729,1761,1763,1775,1777,1785,1789,1799,
        1806,1813,1815,1820,1825,1831,1838,1843,1857,1868,1872,1875,1878,
        1881,1886,1903,1908,1912,1916,1920,1927,1934,1936,1939,1946,1952,
        1964,1967,1970,1975,1983,1992,1996,2000,2013,2016,2018,2026,2035,
        2039,2043,2048,2064,2078,2081,2083,2099,2102,2111,2117,2121,2124,
        2128,2130,2137,2144,2148,2153,2158,2161,2170,2178,2184,2189,2206,
        2210,2214,2217,2220,2225,2228,2233,2240,2244,2249,2256,2264,2267,
        2274,2280,2288,2296,2300,2303,2311,2314,2324,2329,2333,2339,2343,
        2347,2354,2362,2370,2382,2388,2397,2400,2407,2412,2416,2420,2425,
        2432,2436,2445,2448,2460
    ]

class RustParser ( RustParserBase ):

    grammarFileName = "RustParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'as'", "'break'", "'const'", "'continue'", 
                     "'crate'", "'else'", "'enum'", "'extern'", "'false'", 
                     "'fn'", "'for'", "'if'", "'impl'", "'in'", "'let'", 
                     "'loop'", "'match'", "'mod'", "'move'", "'mut'", "'pub'", 
                     "'ref'", "'return'", "'self'", "'Self'", "'static'", 
                     "'struct'", "'super'", "'trait'", "'true'", "'type'", 
                     "'unsafe'", "'use'", "'where'", "'while'", "'async'", 
                     "'await'", "'dyn'", "'abstract'", "'become'", "'box'", 
                     "'do'", "'final'", "'macro'", "'override'", "'priv'", 
                     "'typeof'", "'unsized'", "'virtual'", "'yield'", "'try'", 
                     "'union'", "''static'", "'macro_rules'", "''_'", "'$crate'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", 
                     "'!'", "'&'", "'|'", "'&&'", "'||'", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'^='", "'&='", "'|='", "'<<='", 
                     "'>>='", "'='", "'=='", "'!='", "'>'", "'<'", "'>='", 
                     "'<='", "'@'", "'_'", "'.'", "'..'", "'...'", "'..='", 
                     "','", "';'", "':'", "'::'", "'->'", "'=>'", "'#'", 
                     "'$'", "'?'", "'{'", "'}'", "'['", "']'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>", "KW_AS", "KW_BREAK", "KW_CONST", "KW_CONTINUE", 
                      "KW_CRATE", "KW_ELSE", "KW_ENUM", "KW_EXTERN", "KW_FALSE", 
                      "KW_FN", "KW_FOR", "KW_IF", "KW_IMPL", "KW_IN", "KW_LET", 
                      "KW_LOOP", "KW_MATCH", "KW_MOD", "KW_MOVE", "KW_MUT", 
                      "KW_PUB", "KW_REF", "KW_RETURN", "KW_SELFVALUE", "KW_SELFTYPE", 
                      "KW_STATIC", "KW_STRUCT", "KW_SUPER", "KW_TRAIT", 
                      "KW_TRUE", "KW_TYPE", "KW_UNSAFE", "KW_USE", "KW_WHERE", 
                      "KW_WHILE", "KW_ASYNC", "KW_AWAIT", "KW_DYN", "KW_ABSTRACT", 
                      "KW_BECOME", "KW_BOX", "KW_DO", "KW_FINAL", "KW_MACRO", 
                      "KW_OVERRIDE", "KW_PRIV", "KW_TYPEOF", "KW_UNSIZED", 
                      "KW_VIRTUAL", "KW_YIELD", "KW_TRY", "KW_UNION", "KW_STATICLIFETIME", 
                      "KW_MACRORULES", "KW_UNDERLINELIFETIME", "KW_DOLLARCRATE", 
                      "NON_KEYWORD_IDENTIFIER", "RAW_IDENTIFIER", "LINE_COMMENT", 
                      "BLOCK_COMMENT", "INNER_LINE_DOC", "INNER_BLOCK_DOC", 
                      "OUTER_LINE_DOC", "OUTER_BLOCK_DOC", "BLOCK_COMMENT_OR_DOC", 
                      "SHEBANG", "WHITESPACE", "NEWLINE", "CHAR_LITERAL", 
                      "STRING_LITERAL", "RAW_STRING_LITERAL", "BYTE_LITERAL", 
                      "BYTE_STRING_LITERAL", "RAW_BYTE_STRING_LITERAL", 
                      "INTEGER_LITERAL", "DEC_LITERAL", "HEX_LITERAL", "OCT_LITERAL", 
                      "BIN_LITERAL", "FLOAT_LITERAL", "LIFETIME_OR_LABEL", 
                      "PLUS", "MINUS", "STAR", "SLASH", "PERCENT", "CARET", 
                      "NOT", "AND", "OR", "ANDAND", "OROR", "PLUSEQ", "MINUSEQ", 
                      "STAREQ", "SLASHEQ", "PERCENTEQ", "CARETEQ", "ANDEQ", 
                      "OREQ", "SHLEQ", "SHREQ", "EQ", "EQEQ", "NE", "GT", 
                      "LT", "GE", "LE", "AT", "UNDERSCORE", "DOT", "DOTDOT", 
                      "DOTDOTDOT", "DOTDOTEQ", "COMMA", "SEMI", "COLON", 
                      "PATHSEP", "RARROW", "FATARROW", "POUND", "DOLLAR", 
                      "QUESTION", "LCURLYBRACE", "RCURLYBRACE", "LSQUAREBRACKET", 
                      "RSQUAREBRACKET", "LPAREN", "RPAREN" ]

    RULE_crate = 0
    RULE_macroInvocation = 1
    RULE_delimTokenTree = 2
    RULE_tokenTree = 3
    RULE_tokenTreeToken = 4
    RULE_macroInvocationSemi = 5
    RULE_macroRulesDefinition = 6
    RULE_macroRulesDef = 7
    RULE_macroRules = 8
    RULE_macroRule = 9
    RULE_macroMatcher = 10
    RULE_macroMatch = 11
    RULE_macroMatchToken = 12
    RULE_macroFragSpec = 13
    RULE_macroRepSep = 14
    RULE_macroRepOp = 15
    RULE_macroTranscriber = 16
    RULE_item = 17
    RULE_visItem = 18
    RULE_macroItem = 19
    RULE_module = 20
    RULE_externCrate = 21
    RULE_crateRef = 22
    RULE_asClause = 23
    RULE_useDeclaration = 24
    RULE_useTree = 25
    RULE_function_ = 26
    RULE_functionQualifiers = 27
    RULE_abi = 28
    RULE_functionParameters = 29
    RULE_selfParam = 30
    RULE_shorthandSelf = 31
    RULE_typedSelf = 32
    RULE_functionParam = 33
    RULE_functionParamPattern = 34
    RULE_functionReturnType = 35
    RULE_typeAlias = 36
    RULE_struct_ = 37
    RULE_structStruct = 38
    RULE_tupleStruct = 39
    RULE_structFields = 40
    RULE_structField = 41
    RULE_tupleFields = 42
    RULE_tupleField = 43
    RULE_enumeration = 44
    RULE_enumItems = 45
    RULE_enumItem = 46
    RULE_enumItemTuple = 47
    RULE_enumItemStruct = 48
    RULE_enumItemDiscriminant = 49
    RULE_union_ = 50
    RULE_constantItem = 51
    RULE_staticItem = 52
    RULE_trait_ = 53
    RULE_implementation = 54
    RULE_inherentImpl = 55
    RULE_traitImpl = 56
    RULE_externBlock = 57
    RULE_externalItem = 58
    RULE_genericParams = 59
    RULE_genericParam = 60
    RULE_lifetimeParam = 61
    RULE_typeParam = 62
    RULE_constParam = 63
    RULE_whereClause = 64
    RULE_whereClauseItem = 65
    RULE_lifetimeWhereClauseItem = 66
    RULE_typeBoundWhereClauseItem = 67
    RULE_forLifetimes = 68
    RULE_associatedItem = 69
    RULE_innerAttribute = 70
    RULE_outerAttribute = 71
    RULE_attr = 72
    RULE_attrInput = 73
    RULE_statement = 74
    RULE_letStatement = 75
    RULE_expressionStatement = 76
    RULE_expression = 77
    RULE_comparisonOperator = 78
    RULE_compoundAssignOperator = 79
    RULE_expressionWithBlock = 80
    RULE_literalExpression = 81
    RULE_pathExpression = 82
    RULE_blockExpression = 83
    RULE_statements = 84
    RULE_asyncBlockExpression = 85
    RULE_unsafeBlockExpression = 86
    RULE_arrayElements = 87
    RULE_tupleElements = 88
    RULE_tupleIndex = 89
    RULE_structExpression = 90
    RULE_structExprStruct = 91
    RULE_structExprFields = 92
    RULE_structExprField = 93
    RULE_structBase = 94
    RULE_structExprTuple = 95
    RULE_structExprUnit = 96
    RULE_enumerationVariantExpression = 97
    RULE_enumExprStruct = 98
    RULE_enumExprFields = 99
    RULE_enumExprField = 100
    RULE_enumExprTuple = 101
    RULE_enumExprFieldless = 102
    RULE_callParams = 103
    RULE_closureExpression = 104
    RULE_closureParameters = 105
    RULE_closureParam = 106
    RULE_loopExpression = 107
    RULE_infiniteLoopExpression = 108
    RULE_predicateLoopExpression = 109
    RULE_predicatePatternLoopExpression = 110
    RULE_iteratorLoopExpression = 111
    RULE_loopLabel = 112
    RULE_ifExpression = 113
    RULE_ifLetExpression = 114
    RULE_matchExpression = 115
    RULE_matchArms = 116
    RULE_matchArmExpression = 117
    RULE_matchArm = 118
    RULE_matchArmGuard = 119
    RULE_pattern = 120
    RULE_patternNoTopAlt = 121
    RULE_patternWithoutRange = 122
    RULE_literalPattern = 123
    RULE_identifierPattern = 124
    RULE_wildcardPattern = 125
    RULE_restPattern = 126
    RULE_rangePattern = 127
    RULE_rangePatternBound = 128
    RULE_referencePattern = 129
    RULE_structPattern = 130
    RULE_structPatternElements = 131
    RULE_structPatternFields = 132
    RULE_structPatternField = 133
    RULE_structPatternEtCetera = 134
    RULE_tupleStructPattern = 135
    RULE_tupleStructItems = 136
    RULE_tuplePattern = 137
    RULE_tuplePatternItems = 138
    RULE_groupedPattern = 139
    RULE_slicePattern = 140
    RULE_slicePatternItems = 141
    RULE_pathPattern = 142
    RULE_type_ = 143
    RULE_typeNoBounds = 144
    RULE_parenthesizedType = 145
    RULE_neverType = 146
    RULE_tupleType = 147
    RULE_arrayType = 148
    RULE_sliceType = 149
    RULE_referenceType = 150
    RULE_rawPointerType = 151
    RULE_bareFunctionType = 152
    RULE_functionTypeQualifiers = 153
    RULE_bareFunctionReturnType = 154
    RULE_functionParametersMaybeNamedVariadic = 155
    RULE_maybeNamedFunctionParameters = 156
    RULE_maybeNamedParam = 157
    RULE_maybeNamedFunctionParametersVariadic = 158
    RULE_traitObjectType = 159
    RULE_traitObjectTypeOneBound = 160
    RULE_implTraitType = 161
    RULE_implTraitTypeOneBound = 162
    RULE_inferredType = 163
    RULE_typeParamBounds = 164
    RULE_typeParamBound = 165
    RULE_traitBound = 166
    RULE_lifetimeBounds = 167
    RULE_lifetime = 168
    RULE_simplePath = 169
    RULE_simplePathSegment = 170
    RULE_pathInExpression = 171
    RULE_pathExprSegment = 172
    RULE_pathIdentSegment = 173
    RULE_genericArgs = 174
    RULE_genericArg = 175
    RULE_genericArgsConst = 176
    RULE_genericArgsLifetimes = 177
    RULE_genericArgsTypes = 178
    RULE_genericArgsBindings = 179
    RULE_genericArgsBinding = 180
    RULE_qualifiedPathInExpression = 181
    RULE_qualifiedPathType = 182
    RULE_qualifiedPathInType = 183
    RULE_typePath = 184
    RULE_typePathSegment = 185
    RULE_typePathFn = 186
    RULE_typePathInputs = 187
    RULE_visibility = 188
    RULE_identifier = 189
    RULE_keyword = 190
    RULE_macroIdentifierLikeToken = 191
    RULE_macroLiteralToken = 192
    RULE_macroPunctuationToken = 193
    RULE_shl = 194
    RULE_shr = 195

    ruleNames =  [ "crate", "macroInvocation", "delimTokenTree", "tokenTree", 
                   "tokenTreeToken", "macroInvocationSemi", "macroRulesDefinition", 
                   "macroRulesDef", "macroRules", "macroRule", "macroMatcher", 
                   "macroMatch", "macroMatchToken", "macroFragSpec", "macroRepSep", 
                   "macroRepOp", "macroTranscriber", "item", "visItem", 
                   "macroItem", "module", "externCrate", "crateRef", "asClause", 
                   "useDeclaration", "useTree", "function_", "functionQualifiers", 
                   "abi", "functionParameters", "selfParam", "shorthandSelf", 
                   "typedSelf", "functionParam", "functionParamPattern", 
                   "functionReturnType", "typeAlias", "struct_", "structStruct", 
                   "tupleStruct", "structFields", "structField", "tupleFields", 
                   "tupleField", "enumeration", "enumItems", "enumItem", 
                   "enumItemTuple", "enumItemStruct", "enumItemDiscriminant", 
                   "union_", "constantItem", "staticItem", "trait_", "implementation", 
                   "inherentImpl", "traitImpl", "externBlock", "externalItem", 
                   "genericParams", "genericParam", "lifetimeParam", "typeParam", 
                   "constParam", "whereClause", "whereClauseItem", "lifetimeWhereClauseItem", 
                   "typeBoundWhereClauseItem", "forLifetimes", "associatedItem", 
                   "innerAttribute", "outerAttribute", "attr", "attrInput", 
                   "statement", "letStatement", "expressionStatement", "expression", 
                   "comparisonOperator", "compoundAssignOperator", "expressionWithBlock", 
                   "literalExpression", "pathExpression", "blockExpression", 
                   "statements", "asyncBlockExpression", "unsafeBlockExpression", 
                   "arrayElements", "tupleElements", "tupleIndex", "structExpression", 
                   "structExprStruct", "structExprFields", "structExprField", 
                   "structBase", "structExprTuple", "structExprUnit", "enumerationVariantExpression", 
                   "enumExprStruct", "enumExprFields", "enumExprField", 
                   "enumExprTuple", "enumExprFieldless", "callParams", "closureExpression", 
                   "closureParameters", "closureParam", "loopExpression", 
                   "infiniteLoopExpression", "predicateLoopExpression", 
                   "predicatePatternLoopExpression", "iteratorLoopExpression", 
                   "loopLabel", "ifExpression", "ifLetExpression", "matchExpression", 
                   "matchArms", "matchArmExpression", "matchArm", "matchArmGuard", 
                   "pattern", "patternNoTopAlt", "patternWithoutRange", 
                   "literalPattern", "identifierPattern", "wildcardPattern", 
                   "restPattern", "rangePattern", "rangePatternBound", "referencePattern", 
                   "structPattern", "structPatternElements", "structPatternFields", 
                   "structPatternField", "structPatternEtCetera", "tupleStructPattern", 
                   "tupleStructItems", "tuplePattern", "tuplePatternItems", 
                   "groupedPattern", "slicePattern", "slicePatternItems", 
                   "pathPattern", "type_", "typeNoBounds", "parenthesizedType", 
                   "neverType", "tupleType", "arrayType", "sliceType", "referenceType", 
                   "rawPointerType", "bareFunctionType", "functionTypeQualifiers", 
                   "bareFunctionReturnType", "functionParametersMaybeNamedVariadic", 
                   "maybeNamedFunctionParameters", "maybeNamedParam", "maybeNamedFunctionParametersVariadic", 
                   "traitObjectType", "traitObjectTypeOneBound", "implTraitType", 
                   "implTraitTypeOneBound", "inferredType", "typeParamBounds", 
                   "typeParamBound", "traitBound", "lifetimeBounds", "lifetime", 
                   "simplePath", "simplePathSegment", "pathInExpression", 
                   "pathExprSegment", "pathIdentSegment", "genericArgs", 
                   "genericArg", "genericArgsConst", "genericArgsLifetimes", 
                   "genericArgsTypes", "genericArgsBindings", "genericArgsBinding", 
                   "qualifiedPathInExpression", "qualifiedPathType", "qualifiedPathInType", 
                   "typePath", "typePathSegment", "typePathFn", "typePathInputs", 
                   "visibility", "identifier", "keyword", "macroIdentifierLikeToken", 
                   "macroLiteralToken", "macroPunctuationToken", "shl", 
                   "shr" ]

    EOF = Token.EOF
    KW_AS=1
    KW_BREAK=2
    KW_CONST=3
    KW_CONTINUE=4
    KW_CRATE=5
    KW_ELSE=6
    KW_ENUM=7
    KW_EXTERN=8
    KW_FALSE=9
    KW_FN=10
    KW_FOR=11
    KW_IF=12
    KW_IMPL=13
    KW_IN=14
    KW_LET=15
    KW_LOOP=16
    KW_MATCH=17
    KW_MOD=18
    KW_MOVE=19
    KW_MUT=20
    KW_PUB=21
    KW_REF=22
    KW_RETURN=23
    KW_SELFVALUE=24
    KW_SELFTYPE=25
    KW_STATIC=26
    KW_STRUCT=27
    KW_SUPER=28
    KW_TRAIT=29
    KW_TRUE=30
    KW_TYPE=31
    KW_UNSAFE=32
    KW_USE=33
    KW_WHERE=34
    KW_WHILE=35
    KW_ASYNC=36
    KW_AWAIT=37
    KW_DYN=38
    KW_ABSTRACT=39
    KW_BECOME=40
    KW_BOX=41
    KW_DO=42
    KW_FINAL=43
    KW_MACRO=44
    KW_OVERRIDE=45
    KW_PRIV=46
    KW_TYPEOF=47
    KW_UNSIZED=48
    KW_VIRTUAL=49
    KW_YIELD=50
    KW_TRY=51
    KW_UNION=52
    KW_STATICLIFETIME=53
    KW_MACRORULES=54
    KW_UNDERLINELIFETIME=55
    KW_DOLLARCRATE=56
    NON_KEYWORD_IDENTIFIER=57
    RAW_IDENTIFIER=58
    LINE_COMMENT=59
    BLOCK_COMMENT=60
    INNER_LINE_DOC=61
    INNER_BLOCK_DOC=62
    OUTER_LINE_DOC=63
    OUTER_BLOCK_DOC=64
    BLOCK_COMMENT_OR_DOC=65
    SHEBANG=66
    WHITESPACE=67
    NEWLINE=68
    CHAR_LITERAL=69
    STRING_LITERAL=70
    RAW_STRING_LITERAL=71
    BYTE_LITERAL=72
    BYTE_STRING_LITERAL=73
    RAW_BYTE_STRING_LITERAL=74
    INTEGER_LITERAL=75
    DEC_LITERAL=76
    HEX_LITERAL=77
    OCT_LITERAL=78
    BIN_LITERAL=79
    FLOAT_LITERAL=80
    LIFETIME_OR_LABEL=81
    PLUS=82
    MINUS=83
    STAR=84
    SLASH=85
    PERCENT=86
    CARET=87
    NOT=88
    AND=89
    OR=90
    ANDAND=91
    OROR=92
    PLUSEQ=93
    MINUSEQ=94
    STAREQ=95
    SLASHEQ=96
    PERCENTEQ=97
    CARETEQ=98
    ANDEQ=99
    OREQ=100
    SHLEQ=101
    SHREQ=102
    EQ=103
    EQEQ=104
    NE=105
    GT=106
    LT=107
    GE=108
    LE=109
    AT=110
    UNDERSCORE=111
    DOT=112
    DOTDOT=113
    DOTDOTDOT=114
    DOTDOTEQ=115
    COMMA=116
    SEMI=117
    COLON=118
    PATHSEP=119
    RARROW=120
    FATARROW=121
    POUND=122
    DOLLAR=123
    QUESTION=124
    LCURLYBRACE=125
    RCURLYBRACE=126
    LSQUAREBRACKET=127
    RSQUAREBRACKET=128
    LPAREN=129
    RPAREN=130

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class CrateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(RustParser.EOF, 0)

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_crate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCrate" ):
                listener.enterCrate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCrate" ):
                listener.exitCrate(self)




    def crate(self):

        localctx = RustParser.CrateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_crate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 392
                    self.innerAttribute() 
                self.state = 397
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 526921241179989416) != 0) or _la==119 or _la==122:
                self.state = 398
                self.item()
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 404
            self.match(RustParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplePath(self):
            return self.getTypedRuleContext(RustParser.SimplePathContext,0)


        def NOT(self):
            return self.getToken(RustParser.NOT, 0)

        def delimTokenTree(self):
            return self.getTypedRuleContext(RustParser.DelimTokenTreeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroInvocation" ):
                listener.enterMacroInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroInvocation" ):
                listener.exitMacroInvocation(self)




    def macroInvocation(self):

        localctx = RustParser.MacroInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_macroInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.simplePath()
            self.state = 407
            self.match(RustParser.NOT)
            self.state = 408
            self.delimTokenTree()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelimTokenTreeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def tokenTree(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TokenTreeContext)
            else:
                return self.getTypedRuleContext(RustParser.TokenTreeContext,i)


        def LSQUAREBRACKET(self):
            return self.getToken(RustParser.LSQUAREBRACKET, 0)

        def RSQUAREBRACKET(self):
            return self.getToken(RustParser.RSQUAREBRACKET, 0)

        def LCURLYBRACE(self):
            return self.getToken(RustParser.LCURLYBRACE, 0)

        def RCURLYBRACE(self):
            return self.getToken(RustParser.RCURLYBRACE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_delimTokenTree

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelimTokenTree" ):
                listener.enterDelimTokenTree(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelimTokenTree" ):
                listener.exitDelimTokenTree(self)




    def delimTokenTree(self):

        localctx = RustParser.DelimTokenTreeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_delimTokenTree)
        self._la = 0 # Token type
        try:
            self.state = 434
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 410
                self.match(RustParser.LPAREN)
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 576460752303423486) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1585267068834412671) != 0):
                    self.state = 411
                    self.tokenTree()
                    self.state = 416
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 417
                self.match(RustParser.RPAREN)
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 2)
                self.state = 418
                self.match(RustParser.LSQUAREBRACKET)
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 576460752303423486) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1585267068834412671) != 0):
                    self.state = 419
                    self.tokenTree()
                    self.state = 424
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 425
                self.match(RustParser.RSQUAREBRACKET)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 3)
                self.state = 426
                self.match(RustParser.LCURLYBRACE)
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 576460752303423486) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1585267068834412671) != 0):
                    self.state = 427
                    self.tokenTree()
                    self.state = 432
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 433
                self.match(RustParser.RCURLYBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokenTreeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokenTreeToken(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TokenTreeTokenContext)
            else:
                return self.getTypedRuleContext(RustParser.TokenTreeTokenContext,i)


        def delimTokenTree(self):
            return self.getTypedRuleContext(RustParser.DelimTokenTreeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_tokenTree

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTokenTree" ):
                listener.enterTokenTree(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTokenTree" ):
                listener.exitTokenTree(self)




    def tokenTree(self):

        localctx = RustParser.TokenTreeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_tokenTree)
        try:
            self.state = 442
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 69, 70, 71, 72, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 437 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 436
                        self.tokenTreeToken()

                    else:
                        raise NoViableAltException(self)
                    self.state = 439 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

                pass
            elif token in [125, 127, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 441
                self.delimTokenTree()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokenTreeTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroIdentifierLikeToken(self):
            return self.getTypedRuleContext(RustParser.MacroIdentifierLikeTokenContext,0)


        def macroLiteralToken(self):
            return self.getTypedRuleContext(RustParser.MacroLiteralTokenContext,0)


        def macroPunctuationToken(self):
            return self.getTypedRuleContext(RustParser.MacroPunctuationTokenContext,0)


        def macroRepOp(self):
            return self.getTypedRuleContext(RustParser.MacroRepOpContext,0)


        def DOLLAR(self):
            return self.getToken(RustParser.DOLLAR, 0)

        def getRuleIndex(self):
            return RustParser.RULE_tokenTreeToken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTokenTreeToken" ):
                listener.enterTokenTreeToken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTokenTreeToken" ):
                listener.exitTokenTreeToken(self)




    def tokenTreeToken(self):

        localctx = RustParser.TokenTreeTokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_tokenTreeToken)
        try:
            self.state = 449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 444
                self.macroIdentifierLikeToken()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 445
                self.macroLiteralToken()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 446
                self.macroPunctuationToken()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 447
                self.macroRepOp()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 448
                self.match(RustParser.DOLLAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroInvocationSemiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplePath(self):
            return self.getTypedRuleContext(RustParser.SimplePathContext,0)


        def NOT(self):
            return self.getToken(RustParser.NOT, 0)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(RustParser.SEMI, 0)

        def tokenTree(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TokenTreeContext)
            else:
                return self.getTypedRuleContext(RustParser.TokenTreeContext,i)


        def LSQUAREBRACKET(self):
            return self.getToken(RustParser.LSQUAREBRACKET, 0)

        def RSQUAREBRACKET(self):
            return self.getToken(RustParser.RSQUAREBRACKET, 0)

        def LCURLYBRACE(self):
            return self.getToken(RustParser.LCURLYBRACE, 0)

        def RCURLYBRACE(self):
            return self.getToken(RustParser.RCURLYBRACE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_macroInvocationSemi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroInvocationSemi" ):
                listener.enterMacroInvocationSemi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroInvocationSemi" ):
                listener.exitMacroInvocationSemi(self)




    def macroInvocationSemi(self):

        localctx = RustParser.MacroInvocationSemiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_macroInvocationSemi)
        self._la = 0 # Token type
        try:
            self.state = 486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 451
                self.simplePath()
                self.state = 452
                self.match(RustParser.NOT)
                self.state = 453
                self.match(RustParser.LPAREN)
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 576460752303423486) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1585267068834412671) != 0):
                    self.state = 454
                    self.tokenTree()
                    self.state = 459
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 460
                self.match(RustParser.RPAREN)
                self.state = 461
                self.match(RustParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 463
                self.simplePath()
                self.state = 464
                self.match(RustParser.NOT)
                self.state = 465
                self.match(RustParser.LSQUAREBRACKET)
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 576460752303423486) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1585267068834412671) != 0):
                    self.state = 466
                    self.tokenTree()
                    self.state = 471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 472
                self.match(RustParser.RSQUAREBRACKET)
                self.state = 473
                self.match(RustParser.SEMI)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 475
                self.simplePath()
                self.state = 476
                self.match(RustParser.NOT)
                self.state = 477
                self.match(RustParser.LCURLYBRACE)
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 576460752303423486) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1585267068834412671) != 0):
                    self.state = 478
                    self.tokenTree()
                    self.state = 483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 484
                self.match(RustParser.RCURLYBRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRulesDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_MACRORULES(self):
            return self.getToken(RustParser.KW_MACRORULES, 0)

        def NOT(self):
            return self.getToken(RustParser.NOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def macroRulesDef(self):
            return self.getTypedRuleContext(RustParser.MacroRulesDefContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroRulesDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRulesDefinition" ):
                listener.enterMacroRulesDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRulesDefinition" ):
                listener.exitMacroRulesDefinition(self)




    def macroRulesDefinition(self):

        localctx = RustParser.MacroRulesDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_macroRulesDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.match(RustParser.KW_MACRORULES)
            self.state = 489
            self.match(RustParser.NOT)
            self.state = 490
            self.identifier()
            self.state = 491
            self.macroRulesDef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRulesDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def macroRules(self):
            return self.getTypedRuleContext(RustParser.MacroRulesContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(RustParser.SEMI, 0)

        def LSQUAREBRACKET(self):
            return self.getToken(RustParser.LSQUAREBRACKET, 0)

        def RSQUAREBRACKET(self):
            return self.getToken(RustParser.RSQUAREBRACKET, 0)

        def LCURLYBRACE(self):
            return self.getToken(RustParser.LCURLYBRACE, 0)

        def RCURLYBRACE(self):
            return self.getToken(RustParser.RCURLYBRACE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_macroRulesDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRulesDef" ):
                listener.enterMacroRulesDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRulesDef" ):
                listener.exitMacroRulesDef(self)




    def macroRulesDef(self):

        localctx = RustParser.MacroRulesDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_macroRulesDef)
        try:
            self.state = 507
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 493
                self.match(RustParser.LPAREN)
                self.state = 494
                self.macroRules()
                self.state = 495
                self.match(RustParser.RPAREN)
                self.state = 496
                self.match(RustParser.SEMI)
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 2)
                self.state = 498
                self.match(RustParser.LSQUAREBRACKET)
                self.state = 499
                self.macroRules()
                self.state = 500
                self.match(RustParser.RSQUAREBRACKET)
                self.state = 501
                self.match(RustParser.SEMI)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 3)
                self.state = 503
                self.match(RustParser.LCURLYBRACE)
                self.state = 504
                self.macroRules()
                self.state = 505
                self.match(RustParser.RCURLYBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRulesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroRule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MacroRuleContext)
            else:
                return self.getTypedRuleContext(RustParser.MacroRuleContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.SEMI)
            else:
                return self.getToken(RustParser.SEMI, i)

        def getRuleIndex(self):
            return RustParser.RULE_macroRules

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRules" ):
                listener.enterMacroRules(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRules" ):
                listener.exitMacroRules(self)




    def macroRules(self):

        localctx = RustParser.MacroRulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_macroRules)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.macroRule()
            self.state = 514
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 510
                    self.match(RustParser.SEMI)
                    self.state = 511
                    self.macroRule() 
                self.state = 516
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 517
                self.match(RustParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroMatcher(self):
            return self.getTypedRuleContext(RustParser.MacroMatcherContext,0)


        def FATARROW(self):
            return self.getToken(RustParser.FATARROW, 0)

        def macroTranscriber(self):
            return self.getTypedRuleContext(RustParser.MacroTranscriberContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRule" ):
                listener.enterMacroRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRule" ):
                listener.exitMacroRule(self)




    def macroRule(self):

        localctx = RustParser.MacroRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_macroRule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.macroMatcher()
            self.state = 521
            self.match(RustParser.FATARROW)
            self.state = 522
            self.macroTranscriber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroMatcherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def macroMatch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MacroMatchContext)
            else:
                return self.getTypedRuleContext(RustParser.MacroMatchContext,i)


        def LSQUAREBRACKET(self):
            return self.getToken(RustParser.LSQUAREBRACKET, 0)

        def RSQUAREBRACKET(self):
            return self.getToken(RustParser.RSQUAREBRACKET, 0)

        def LCURLYBRACE(self):
            return self.getToken(RustParser.LCURLYBRACE, 0)

        def RCURLYBRACE(self):
            return self.getToken(RustParser.RCURLYBRACE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_macroMatcher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroMatcher" ):
                listener.enterMacroMatcher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroMatcher" ):
                listener.exitMacroMatcher(self)




    def macroMatcher(self):

        localctx = RustParser.MacroMatcherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_macroMatcher)
        self._la = 0 # Token type
        try:
            self.state = 548
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 524
                self.match(RustParser.LPAREN)
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 576460752303423486) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1585267068834412671) != 0):
                    self.state = 525
                    self.macroMatch()
                    self.state = 530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 531
                self.match(RustParser.RPAREN)
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 2)
                self.state = 532
                self.match(RustParser.LSQUAREBRACKET)
                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 576460752303423486) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1585267068834412671) != 0):
                    self.state = 533
                    self.macroMatch()
                    self.state = 538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 539
                self.match(RustParser.RSQUAREBRACKET)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 3)
                self.state = 540
                self.match(RustParser.LCURLYBRACE)
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 576460752303423486) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1585267068834412671) != 0):
                    self.state = 541
                    self.macroMatch()
                    self.state = 546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 547
                self.match(RustParser.RCURLYBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroMatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroMatchToken(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MacroMatchTokenContext)
            else:
                return self.getTypedRuleContext(RustParser.MacroMatchTokenContext,i)


        def macroMatcher(self):
            return self.getTypedRuleContext(RustParser.MacroMatcherContext,0)


        def DOLLAR(self):
            return self.getToken(RustParser.DOLLAR, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def macroFragSpec(self):
            return self.getTypedRuleContext(RustParser.MacroFragSpecContext,0)


        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def KW_SELFVALUE(self):
            return self.getToken(RustParser.KW_SELFVALUE, 0)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def macroRepOp(self):
            return self.getTypedRuleContext(RustParser.MacroRepOpContext,0)


        def macroMatch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MacroMatchContext)
            else:
                return self.getTypedRuleContext(RustParser.MacroMatchContext,i)


        def macroRepSep(self):
            return self.getTypedRuleContext(RustParser.MacroRepSepContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroMatch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroMatch" ):
                listener.enterMacroMatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroMatch" ):
                listener.exitMacroMatch(self)




    def macroMatch(self):

        localctx = RustParser.MacroMatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_macroMatch)
        self._la = 0 # Token type
        try:
            self.state = 576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 551 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 550
                        self.macroMatchToken()

                    else:
                        raise NoViableAltException(self)
                    self.state = 553 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 555
                self.macroMatcher()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 556
                self.match(RustParser.DOLLAR)
                self.state = 559
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [54, 57, 58]:
                    self.state = 557
                    self.identifier()
                    pass
                elif token in [24]:
                    self.state = 558
                    self.match(RustParser.KW_SELFVALUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 561
                self.match(RustParser.COLON)
                self.state = 562
                self.macroFragSpec()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 563
                self.match(RustParser.DOLLAR)
                self.state = 564
                self.match(RustParser.LPAREN)
                self.state = 566 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 565
                    self.macroMatch()
                    self.state = 568 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 576460752303423486) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1585267068834412671) != 0)):
                        break

                self.state = 570
                self.match(RustParser.RPAREN)
                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 576460752303423486) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 36028797018921087) != 0):
                    self.state = 571
                    self.macroRepSep()


                self.state = 574
                self.macroRepOp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroMatchTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroIdentifierLikeToken(self):
            return self.getTypedRuleContext(RustParser.MacroIdentifierLikeTokenContext,0)


        def macroLiteralToken(self):
            return self.getTypedRuleContext(RustParser.MacroLiteralTokenContext,0)


        def macroPunctuationToken(self):
            return self.getTypedRuleContext(RustParser.MacroPunctuationTokenContext,0)


        def macroRepOp(self):
            return self.getTypedRuleContext(RustParser.MacroRepOpContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroMatchToken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroMatchToken" ):
                listener.enterMacroMatchToken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroMatchToken" ):
                listener.exitMacroMatchToken(self)




    def macroMatchToken(self):

        localctx = RustParser.MacroMatchTokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_macroMatchToken)
        try:
            self.state = 582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 578
                self.macroIdentifierLikeToken()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 579
                self.macroLiteralToken()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 580
                self.macroPunctuationToken()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 581
                self.macroRepOp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroFragSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroFragSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroFragSpec" ):
                listener.enterMacroFragSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroFragSpec" ):
                listener.exitMacroFragSpec(self)




    def macroFragSpec(self):

        localctx = RustParser.MacroFragSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_macroFragSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRepSepContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroIdentifierLikeToken(self):
            return self.getTypedRuleContext(RustParser.MacroIdentifierLikeTokenContext,0)


        def macroLiteralToken(self):
            return self.getTypedRuleContext(RustParser.MacroLiteralTokenContext,0)


        def macroPunctuationToken(self):
            return self.getTypedRuleContext(RustParser.MacroPunctuationTokenContext,0)


        def DOLLAR(self):
            return self.getToken(RustParser.DOLLAR, 0)

        def getRuleIndex(self):
            return RustParser.RULE_macroRepSep

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRepSep" ):
                listener.enterMacroRepSep(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRepSep" ):
                listener.exitMacroRepSep(self)




    def macroRepSep(self):

        localctx = RustParser.MacroRepSepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_macroRepSep)
        try:
            self.state = 590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 586
                self.macroIdentifierLikeToken()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 587
                self.macroLiteralToken()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 588
                self.macroPunctuationToken()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 589
                self.match(RustParser.DOLLAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroRepOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(RustParser.STAR, 0)

        def PLUS(self):
            return self.getToken(RustParser.PLUS, 0)

        def QUESTION(self):
            return self.getToken(RustParser.QUESTION, 0)

        def getRuleIndex(self):
            return RustParser.RULE_macroRepOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroRepOp" ):
                listener.enterMacroRepOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroRepOp" ):
                listener.exitMacroRepOp(self)




    def macroRepOp(self):

        localctx = RustParser.MacroRepOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_macroRepOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            _la = self._input.LA(1)
            if not(((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 4398046511109) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroTranscriberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delimTokenTree(self):
            return self.getTypedRuleContext(RustParser.DelimTokenTreeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroTranscriber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroTranscriber" ):
                listener.enterMacroTranscriber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroTranscriber" ):
                listener.exitMacroTranscriber(self)




    def macroTranscriber(self):

        localctx = RustParser.MacroTranscriberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_macroTranscriber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.delimTokenTree()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def visItem(self):
            return self.getTypedRuleContext(RustParser.VisItemContext,0)


        def macroItem(self):
            return self.getTypedRuleContext(RustParser.MacroItemContext,0)


        def outerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.OuterAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.OuterAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItem" ):
                listener.enterItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItem" ):
                listener.exitItem(self)




    def item(self):

        localctx = RustParser.ItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==122:
                self.state = 596
                self.outerAttribute()
                self.state = 601
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 604
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 7, 8, 10, 13, 18, 21, 26, 27, 29, 31, 32, 33, 36, 52]:
                self.state = 602
                self.visItem()
                pass
            elif token in [5, 24, 28, 54, 56, 57, 58, 119]:
                self.state = 603
                self.macroItem()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self):
            return self.getTypedRuleContext(RustParser.ModuleContext,0)


        def externCrate(self):
            return self.getTypedRuleContext(RustParser.ExternCrateContext,0)


        def useDeclaration(self):
            return self.getTypedRuleContext(RustParser.UseDeclarationContext,0)


        def function_(self):
            return self.getTypedRuleContext(RustParser.Function_Context,0)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def struct_(self):
            return self.getTypedRuleContext(RustParser.Struct_Context,0)


        def enumeration(self):
            return self.getTypedRuleContext(RustParser.EnumerationContext,0)


        def union_(self):
            return self.getTypedRuleContext(RustParser.Union_Context,0)


        def constantItem(self):
            return self.getTypedRuleContext(RustParser.ConstantItemContext,0)


        def staticItem(self):
            return self.getTypedRuleContext(RustParser.StaticItemContext,0)


        def trait_(self):
            return self.getTypedRuleContext(RustParser.Trait_Context,0)


        def implementation(self):
            return self.getTypedRuleContext(RustParser.ImplementationContext,0)


        def externBlock(self):
            return self.getTypedRuleContext(RustParser.ExternBlockContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_visItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisItem" ):
                listener.enterVisItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisItem" ):
                listener.exitVisItem(self)




    def visItem(self):

        localctx = RustParser.VisItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_visItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 606
                self.visibility()


            self.state = 622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 609
                self.module()
                pass

            elif la_ == 2:
                self.state = 610
                self.externCrate()
                pass

            elif la_ == 3:
                self.state = 611
                self.useDeclaration()
                pass

            elif la_ == 4:
                self.state = 612
                self.function_()
                pass

            elif la_ == 5:
                self.state = 613
                self.typeAlias()
                pass

            elif la_ == 6:
                self.state = 614
                self.struct_()
                pass

            elif la_ == 7:
                self.state = 615
                self.enumeration()
                pass

            elif la_ == 8:
                self.state = 616
                self.union_()
                pass

            elif la_ == 9:
                self.state = 617
                self.constantItem()
                pass

            elif la_ == 10:
                self.state = 618
                self.staticItem()
                pass

            elif la_ == 11:
                self.state = 619
                self.trait_()
                pass

            elif la_ == 12:
                self.state = 620
                self.implementation()
                pass

            elif la_ == 13:
                self.state = 621
                self.externBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroInvocationSemi(self):
            return self.getTypedRuleContext(RustParser.MacroInvocationSemiContext,0)


        def macroRulesDefinition(self):
            return self.getTypedRuleContext(RustParser.MacroRulesDefinitionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroItem" ):
                listener.enterMacroItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroItem" ):
                listener.exitMacroItem(self)




    def macroItem(self):

        localctx = RustParser.MacroItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_macroItem)
        try:
            self.state = 626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 624
                self.macroInvocationSemi()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 625
                self.macroRulesDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_MOD(self):
            return self.getToken(RustParser.KW_MOD, 0)

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def SEMI(self):
            return self.getToken(RustParser.SEMI, 0)

        def LCURLYBRACE(self):
            return self.getToken(RustParser.LCURLYBRACE, 0)

        def RCURLYBRACE(self):
            return self.getToken(RustParser.RCURLYBRACE, 0)

        def KW_UNSAFE(self):
            return self.getToken(RustParser.KW_UNSAFE, 0)

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)




    def module(self):

        localctx = RustParser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 628
                self.match(RustParser.KW_UNSAFE)


            self.state = 631
            self.match(RustParser.KW_MOD)
            self.state = 632
            self.identifier()
            self.state = 648
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.state = 633
                self.match(RustParser.SEMI)
                pass
            elif token in [125]:
                self.state = 634
                self.match(RustParser.LCURLYBRACE)
                self.state = 638
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 635
                        self.innerAttribute() 
                    self.state = 640
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 526921241179989416) != 0) or _la==119 or _la==122:
                    self.state = 641
                    self.item()
                    self.state = 646
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 647
                self.match(RustParser.RCURLYBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternCrateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXTERN(self):
            return self.getToken(RustParser.KW_EXTERN, 0)

        def KW_CRATE(self):
            return self.getToken(RustParser.KW_CRATE, 0)

        def crateRef(self):
            return self.getTypedRuleContext(RustParser.CrateRefContext,0)


        def SEMI(self):
            return self.getToken(RustParser.SEMI, 0)

        def asClause(self):
            return self.getTypedRuleContext(RustParser.AsClauseContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externCrate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternCrate" ):
                listener.enterExternCrate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternCrate" ):
                listener.exitExternCrate(self)




    def externCrate(self):

        localctx = RustParser.ExternCrateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_externCrate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.match(RustParser.KW_EXTERN)
            self.state = 651
            self.match(RustParser.KW_CRATE)
            self.state = 652
            self.crateRef()
            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 653
                self.asClause()


            self.state = 656
            self.match(RustParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CrateRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def KW_SELFVALUE(self):
            return self.getToken(RustParser.KW_SELFVALUE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_crateRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCrateRef" ):
                listener.enterCrateRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCrateRef" ):
                listener.exitCrateRef(self)




    def crateRef(self):

        localctx = RustParser.CrateRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_crateRef)
        try:
            self.state = 660
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 57, 58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 658
                self.identifier()
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 659
                self.match(RustParser.KW_SELFVALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AS(self):
            return self.getToken(RustParser.KW_AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_asClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsClause" ):
                listener.enterAsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsClause" ):
                listener.exitAsClause(self)




    def asClause(self):

        localctx = RustParser.AsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_asClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.match(RustParser.KW_AS)
            self.state = 665
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 57, 58]:
                self.state = 663
                self.identifier()
                pass
            elif token in [111]:
                self.state = 664
                self.match(RustParser.UNDERSCORE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_USE(self):
            return self.getToken(RustParser.KW_USE, 0)

        def useTree(self):
            return self.getTypedRuleContext(RustParser.UseTreeContext,0)


        def SEMI(self):
            return self.getToken(RustParser.SEMI, 0)

        def getRuleIndex(self):
            return RustParser.RULE_useDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDeclaration" ):
                listener.enterUseDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDeclaration" ):
                listener.exitUseDeclaration(self)




    def useDeclaration(self):

        localctx = RustParser.UseDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_useDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(RustParser.KW_USE)
            self.state = 668
            self.useTree()
            self.state = 669
            self.match(RustParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseTreeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(RustParser.STAR, 0)

        def LCURLYBRACE(self):
            return self.getToken(RustParser.LCURLYBRACE, 0)

        def RCURLYBRACE(self):
            return self.getToken(RustParser.RCURLYBRACE, 0)

        def PATHSEP(self):
            return self.getToken(RustParser.PATHSEP, 0)

        def useTree(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.UseTreeContext)
            else:
                return self.getTypedRuleContext(RustParser.UseTreeContext,i)


        def simplePath(self):
            return self.getTypedRuleContext(RustParser.SimplePathContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def KW_AS(self):
            return self.getToken(RustParser.KW_AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_useTree

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseTree" ):
                listener.enterUseTree(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseTree" ):
                listener.exitUseTree(self)




    def useTree(self):

        localctx = RustParser.UseTreeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_useTree)
        self._la = 0 # Token type
        try:
            self.state = 703
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 522417557060190240) != 0) or _la==119:
                    self.state = 672
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                    if la_ == 1:
                        self.state = 671
                        self.simplePath()


                    self.state = 674
                    self.match(RustParser.PATHSEP)


                self.state = 693
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [84]:
                    self.state = 677
                    self.match(RustParser.STAR)
                    pass
                elif token in [125]:
                    self.state = 678
                    self.match(RustParser.LCURLYBRACE)
                    self.state = 690
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 522417557060190240) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 2233382993921) != 0):
                        self.state = 679
                        self.useTree()
                        self.state = 684
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 680
                                self.match(RustParser.COMMA)
                                self.state = 681
                                self.useTree() 
                            self.state = 686
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

                        self.state = 688
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==116:
                            self.state = 687
                            self.match(RustParser.COMMA)




                    self.state = 692
                    self.match(RustParser.RCURLYBRACE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 695
                self.simplePath()
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 696
                    self.match(RustParser.KW_AS)
                    self.state = 699
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [54, 57, 58]:
                        self.state = 697
                        self.identifier()
                        pass
                    elif token in [111]:
                        self.state = 698
                        self.match(RustParser.UNDERSCORE)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionQualifiers(self):
            return self.getTypedRuleContext(RustParser.FunctionQualifiersContext,0)


        def KW_FN(self):
            return self.getToken(RustParser.KW_FN, 0)

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def blockExpression(self):
            return self.getTypedRuleContext(RustParser.BlockExpressionContext,0)


        def SEMI(self):
            return self.getToken(RustParser.SEMI, 0)

        def genericParams(self):
            return self.getTypedRuleContext(RustParser.GenericParamsContext,0)


        def functionParameters(self):
            return self.getTypedRuleContext(RustParser.FunctionParametersContext,0)


        def functionReturnType(self):
            return self.getTypedRuleContext(RustParser.FunctionReturnTypeContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(RustParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_function_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_" ):
                listener.enterFunction_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_" ):
                listener.exitFunction_(self)




    def function_(self):

        localctx = RustParser.Function_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_function_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.functionQualifiers()
            self.state = 706
            self.match(RustParser.KW_FN)
            self.state = 707
            self.identifier()
            self.state = 709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 708
                self.genericParams()


            self.state = 711
            self.match(RustParser.LPAREN)
            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 567453833619320608) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1487371226429577343) != 0):
                self.state = 712
                self.functionParameters()


            self.state = 715
            self.match(RustParser.RPAREN)
            self.state = 717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 716
                self.functionReturnType()


            self.state = 720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 719
                self.whereClause()


            self.state = 724
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.state = 722
                self.blockExpression()
                pass
            elif token in [117]:
                self.state = 723
                self.match(RustParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionQualifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONST(self):
            return self.getToken(RustParser.KW_CONST, 0)

        def KW_ASYNC(self):
            return self.getToken(RustParser.KW_ASYNC, 0)

        def KW_UNSAFE(self):
            return self.getToken(RustParser.KW_UNSAFE, 0)

        def KW_EXTERN(self):
            return self.getToken(RustParser.KW_EXTERN, 0)

        def abi(self):
            return self.getTypedRuleContext(RustParser.AbiContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionQualifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionQualifiers" ):
                listener.enterFunctionQualifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionQualifiers" ):
                listener.exitFunctionQualifiers(self)




    def functionQualifiers(self):

        localctx = RustParser.FunctionQualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_functionQualifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 726
                self.match(RustParser.KW_CONST)


            self.state = 730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 729
                self.match(RustParser.KW_ASYNC)


            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 732
                self.match(RustParser.KW_UNSAFE)


            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 735
                self.match(RustParser.KW_EXTERN)
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==70 or _la==71:
                    self.state = 736
                    self.abi()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def RAW_STRING_LITERAL(self):
            return self.getToken(RustParser.RAW_STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_abi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbi" ):
                listener.enterAbi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbi" ):
                listener.exitAbi(self)




    def abi(self):

        localctx = RustParser.AbiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_abi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            _la = self._input.LA(1)
            if not(_la==70 or _la==71):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selfParam(self):
            return self.getTypedRuleContext(RustParser.SelfParamContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def functionParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.FunctionParamContext)
            else:
                return self.getTypedRuleContext(RustParser.FunctionParamContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_functionParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionParameters" ):
                listener.enterFunctionParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionParameters" ):
                listener.exitFunctionParameters(self)




    def functionParameters(self):

        localctx = RustParser.FunctionParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_functionParameters)
        self._la = 0 # Token type
        try:
            self.state = 763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 743
                self.selfParam()
                self.state = 745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 744
                    self.match(RustParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 750
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 747
                    self.selfParam()
                    self.state = 748
                    self.match(RustParser.COMMA)


                self.state = 752
                self.functionParam()
                self.state = 757
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 753
                        self.match(RustParser.COMMA)
                        self.state = 754
                        self.functionParam() 
                    self.state = 759
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 760
                    self.match(RustParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelfParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shorthandSelf(self):
            return self.getTypedRuleContext(RustParser.ShorthandSelfContext,0)


        def typedSelf(self):
            return self.getTypedRuleContext(RustParser.TypedSelfContext,0)


        def outerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.OuterAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.OuterAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_selfParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelfParam" ):
                listener.enterSelfParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelfParam" ):
                listener.exitSelfParam(self)




    def selfParam(self):

        localctx = RustParser.SelfParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_selfParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==122:
                self.state = 765
                self.outerAttribute()
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 771
                self.shorthandSelf()
                pass

            elif la_ == 2:
                self.state = 772
                self.typedSelf()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShorthandSelfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SELFVALUE(self):
            return self.getToken(RustParser.KW_SELFVALUE, 0)

        def AND(self):
            return self.getToken(RustParser.AND, 0)

        def KW_MUT(self):
            return self.getToken(RustParser.KW_MUT, 0)

        def lifetime(self):
            return self.getTypedRuleContext(RustParser.LifetimeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_shorthandSelf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShorthandSelf" ):
                listener.enterShorthandSelf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShorthandSelf" ):
                listener.exitShorthandSelf(self)




    def shorthandSelf(self):

        localctx = RustParser.ShorthandSelfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_shorthandSelf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 775
                self.match(RustParser.AND)
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 268435461) != 0):
                    self.state = 776
                    self.lifetime()




            self.state = 782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 781
                self.match(RustParser.KW_MUT)


            self.state = 784
            self.match(RustParser.KW_SELFVALUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedSelfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SELFVALUE(self):
            return self.getToken(RustParser.KW_SELFVALUE, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def KW_MUT(self):
            return self.getToken(RustParser.KW_MUT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_typedSelf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedSelf" ):
                listener.enterTypedSelf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedSelf" ):
                listener.exitTypedSelf(self)




    def typedSelf(self):

        localctx = RustParser.TypedSelfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_typedSelf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 786
                self.match(RustParser.KW_MUT)


            self.state = 789
            self.match(RustParser.KW_SELFVALUE)
            self.state = 790
            self.match(RustParser.COLON)
            self.state = 791
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionParamPattern(self):
            return self.getTypedRuleContext(RustParser.FunctionParamPatternContext,0)


        def DOTDOTDOT(self):
            return self.getToken(RustParser.DOTDOTDOT, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def outerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.OuterAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.OuterAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_functionParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionParam" ):
                listener.enterFunctionParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionParam" ):
                listener.exitFunctionParam(self)




    def functionParam(self):

        localctx = RustParser.FunctionParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_functionParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==122:
                self.state = 793
                self.outerAttribute()
                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 799
                self.functionParamPattern()
                pass

            elif la_ == 2:
                self.state = 800
                self.match(RustParser.DOTDOTDOT)
                pass

            elif la_ == 3:
                self.state = 801
                self.type_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionParamPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(RustParser.PatternContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def DOTDOTDOT(self):
            return self.getToken(RustParser.DOTDOTDOT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_functionParamPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionParamPattern" ):
                listener.enterFunctionParamPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionParamPattern" ):
                listener.exitFunctionParamPattern(self)




    def functionParamPattern(self):

        localctx = RustParser.FunctionParamPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_functionParamPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.pattern()
            self.state = 805
            self.match(RustParser.COLON)
            self.state = 808
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 8, 10, 11, 13, 24, 25, 28, 32, 38, 53, 54, 55, 56, 57, 58, 81, 84, 88, 89, 107, 111, 119, 124, 127, 129]:
                self.state = 806
                self.type_()
                pass
            elif token in [114]:
                self.state = 807
                self.match(RustParser.DOTDOTDOT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionReturnTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RARROW(self):
            return self.getToken(RustParser.RARROW, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionReturnType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionReturnType" ):
                listener.enterFunctionReturnType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionReturnType" ):
                listener.exitFunctionReturnType(self)




    def functionReturnType(self):

        localctx = RustParser.FunctionReturnTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_functionReturnType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.match(RustParser.RARROW)
            self.state = 811
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TYPE(self):
            return self.getToken(RustParser.KW_TYPE, 0)

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def SEMI(self):
            return self.getToken(RustParser.SEMI, 0)

        def genericParams(self):
            return self.getTypedRuleContext(RustParser.GenericParamsContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(RustParser.WhereClauseContext,0)


        def EQ(self):
            return self.getToken(RustParser.EQ, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)




    def typeAlias(self):

        localctx = RustParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(RustParser.KW_TYPE)
            self.state = 814
            self.identifier()
            self.state = 816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 815
                self.genericParams()


            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 818
                self.whereClause()


            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 821
                self.match(RustParser.EQ)
                self.state = 822
                self.type_()


            self.state = 825
            self.match(RustParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structStruct(self):
            return self.getTypedRuleContext(RustParser.StructStructContext,0)


        def tupleStruct(self):
            return self.getTypedRuleContext(RustParser.TupleStructContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_struct_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_" ):
                listener.enterStruct_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_" ):
                listener.exitStruct_(self)




    def struct_(self):

        localctx = RustParser.Struct_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_struct_)
        try:
            self.state = 829
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 827
                self.structStruct()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 828
                self.tupleStruct()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructStructContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_STRUCT(self):
            return self.getToken(RustParser.KW_STRUCT, 0)

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def LCURLYBRACE(self):
            return self.getToken(RustParser.LCURLYBRACE, 0)

        def RCURLYBRACE(self):
            return self.getToken(RustParser.RCURLYBRACE, 0)

        def SEMI(self):
            return self.getToken(RustParser.SEMI, 0)

        def genericParams(self):
            return self.getTypedRuleContext(RustParser.GenericParamsContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(RustParser.WhereClauseContext,0)


        def structFields(self):
            return self.getTypedRuleContext(RustParser.StructFieldsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structStruct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructStruct" ):
                listener.enterStructStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructStruct" ):
                listener.exitStructStruct(self)




    def structStruct(self):

        localctx = RustParser.StructStructContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_structStruct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(RustParser.KW_STRUCT)
            self.state = 832
            self.identifier()
            self.state = 834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 833
                self.genericParams()


            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 836
                self.whereClause()


            self.state = 845
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.state = 839
                self.match(RustParser.LCURLYBRACE)
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 450359962739146752) != 0) or _la==122:
                    self.state = 840
                    self.structFields()


                self.state = 843
                self.match(RustParser.RCURLYBRACE)
                pass
            elif token in [117]:
                self.state = 844
                self.match(RustParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleStructContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_STRUCT(self):
            return self.getToken(RustParser.KW_STRUCT, 0)

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(RustParser.SEMI, 0)

        def genericParams(self):
            return self.getTypedRuleContext(RustParser.GenericParamsContext,0)


        def tupleFields(self):
            return self.getTypedRuleContext(RustParser.TupleFieldsContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(RustParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_tupleStruct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleStruct" ):
                listener.enterTupleStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleStruct" ):
                listener.exitTupleStruct(self)




    def tupleStruct(self):

        localctx = RustParser.TupleStructContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_tupleStruct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            self.match(RustParser.KW_STRUCT)
            self.state = 848
            self.identifier()
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 849
                self.genericParams()


            self.state = 852
            self.match(RustParser.LPAREN)
            self.state = 854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 567453832542432544) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 363114855924105) != 0):
                self.state = 853
                self.tupleFields()


            self.state = 856
            self.match(RustParser.RPAREN)
            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 857
                self.whereClause()


            self.state = 860
            self.match(RustParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_structFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructFields" ):
                listener.enterStructFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructFields" ):
                listener.exitStructFields(self)




    def structFields(self):

        localctx = RustParser.StructFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_structFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.structField()
            self.state = 867
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 863
                    self.match(RustParser.COMMA)
                    self.state = 864
                    self.structField() 
                self.state = 869
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 870
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def outerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.OuterAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.OuterAttributeContext,i)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)




    def structField(self):

        localctx = RustParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_structField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==122:
                self.state = 873
                self.outerAttribute()
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 879
                self.visibility()


            self.state = 882
            self.identifier()
            self.state = 883
            self.match(RustParser.COLON)
            self.state = 884
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tupleField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TupleFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.TupleFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_tupleFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleFields" ):
                listener.enterTupleFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleFields" ):
                listener.exitTupleFields(self)




    def tupleFields(self):

        localctx = RustParser.TupleFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_tupleFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.tupleField()
            self.state = 891
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 887
                    self.match(RustParser.COMMA)
                    self.state = 888
                    self.tupleField() 
                self.state = 893
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

            self.state = 895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 894
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def outerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.OuterAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.OuterAttributeContext,i)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_tupleField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleField" ):
                listener.enterTupleField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleField" ):
                listener.exitTupleField(self)




    def tupleField(self):

        localctx = RustParser.TupleFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_tupleField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==122:
                self.state = 897
                self.outerAttribute()
                self.state = 902
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 903
                self.visibility()


            self.state = 906
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ENUM(self):
            return self.getToken(RustParser.KW_ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def LCURLYBRACE(self):
            return self.getToken(RustParser.LCURLYBRACE, 0)

        def RCURLYBRACE(self):
            return self.getToken(RustParser.RCURLYBRACE, 0)

        def genericParams(self):
            return self.getTypedRuleContext(RustParser.GenericParamsContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(RustParser.WhereClauseContext,0)


        def enumItems(self):
            return self.getTypedRuleContext(RustParser.EnumItemsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_enumeration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeration" ):
                listener.enterEnumeration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeration" ):
                listener.exitEnumeration(self)




    def enumeration(self):

        localctx = RustParser.EnumerationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_enumeration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self.match(RustParser.KW_ENUM)
            self.state = 909
            self.identifier()
            self.state = 911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 910
                self.genericParams()


            self.state = 914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 913
                self.whereClause()


            self.state = 916
            self.match(RustParser.LCURLYBRACE)
            self.state = 918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 450359962739146752) != 0) or _la==122:
                self.state = 917
                self.enumItems()


            self.state = 920
            self.match(RustParser.RCURLYBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.EnumItemContext)
            else:
                return self.getTypedRuleContext(RustParser.EnumItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_enumItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumItems" ):
                listener.enterEnumItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumItems" ):
                listener.exitEnumItems(self)




    def enumItems(self):

        localctx = RustParser.EnumItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_enumItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.enumItem()
            self.state = 927
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 923
                    self.match(RustParser.COMMA)
                    self.state = 924
                    self.enumItem() 
                self.state = 929
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

            self.state = 931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 930
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def outerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.OuterAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.OuterAttributeContext,i)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def enumItemTuple(self):
            return self.getTypedRuleContext(RustParser.EnumItemTupleContext,0)


        def enumItemStruct(self):
            return self.getTypedRuleContext(RustParser.EnumItemStructContext,0)


        def enumItemDiscriminant(self):
            return self.getTypedRuleContext(RustParser.EnumItemDiscriminantContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_enumItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumItem" ):
                listener.enterEnumItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumItem" ):
                listener.exitEnumItem(self)




    def enumItem(self):

        localctx = RustParser.EnumItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_enumItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==122:
                self.state = 933
                self.outerAttribute()
                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 939
                self.visibility()


            self.state = 942
            self.identifier()
            self.state = 946
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [129]:
                self.state = 943
                self.enumItemTuple()
                pass
            elif token in [125]:
                self.state = 944
                self.enumItemStruct()
                pass
            elif token in [103]:
                self.state = 945
                self.enumItemDiscriminant()
                pass
            elif token in [116, 126]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumItemTupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def tupleFields(self):
            return self.getTypedRuleContext(RustParser.TupleFieldsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_enumItemTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumItemTuple" ):
                listener.enterEnumItemTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumItemTuple" ):
                listener.exitEnumItemTuple(self)




    def enumItemTuple(self):

        localctx = RustParser.EnumItemTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_enumItemTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.match(RustParser.LPAREN)
            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 567453832542432544) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 363114855924105) != 0):
                self.state = 949
                self.tupleFields()


            self.state = 952
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumItemStructContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLYBRACE(self):
            return self.getToken(RustParser.LCURLYBRACE, 0)

        def RCURLYBRACE(self):
            return self.getToken(RustParser.RCURLYBRACE, 0)

        def structFields(self):
            return self.getTypedRuleContext(RustParser.StructFieldsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_enumItemStruct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumItemStruct" ):
                listener.enterEnumItemStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumItemStruct" ):
                listener.exitEnumItemStruct(self)




    def enumItemStruct(self):

        localctx = RustParser.EnumItemStructContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_enumItemStruct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.match(RustParser.LCURLYBRACE)
            self.state = 956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 450359962739146752) != 0) or _la==122:
                self.state = 955
                self.structFields()


            self.state = 958
            self.match(RustParser.RCURLYBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumItemDiscriminantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(RustParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_enumItemDiscriminant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumItemDiscriminant" ):
                listener.enterEnumItemDiscriminant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumItemDiscriminant" ):
                listener.exitEnumItemDiscriminant(self)




    def enumItemDiscriminant(self):

        localctx = RustParser.EnumItemDiscriminantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_enumItemDiscriminant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.match(RustParser.EQ)
            self.state = 961
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Union_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNION(self):
            return self.getToken(RustParser.KW_UNION, 0)

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def LCURLYBRACE(self):
            return self.getToken(RustParser.LCURLYBRACE, 0)

        def structFields(self):
            return self.getTypedRuleContext(RustParser.StructFieldsContext,0)


        def RCURLYBRACE(self):
            return self.getToken(RustParser.RCURLYBRACE, 0)

        def genericParams(self):
            return self.getTypedRuleContext(RustParser.GenericParamsContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(RustParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_union_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_" ):
                listener.enterUnion_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_" ):
                listener.exitUnion_(self)




    def union_(self):

        localctx = RustParser.Union_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_union_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.match(RustParser.KW_UNION)
            self.state = 964
            self.identifier()
            self.state = 966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 965
                self.genericParams()


            self.state = 969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 968
                self.whereClause()


            self.state = 971
            self.match(RustParser.LCURLYBRACE)
            self.state = 972
            self.structFields()
            self.state = 973
            self.match(RustParser.RCURLYBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONST(self):
            return self.getToken(RustParser.KW_CONST, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def SEMI(self):
            return self.getToken(RustParser.SEMI, 0)

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def EQ(self):
            return self.getToken(RustParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_constantItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantItem" ):
                listener.enterConstantItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantItem" ):
                listener.exitConstantItem(self)




    def constantItem(self):

        localctx = RustParser.ConstantItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_constantItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.match(RustParser.KW_CONST)
            self.state = 978
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 57, 58]:
                self.state = 976
                self.identifier()
                pass
            elif token in [111]:
                self.state = 977
                self.match(RustParser.UNDERSCORE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 980
            self.match(RustParser.COLON)
            self.state = 981
            self.type_()
            self.state = 984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 982
                self.match(RustParser.EQ)
                self.state = 983
                self.expression(0)


            self.state = 986
            self.match(RustParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_STATIC(self):
            return self.getToken(RustParser.KW_STATIC, 0)

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def SEMI(self):
            return self.getToken(RustParser.SEMI, 0)

        def KW_MUT(self):
            return self.getToken(RustParser.KW_MUT, 0)

        def EQ(self):
            return self.getToken(RustParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_staticItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticItem" ):
                listener.enterStaticItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticItem" ):
                listener.exitStaticItem(self)




    def staticItem(self):

        localctx = RustParser.StaticItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_staticItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.match(RustParser.KW_STATIC)
            self.state = 990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 989
                self.match(RustParser.KW_MUT)


            self.state = 992
            self.identifier()
            self.state = 993
            self.match(RustParser.COLON)
            self.state = 994
            self.type_()
            self.state = 997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 995
                self.match(RustParser.EQ)
                self.state = 996
                self.expression(0)


            self.state = 999
            self.match(RustParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trait_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TRAIT(self):
            return self.getToken(RustParser.KW_TRAIT, 0)

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def LCURLYBRACE(self):
            return self.getToken(RustParser.LCURLYBRACE, 0)

        def RCURLYBRACE(self):
            return self.getToken(RustParser.RCURLYBRACE, 0)

        def KW_UNSAFE(self):
            return self.getToken(RustParser.KW_UNSAFE, 0)

        def genericParams(self):
            return self.getTypedRuleContext(RustParser.GenericParamsContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def whereClause(self):
            return self.getTypedRuleContext(RustParser.WhereClauseContext,0)


        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def associatedItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AssociatedItemContext)
            else:
                return self.getTypedRuleContext(RustParser.AssociatedItemContext,i)


        def typeParamBounds(self):
            return self.getTypedRuleContext(RustParser.TypeParamBoundsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_trait_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrait_" ):
                listener.enterTrait_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrait_" ):
                listener.exitTrait_(self)




    def trait_(self):

        localctx = RustParser.Trait_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_trait_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 1001
                self.match(RustParser.KW_UNSAFE)


            self.state = 1004
            self.match(RustParser.KW_TRAIT)
            self.state = 1005
            self.identifier()
            self.state = 1007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 1006
                self.genericParams()


            self.state = 1013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 1009
                self.match(RustParser.COLON)
                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 567453553367451680) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 290545947639809) != 0):
                    self.state = 1010
                    self.typeParamBounds()




            self.state = 1016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 1015
                self.whereClause()


            self.state = 1018
            self.match(RustParser.LCURLYBRACE)
            self.state = 1022
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1019
                    self.innerAttribute() 
                self.state = 1024
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

            self.state = 1028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 522417632224216360) != 0) or _la==119 or _la==122:
                self.state = 1025
                self.associatedItem()
                self.state = 1030
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1031
            self.match(RustParser.RCURLYBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplementationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inherentImpl(self):
            return self.getTypedRuleContext(RustParser.InherentImplContext,0)


        def traitImpl(self):
            return self.getTypedRuleContext(RustParser.TraitImplContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_implementation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementation" ):
                listener.enterImplementation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementation" ):
                listener.exitImplementation(self)




    def implementation(self):

        localctx = RustParser.ImplementationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_implementation)
        try:
            self.state = 1035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1033
                self.inherentImpl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1034
                self.traitImpl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InherentImplContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IMPL(self):
            return self.getToken(RustParser.KW_IMPL, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def LCURLYBRACE(self):
            return self.getToken(RustParser.LCURLYBRACE, 0)

        def RCURLYBRACE(self):
            return self.getToken(RustParser.RCURLYBRACE, 0)

        def genericParams(self):
            return self.getTypedRuleContext(RustParser.GenericParamsContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(RustParser.WhereClauseContext,0)


        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def associatedItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AssociatedItemContext)
            else:
                return self.getTypedRuleContext(RustParser.AssociatedItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_inherentImpl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInherentImpl" ):
                listener.enterInherentImpl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInherentImpl" ):
                listener.exitInherentImpl(self)




    def inherentImpl(self):

        localctx = RustParser.InherentImplContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_inherentImpl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.match(RustParser.KW_IMPL)
            self.state = 1039
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 1038
                self.genericParams()


            self.state = 1041
            self.type_()
            self.state = 1043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 1042
                self.whereClause()


            self.state = 1045
            self.match(RustParser.LCURLYBRACE)
            self.state = 1049
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1046
                    self.innerAttribute() 
                self.state = 1051
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

            self.state = 1055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 522417632224216360) != 0) or _la==119 or _la==122:
                self.state = 1052
                self.associatedItem()
                self.state = 1057
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1058
            self.match(RustParser.RCURLYBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitImplContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IMPL(self):
            return self.getToken(RustParser.KW_IMPL, 0)

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def KW_FOR(self):
            return self.getToken(RustParser.KW_FOR, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def LCURLYBRACE(self):
            return self.getToken(RustParser.LCURLYBRACE, 0)

        def RCURLYBRACE(self):
            return self.getToken(RustParser.RCURLYBRACE, 0)

        def KW_UNSAFE(self):
            return self.getToken(RustParser.KW_UNSAFE, 0)

        def genericParams(self):
            return self.getTypedRuleContext(RustParser.GenericParamsContext,0)


        def NOT(self):
            return self.getToken(RustParser.NOT, 0)

        def whereClause(self):
            return self.getTypedRuleContext(RustParser.WhereClauseContext,0)


        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def associatedItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AssociatedItemContext)
            else:
                return self.getTypedRuleContext(RustParser.AssociatedItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_traitImpl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitImpl" ):
                listener.enterTraitImpl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitImpl" ):
                listener.exitTraitImpl(self)




    def traitImpl(self):

        localctx = RustParser.TraitImplContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_traitImpl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 1060
                self.match(RustParser.KW_UNSAFE)


            self.state = 1063
            self.match(RustParser.KW_IMPL)
            self.state = 1065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 1064
                self.genericParams()


            self.state = 1068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 1067
                self.match(RustParser.NOT)


            self.state = 1070
            self.typePath()
            self.state = 1071
            self.match(RustParser.KW_FOR)
            self.state = 1072
            self.type_()
            self.state = 1074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 1073
                self.whereClause()


            self.state = 1076
            self.match(RustParser.LCURLYBRACE)
            self.state = 1080
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,123,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1077
                    self.innerAttribute() 
                self.state = 1082
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

            self.state = 1086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 522417632224216360) != 0) or _la==119 or _la==122:
                self.state = 1083
                self.associatedItem()
                self.state = 1088
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1089
            self.match(RustParser.RCURLYBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXTERN(self):
            return self.getToken(RustParser.KW_EXTERN, 0)

        def LCURLYBRACE(self):
            return self.getToken(RustParser.LCURLYBRACE, 0)

        def RCURLYBRACE(self):
            return self.getToken(RustParser.RCURLYBRACE, 0)

        def KW_UNSAFE(self):
            return self.getToken(RustParser.KW_UNSAFE, 0)

        def abi(self):
            return self.getTypedRuleContext(RustParser.AbiContext,0)


        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def externalItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternalItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternalItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_externBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternBlock" ):
                listener.enterExternBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternBlock" ):
                listener.exitExternBlock(self)




    def externBlock(self):

        localctx = RustParser.ExternBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_externBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 1091
                self.match(RustParser.KW_UNSAFE)


            self.state = 1094
            self.match(RustParser.KW_EXTERN)
            self.state = 1096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70 or _la==71:
                self.state = 1095
                self.abi()


            self.state = 1098
            self.match(RustParser.LCURLYBRACE)
            self.state = 1102
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1099
                    self.innerAttribute() 
                self.state = 1104
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

            self.state = 1108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 522417630143841576) != 0) or _la==119 or _la==122:
                self.state = 1105
                self.externalItem()
                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1111
            self.match(RustParser.RCURLYBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroInvocationSemi(self):
            return self.getTypedRuleContext(RustParser.MacroInvocationSemiContext,0)


        def outerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.OuterAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.OuterAttributeContext,i)


        def staticItem(self):
            return self.getTypedRuleContext(RustParser.StaticItemContext,0)


        def function_(self):
            return self.getTypedRuleContext(RustParser.Function_Context,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externalItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalItem" ):
                listener.enterExternalItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalItem" ):
                listener.exitExternalItem(self)




    def externalItem(self):

        localctx = RustParser.ExternalItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_externalItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==122:
                self.state = 1113
                self.outerAttribute()
                self.state = 1118
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1127
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 24, 28, 54, 56, 57, 58, 119]:
                self.state = 1119
                self.macroInvocationSemi()
                pass
            elif token in [3, 8, 10, 21, 26, 32, 36]:
                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==21:
                    self.state = 1120
                    self.visibility()


                self.state = 1125
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [26]:
                    self.state = 1123
                    self.staticItem()
                    pass
                elif token in [3, 8, 10, 32, 36]:
                    self.state = 1124
                    self.function_()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(RustParser.LT, 0)

        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def genericParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.GenericParamContext)
            else:
                return self.getTypedRuleContext(RustParser.GenericParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_genericParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericParams" ):
                listener.enterGenericParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericParams" ):
                listener.exitGenericParams(self)




    def genericParams(self):

        localctx = RustParser.GenericParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_genericParams)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            self.match(RustParser.LT)
            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 450359962737049608) != 0) or _la==81 or _la==122:
                self.state = 1135
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1130
                        self.genericParam()
                        self.state = 1131
                        self.match(RustParser.COMMA) 
                    self.state = 1137
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

                self.state = 1138
                self.genericParam()
                self.state = 1140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 1139
                    self.match(RustParser.COMMA)




            self.state = 1144
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lifetimeParam(self):
            return self.getTypedRuleContext(RustParser.LifetimeParamContext,0)


        def typeParam(self):
            return self.getTypedRuleContext(RustParser.TypeParamContext,0)


        def constParam(self):
            return self.getTypedRuleContext(RustParser.ConstParamContext,0)


        def outerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.OuterAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.OuterAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_genericParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericParam" ):
                listener.enterGenericParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericParam" ):
                listener.exitGenericParam(self)




    def genericParam(self):

        localctx = RustParser.GenericParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_genericParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1149
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1146
                    self.outerAttribute() 
                self.state = 1151
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

            self.state = 1155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 1152
                self.lifetimeParam()
                pass

            elif la_ == 2:
                self.state = 1153
                self.typeParam()
                pass

            elif la_ == 3:
                self.state = 1154
                self.constParam()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LifetimeParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIFETIME_OR_LABEL(self):
            return self.getToken(RustParser.LIFETIME_OR_LABEL, 0)

        def outerAttribute(self):
            return self.getTypedRuleContext(RustParser.OuterAttributeContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def lifetimeBounds(self):
            return self.getTypedRuleContext(RustParser.LifetimeBoundsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_lifetimeParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLifetimeParam" ):
                listener.enterLifetimeParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLifetimeParam" ):
                listener.exitLifetimeParam(self)




    def lifetimeParam(self):

        localctx = RustParser.LifetimeParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_lifetimeParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 1157
                self.outerAttribute()


            self.state = 1160
            self.match(RustParser.LIFETIME_OR_LABEL)
            self.state = 1163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 1161
                self.match(RustParser.COLON)
                self.state = 1162
                self.lifetimeBounds()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def outerAttribute(self):
            return self.getTypedRuleContext(RustParser.OuterAttributeContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def EQ(self):
            return self.getToken(RustParser.EQ, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def typeParamBounds(self):
            return self.getTypedRuleContext(RustParser.TypeParamBoundsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParam" ):
                listener.enterTypeParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParam" ):
                listener.exitTypeParam(self)




    def typeParam(self):

        localctx = RustParser.TypeParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_typeParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 1165
                self.outerAttribute()


            self.state = 1168
            self.identifier()
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 1169
                self.match(RustParser.COLON)
                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 567453553367451680) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 290545947639809) != 0):
                    self.state = 1170
                    self.typeParamBounds()




            self.state = 1177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 1175
                self.match(RustParser.EQ)
                self.state = 1176
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONST(self):
            return self.getToken(RustParser.KW_CONST, 0)

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def getRuleIndex(self):
            return RustParser.RULE_constParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstParam" ):
                listener.enterConstParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstParam" ):
                listener.exitConstParam(self)




    def constParam(self):

        localctx = RustParser.ConstParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_constParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179
            self.match(RustParser.KW_CONST)
            self.state = 1180
            self.identifier()
            self.state = 1181
            self.match(RustParser.COLON)
            self.state = 1182
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHERE(self):
            return self.getToken(RustParser.KW_WHERE, 0)

        def whereClauseItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.WhereClauseItemContext)
            else:
                return self.getTypedRuleContext(RustParser.WhereClauseItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)




    def whereClause(self):

        localctx = RustParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_whereClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.match(RustParser.KW_WHERE)
            self.state = 1190
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1185
                    self.whereClauseItem()
                    self.state = 1186
                    self.match(RustParser.COMMA) 
                self.state = 1192
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

            self.state = 1194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 567453832540335392) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 360915832668553) != 0):
                self.state = 1193
                self.whereClauseItem()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lifetimeWhereClauseItem(self):
            return self.getTypedRuleContext(RustParser.LifetimeWhereClauseItemContext,0)


        def typeBoundWhereClauseItem(self):
            return self.getTypedRuleContext(RustParser.TypeBoundWhereClauseItemContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_whereClauseItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClauseItem" ):
                listener.enterWhereClauseItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClauseItem" ):
                listener.exitWhereClauseItem(self)




    def whereClauseItem(self):

        localctx = RustParser.WhereClauseItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_whereClauseItem)
        try:
            self.state = 1198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1196
                self.lifetimeWhereClauseItem()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1197
                self.typeBoundWhereClauseItem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LifetimeWhereClauseItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lifetime(self):
            return self.getTypedRuleContext(RustParser.LifetimeContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def lifetimeBounds(self):
            return self.getTypedRuleContext(RustParser.LifetimeBoundsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_lifetimeWhereClauseItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLifetimeWhereClauseItem" ):
                listener.enterLifetimeWhereClauseItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLifetimeWhereClauseItem" ):
                listener.exitLifetimeWhereClauseItem(self)




    def lifetimeWhereClauseItem(self):

        localctx = RustParser.LifetimeWhereClauseItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_lifetimeWhereClauseItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            self.lifetime()
            self.state = 1201
            self.match(RustParser.COLON)
            self.state = 1202
            self.lifetimeBounds()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeBoundWhereClauseItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def forLifetimes(self):
            return self.getTypedRuleContext(RustParser.ForLifetimesContext,0)


        def typeParamBounds(self):
            return self.getTypedRuleContext(RustParser.TypeParamBoundsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeBoundWhereClauseItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBoundWhereClauseItem" ):
                listener.enterTypeBoundWhereClauseItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBoundWhereClauseItem" ):
                listener.exitTypeBoundWhereClauseItem(self)




    def typeBoundWhereClauseItem(self):

        localctx = RustParser.TypeBoundWhereClauseItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_typeBoundWhereClauseItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1204
                self.forLifetimes()


            self.state = 1207
            self.type_()
            self.state = 1208
            self.match(RustParser.COLON)
            self.state = 1210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 567453553367451680) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 290545947639809) != 0):
                self.state = 1209
                self.typeParamBounds()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForLifetimesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FOR(self):
            return self.getToken(RustParser.KW_FOR, 0)

        def genericParams(self):
            return self.getTypedRuleContext(RustParser.GenericParamsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_forLifetimes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForLifetimes" ):
                listener.enterForLifetimes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForLifetimes" ):
                listener.exitForLifetimes(self)




    def forLifetimes(self):

        localctx = RustParser.ForLifetimesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_forLifetimes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1212
            self.match(RustParser.KW_FOR)
            self.state = 1213
            self.genericParams()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssociatedItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroInvocationSemi(self):
            return self.getTypedRuleContext(RustParser.MacroInvocationSemiContext,0)


        def outerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.OuterAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.OuterAttributeContext,i)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def constantItem(self):
            return self.getTypedRuleContext(RustParser.ConstantItemContext,0)


        def function_(self):
            return self.getTypedRuleContext(RustParser.Function_Context,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_associatedItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssociatedItem" ):
                listener.enterAssociatedItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssociatedItem" ):
                listener.exitAssociatedItem(self)




    def associatedItem(self):

        localctx = RustParser.AssociatedItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_associatedItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==122:
                self.state = 1215
                self.outerAttribute()
                self.state = 1220
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1230
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 24, 28, 54, 56, 57, 58, 119]:
                self.state = 1221
                self.macroInvocationSemi()
                pass
            elif token in [3, 8, 10, 21, 31, 32, 36]:
                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==21:
                    self.state = 1222
                    self.visibility()


                self.state = 1228
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                if la_ == 1:
                    self.state = 1225
                    self.typeAlias()
                    pass

                elif la_ == 2:
                    self.state = 1226
                    self.constantItem()
                    pass

                elif la_ == 3:
                    self.state = 1227
                    self.function_()
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def NOT(self):
            return self.getToken(RustParser.NOT, 0)

        def LSQUAREBRACKET(self):
            return self.getToken(RustParser.LSQUAREBRACKET, 0)

        def attr(self):
            return self.getTypedRuleContext(RustParser.AttrContext,0)


        def RSQUAREBRACKET(self):
            return self.getToken(RustParser.RSQUAREBRACKET, 0)

        def getRuleIndex(self):
            return RustParser.RULE_innerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerAttribute" ):
                listener.enterInnerAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerAttribute" ):
                listener.exitInnerAttribute(self)




    def innerAttribute(self):

        localctx = RustParser.InnerAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_innerAttribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            self.match(RustParser.POUND)
            self.state = 1233
            self.match(RustParser.NOT)
            self.state = 1234
            self.match(RustParser.LSQUAREBRACKET)
            self.state = 1235
            self.attr()
            self.state = 1236
            self.match(RustParser.RSQUAREBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OuterAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def LSQUAREBRACKET(self):
            return self.getToken(RustParser.LSQUAREBRACKET, 0)

        def attr(self):
            return self.getTypedRuleContext(RustParser.AttrContext,0)


        def RSQUAREBRACKET(self):
            return self.getToken(RustParser.RSQUAREBRACKET, 0)

        def getRuleIndex(self):
            return RustParser.RULE_outerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuterAttribute" ):
                listener.enterOuterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuterAttribute" ):
                listener.exitOuterAttribute(self)




    def outerAttribute(self):

        localctx = RustParser.OuterAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_outerAttribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1238
            self.match(RustParser.POUND)
            self.state = 1239
            self.match(RustParser.LSQUAREBRACKET)
            self.state = 1240
            self.attr()
            self.state = 1241
            self.match(RustParser.RSQUAREBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplePath(self):
            return self.getTypedRuleContext(RustParser.SimplePathContext,0)


        def attrInput(self):
            return self.getTypedRuleContext(RustParser.AttrInputContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr" ):
                listener.enterAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr" ):
                listener.exitAttr(self)




    def attr(self):

        localctx = RustParser.AttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_attr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1243
            self.simplePath()
            self.state = 1245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & 88080385) != 0):
                self.state = 1244
                self.attrInput()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrInputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delimTokenTree(self):
            return self.getTypedRuleContext(RustParser.DelimTokenTreeContext,0)


        def EQ(self):
            return self.getToken(RustParser.EQ, 0)

        def literalExpression(self):
            return self.getTypedRuleContext(RustParser.LiteralExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_attrInput

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrInput" ):
                listener.enterAttrInput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrInput" ):
                listener.exitAttrInput(self)




    def attrInput(self):

        localctx = RustParser.AttrInputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_attrInput)
        try:
            self.state = 1250
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125, 127, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1247
                self.delimTokenTree()
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1248
                self.match(RustParser.EQ)
                self.state = 1249
                self.literalExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(RustParser.SEMI, 0)

        def item(self):
            return self.getTypedRuleContext(RustParser.ItemContext,0)


        def letStatement(self):
            return self.getTypedRuleContext(RustParser.LetStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(RustParser.ExpressionStatementContext,0)


        def macroInvocationSemi(self):
            return self.getTypedRuleContext(RustParser.MacroInvocationSemiContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = RustParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_statement)
        try:
            self.state = 1257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1252
                self.match(RustParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1253
                self.item()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1254
                self.letStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1255
                self.expressionStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1256
                self.macroInvocationSemi()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LET(self):
            return self.getToken(RustParser.KW_LET, 0)

        def patternNoTopAlt(self):
            return self.getTypedRuleContext(RustParser.PatternNoTopAltContext,0)


        def SEMI(self):
            return self.getToken(RustParser.SEMI, 0)

        def outerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.OuterAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.OuterAttributeContext,i)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def EQ(self):
            return self.getToken(RustParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_letStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStatement" ):
                listener.enterLetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStatement" ):
                listener.exitLetStatement(self)




    def letStatement(self):

        localctx = RustParser.LetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_letStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==122:
                self.state = 1259
                self.outerAttribute()
                self.state = 1264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1265
            self.match(RustParser.KW_LET)
            self.state = 1266
            self.patternNoTopAlt()
            self.state = 1269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 1267
                self.match(RustParser.COLON)
                self.state = 1268
                self.type_()


            self.state = 1273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 1271
                self.match(RustParser.EQ)
                self.state = 1272
                self.expression(0)


            self.state = 1275
            self.match(RustParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(RustParser.SEMI, 0)

        def expressionWithBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionWithBlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = RustParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_expressionStatement)
        try:
            self.state = 1284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1277
                self.expression(0)
                self.state = 1278
                self.match(RustParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1280
                self.expressionWithBlock()
                self.state = 1282
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1281
                    self.match(RustParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TypeCastExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)

        def KW_AS(self):
            return self.getToken(RustParser.KW_AS, 0)
        def typeNoBounds(self):
            return self.getTypedRuleContext(RustParser.TypeNoBoundsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeCastExpression" ):
                listener.enterTypeCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeCastExpression" ):
                listener.exitTypeCastExpression(self)


    class PathExpression_Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pathExpression(self):
            return self.getTypedRuleContext(RustParser.PathExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathExpression_" ):
                listener.enterPathExpression_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathExpression_" ):
                listener.exitPathExpression_(self)


    class TupleExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)
        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)

        def tupleElements(self):
            return self.getTypedRuleContext(RustParser.TupleElementsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)


    class IndexExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)

        def LSQUAREBRACKET(self):
            return self.getToken(RustParser.LSQUAREBRACKET, 0)
        def RSQUAREBRACKET(self):
            return self.getToken(RustParser.RSQUAREBRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExpression" ):
                listener.enterIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExpression" ):
                listener.exitIndexExpression(self)


    class RangeExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOTDOT(self):
            return self.getToken(RustParser.DOTDOT, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)

        def DOTDOTEQ(self):
            return self.getToken(RustParser.DOTDOTEQ, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeExpression" ):
                listener.enterRangeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeExpression" ):
                listener.exitRangeExpression(self)


    class MacroInvocationAsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def macroInvocation(self):
            return self.getTypedRuleContext(RustParser.MacroInvocationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroInvocationAsExpression" ):
                listener.enterMacroInvocationAsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroInvocationAsExpression" ):
                listener.exitMacroInvocationAsExpression(self)


    class ReturnExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KW_RETURN(self):
            return self.getToken(RustParser.KW_RETURN, 0)
        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnExpression" ):
                listener.enterReturnExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnExpression" ):
                listener.exitReturnExpression(self)


    class AwaitExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)

        def DOT(self):
            return self.getToken(RustParser.DOT, 0)
        def KW_AWAIT(self):
            return self.getToken(RustParser.KW_AWAIT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAwaitExpression" ):
                listener.enterAwaitExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAwaitExpression" ):
                listener.exitAwaitExpression(self)


    class ErrorPropagationExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)

        def QUESTION(self):
            return self.getToken(RustParser.QUESTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorPropagationExpression" ):
                listener.enterErrorPropagationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorPropagationExpression" ):
                listener.exitErrorPropagationExpression(self)


    class ContinueExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KW_CONTINUE(self):
            return self.getToken(RustParser.KW_CONTINUE, 0)
        def LIFETIME_OR_LABEL(self):
            return self.getToken(RustParser.LIFETIME_OR_LABEL, 0)
        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueExpression" ):
                listener.enterContinueExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueExpression" ):
                listener.exitContinueExpression(self)


    class AssignmentExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)

        def EQ(self):
            return self.getToken(RustParser.EQ, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)


    class MethodCallExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)

        def DOT(self):
            return self.getToken(RustParser.DOT, 0)
        def pathExprSegment(self):
            return self.getTypedRuleContext(RustParser.PathExprSegmentContext,0)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)
        def callParams(self):
            return self.getTypedRuleContext(RustParser.CallParamsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCallExpression" ):
                listener.enterMethodCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCallExpression" ):
                listener.exitMethodCallExpression(self)


    class LiteralExpression_Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literalExpression(self):
            return self.getTypedRuleContext(RustParser.LiteralExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression_" ):
                listener.enterLiteralExpression_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression_" ):
                listener.exitLiteralExpression_(self)


    class StructExpression_Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def structExpression(self):
            return self.getTypedRuleContext(RustParser.StructExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructExpression_" ):
                listener.enterStructExpression_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructExpression_" ):
                listener.exitStructExpression_(self)


    class TupleIndexingExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)

        def DOT(self):
            return self.getToken(RustParser.DOT, 0)
        def tupleIndex(self):
            return self.getTypedRuleContext(RustParser.TupleIndexContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleIndexingExpression" ):
                listener.enterTupleIndexingExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleIndexingExpression" ):
                listener.exitTupleIndexingExpression(self)


    class NegationExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)

        def MINUS(self):
            return self.getToken(RustParser.MINUS, 0)
        def NOT(self):
            return self.getToken(RustParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNegationExpression" ):
                listener.enterNegationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNegationExpression" ):
                listener.exitNegationExpression(self)


    class CallExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)
        def callParams(self):
            return self.getTypedRuleContext(RustParser.CallParamsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallExpression" ):
                listener.enterCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallExpression" ):
                listener.exitCallExpression(self)


    class LazyBooleanExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)

        def ANDAND(self):
            return self.getToken(RustParser.ANDAND, 0)
        def OROR(self):
            return self.getToken(RustParser.OROR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLazyBooleanExpression" ):
                listener.enterLazyBooleanExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLazyBooleanExpression" ):
                listener.exitLazyBooleanExpression(self)


    class DereferenceExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STAR(self):
            return self.getToken(RustParser.STAR, 0)
        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereferenceExpression" ):
                listener.enterDereferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereferenceExpression" ):
                listener.exitDereferenceExpression(self)


    class ExpressionWithBlock_Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionWithBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionWithBlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionWithBlock_" ):
                listener.enterExpressionWithBlock_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionWithBlock_" ):
                listener.exitExpressionWithBlock_(self)


    class GroupedExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)
        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupedExpression" ):
                listener.enterGroupedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupedExpression" ):
                listener.exitGroupedExpression(self)


    class BreakExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KW_BREAK(self):
            return self.getToken(RustParser.KW_BREAK, 0)
        def LIFETIME_OR_LABEL(self):
            return self.getToken(RustParser.LIFETIME_OR_LABEL, 0)
        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakExpression" ):
                listener.enterBreakExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakExpression" ):
                listener.exitBreakExpression(self)


    class ArithmeticOrLogicalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)

        def STAR(self):
            return self.getToken(RustParser.STAR, 0)
        def SLASH(self):
            return self.getToken(RustParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(RustParser.PERCENT, 0)
        def PLUS(self):
            return self.getToken(RustParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(RustParser.MINUS, 0)
        def shl(self):
            return self.getTypedRuleContext(RustParser.ShlContext,0)

        def shr(self):
            return self.getTypedRuleContext(RustParser.ShrContext,0)

        def AND(self):
            return self.getToken(RustParser.AND, 0)
        def CARET(self):
            return self.getToken(RustParser.CARET, 0)
        def OR(self):
            return self.getToken(RustParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticOrLogicalExpression" ):
                listener.enterArithmeticOrLogicalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticOrLogicalExpression" ):
                listener.exitArithmeticOrLogicalExpression(self)


    class FieldExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)

        def DOT(self):
            return self.getToken(RustParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldExpression" ):
                listener.enterFieldExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldExpression" ):
                listener.exitFieldExpression(self)


    class EnumerationVariantExpression_Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enumerationVariantExpression(self):
            return self.getTypedRuleContext(RustParser.EnumerationVariantExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationVariantExpression_" ):
                listener.enterEnumerationVariantExpression_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationVariantExpression_" ):
                listener.exitEnumerationVariantExpression_(self)


    class ComparisonExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)

        def comparisonOperator(self):
            return self.getTypedRuleContext(RustParser.ComparisonOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonExpression" ):
                listener.enterComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonExpression" ):
                listener.exitComparisonExpression(self)


    class AttributedExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)

        def outerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.OuterAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.OuterAttributeContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributedExpression" ):
                listener.enterAttributedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributedExpression" ):
                listener.exitAttributedExpression(self)


    class BorrowExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)

        def AND(self):
            return self.getToken(RustParser.AND, 0)
        def ANDAND(self):
            return self.getToken(RustParser.ANDAND, 0)
        def KW_MUT(self):
            return self.getToken(RustParser.KW_MUT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorrowExpression" ):
                listener.enterBorrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorrowExpression" ):
                listener.exitBorrowExpression(self)


    class CompoundAssignmentExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)

        def compoundAssignOperator(self):
            return self.getTypedRuleContext(RustParser.CompoundAssignOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundAssignmentExpression" ):
                listener.enterCompoundAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundAssignmentExpression" ):
                listener.exitCompoundAssignmentExpression(self)


    class ClosureExpression_Context(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def closureExpression(self):
            return self.getTypedRuleContext(RustParser.ClosureExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosureExpression_" ):
                listener.enterClosureExpression_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosureExpression_" ):
                listener.exitClosureExpression_(self)


    class ArrayExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LSQUAREBRACKET(self):
            return self.getToken(RustParser.LSQUAREBRACKET, 0)
        def RSQUAREBRACKET(self):
            return self.getToken(RustParser.RSQUAREBRACKET, 0)
        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)

        def arrayElements(self):
            return self.getTypedRuleContext(RustParser.ArrayElementsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayExpression" ):
                listener.enterArrayExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayExpression" ):
                listener.exitArrayExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RustParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 154
        self.enterRecursionRule(localctx, 154, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                localctx = RustParser.AttributedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1288 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1287
                        self.outerAttribute()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1290 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

                self.state = 1292
                self.expression(40)
                pass

            elif la_ == 2:
                localctx = RustParser.LiteralExpression_Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1294
                self.literalExpression()
                pass

            elif la_ == 3:
                localctx = RustParser.PathExpression_Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1295
                self.pathExpression()
                pass

            elif la_ == 4:
                localctx = RustParser.BorrowExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1296
                _la = self._input.LA(1)
                if not(_la==89 or _la==91):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 1297
                    self.match(RustParser.KW_MUT)


                self.state = 1300
                self.expression(30)
                pass

            elif la_ == 5:
                localctx = RustParser.DereferenceExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1301
                self.match(RustParser.STAR)
                self.state = 1302
                self.expression(29)
                pass

            elif la_ == 6:
                localctx = RustParser.NegationExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1303
                _la = self._input.LA(1)
                if not(_la==83 or _la==88):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1304
                self.expression(28)
                pass

            elif la_ == 7:
                localctx = RustParser.RangeExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1305
                self.match(RustParser.DOTDOT)
                self.state = 1307
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 1306
                    self.expression(0)


                pass

            elif la_ == 8:
                localctx = RustParser.RangeExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1309
                self.match(RustParser.DOTDOTEQ)
                self.state = 1310
                self.expression(15)
                pass

            elif la_ == 9:
                localctx = RustParser.ContinueExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1311
                self.match(RustParser.KW_CONTINUE)
                self.state = 1313
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 1312
                    self.match(RustParser.LIFETIME_OR_LABEL)


                self.state = 1316
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                if la_ == 1:
                    self.state = 1315
                    self.expression(0)


                pass

            elif la_ == 10:
                localctx = RustParser.BreakExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1318
                self.match(RustParser.KW_BREAK)
                self.state = 1320
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                if la_ == 1:
                    self.state = 1319
                    self.match(RustParser.LIFETIME_OR_LABEL)


                self.state = 1323
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1322
                    self.expression(0)


                pass

            elif la_ == 11:
                localctx = RustParser.ReturnExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1325
                self.match(RustParser.KW_RETURN)
                self.state = 1327
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 1326
                    self.expression(0)


                pass

            elif la_ == 12:
                localctx = RustParser.GroupedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1329
                self.match(RustParser.LPAREN)
                self.state = 1333
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1330
                        self.innerAttribute() 
                    self.state = 1335
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

                self.state = 1336
                self.expression(0)
                self.state = 1337
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 13:
                localctx = RustParser.ArrayExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1339
                self.match(RustParser.LSQUAREBRACKET)
                self.state = 1343
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1340
                        self.innerAttribute() 
                    self.state = 1345
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

                self.state = 1347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 522417665550785076) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1523430809782507647) != 0):
                    self.state = 1346
                    self.arrayElements()


                self.state = 1349
                self.match(RustParser.RSQUAREBRACKET)
                pass

            elif la_ == 14:
                localctx = RustParser.TupleExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1350
                self.match(RustParser.LPAREN)
                self.state = 1354
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1351
                        self.innerAttribute() 
                    self.state = 1356
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

                self.state = 1358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 522417665550785076) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1523430809782507647) != 0):
                    self.state = 1357
                    self.tupleElements()


                self.state = 1360
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 15:
                localctx = RustParser.StructExpression_Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1361
                self.structExpression()
                pass

            elif la_ == 16:
                localctx = RustParser.EnumerationVariantExpression_Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1362
                self.enumerationVariantExpression()
                pass

            elif la_ == 17:
                localctx = RustParser.ClosureExpression_Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1363
                self.closureExpression()
                pass

            elif la_ == 18:
                localctx = RustParser.ExpressionWithBlock_Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1364
                self.expressionWithBlock()
                pass

            elif la_ == 19:
                localctx = RustParser.MacroInvocationAsExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1365
                self.macroInvocation()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1451
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1449
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
                    if la_ == 1:
                        localctx = RustParser.ArithmeticOrLogicalExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1368
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 1369
                        _la = self._input.LA(1)
                        if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 7) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1370
                        self.expression(27)
                        pass

                    elif la_ == 2:
                        localctx = RustParser.ArithmeticOrLogicalExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1371
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1372
                        _la = self._input.LA(1)
                        if not(_la==82 or _la==83):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1373
                        self.expression(26)
                        pass

                    elif la_ == 3:
                        localctx = RustParser.ArithmeticOrLogicalExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1374
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1377
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [107]:
                            self.state = 1375
                            self.shl()
                            pass
                        elif token in [106]:
                            self.state = 1376
                            self.shr()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1379
                        self.expression(25)
                        pass

                    elif la_ == 4:
                        localctx = RustParser.ArithmeticOrLogicalExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1381
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 1382
                        self.match(RustParser.AND)
                        self.state = 1383
                        self.expression(24)
                        pass

                    elif la_ == 5:
                        localctx = RustParser.ArithmeticOrLogicalExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1384
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1385
                        self.match(RustParser.CARET)
                        self.state = 1386
                        self.expression(23)
                        pass

                    elif la_ == 6:
                        localctx = RustParser.ArithmeticOrLogicalExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1387
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1388
                        self.match(RustParser.OR)
                        self.state = 1389
                        self.expression(22)
                        pass

                    elif la_ == 7:
                        localctx = RustParser.ComparisonExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1390
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1391
                        self.comparisonOperator()
                        self.state = 1392
                        self.expression(21)
                        pass

                    elif la_ == 8:
                        localctx = RustParser.LazyBooleanExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1394
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1395
                        self.match(RustParser.ANDAND)
                        self.state = 1396
                        self.expression(20)
                        pass

                    elif la_ == 9:
                        localctx = RustParser.LazyBooleanExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1397
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1398
                        self.match(RustParser.OROR)
                        self.state = 1399
                        self.expression(19)
                        pass

                    elif la_ == 10:
                        localctx = RustParser.RangeExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1400
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1401
                        self.match(RustParser.DOTDOTEQ)
                        self.state = 1402
                        self.expression(15)
                        pass

                    elif la_ == 11:
                        localctx = RustParser.AssignmentExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1403
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1404
                        self.match(RustParser.EQ)
                        self.state = 1405
                        self.expression(14)
                        pass

                    elif la_ == 12:
                        localctx = RustParser.CompoundAssignmentExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1406
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1407
                        self.compoundAssignOperator()
                        self.state = 1408
                        self.expression(13)
                        pass

                    elif la_ == 13:
                        localctx = RustParser.MethodCallExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1410
                        if not self.precpred(self._ctx, 37):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 37)")
                        self.state = 1411
                        self.match(RustParser.DOT)
                        self.state = 1412
                        self.pathExprSegment()
                        self.state = 1413
                        self.match(RustParser.LPAREN)
                        self.state = 1415
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 522417665550785076) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1523430809782507647) != 0):
                            self.state = 1414
                            self.callParams()


                        self.state = 1417
                        self.match(RustParser.RPAREN)
                        pass

                    elif la_ == 14:
                        localctx = RustParser.FieldExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1419
                        if not self.precpred(self._ctx, 36):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 36)")
                        self.state = 1420
                        self.match(RustParser.DOT)
                        self.state = 1421
                        self.identifier()
                        pass

                    elif la_ == 15:
                        localctx = RustParser.TupleIndexingExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1422
                        if not self.precpred(self._ctx, 35):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 35)")
                        self.state = 1423
                        self.match(RustParser.DOT)
                        self.state = 1424
                        self.tupleIndex()
                        pass

                    elif la_ == 16:
                        localctx = RustParser.AwaitExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1425
                        if not self.precpred(self._ctx, 34):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 34)")
                        self.state = 1426
                        self.match(RustParser.DOT)
                        self.state = 1427
                        self.match(RustParser.KW_AWAIT)
                        pass

                    elif la_ == 17:
                        localctx = RustParser.CallExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1428
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 1429
                        self.match(RustParser.LPAREN)
                        self.state = 1431
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 522417665550785076) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1523430809782507647) != 0):
                            self.state = 1430
                            self.callParams()


                        self.state = 1433
                        self.match(RustParser.RPAREN)
                        pass

                    elif la_ == 18:
                        localctx = RustParser.IndexExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1434
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 1435
                        self.match(RustParser.LSQUAREBRACKET)
                        self.state = 1436
                        self.expression(0)
                        self.state = 1437
                        self.match(RustParser.RSQUAREBRACKET)
                        pass

                    elif la_ == 19:
                        localctx = RustParser.ErrorPropagationExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1439
                        if not self.precpred(self._ctx, 31):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 31)")
                        self.state = 1440
                        self.match(RustParser.QUESTION)
                        pass

                    elif la_ == 20:
                        localctx = RustParser.TypeCastExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1441
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 1442
                        self.match(RustParser.KW_AS)
                        self.state = 1443
                        self.typeNoBounds()
                        pass

                    elif la_ == 21:
                        localctx = RustParser.RangeExpressionContext(self, RustParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1444
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1445
                        self.match(RustParser.DOTDOT)
                        self.state = 1447
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                        if la_ == 1:
                            self.state = 1446
                            self.expression(0)


                        pass

             
                self.state = 1453
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQEQ(self):
            return self.getToken(RustParser.EQEQ, 0)

        def NE(self):
            return self.getToken(RustParser.NE, 0)

        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def LT(self):
            return self.getToken(RustParser.LT, 0)

        def GE(self):
            return self.getToken(RustParser.GE, 0)

        def LE(self):
            return self.getToken(RustParser.LE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = RustParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1454
            _la = self._input.LA(1)
            if not(((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundAssignOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUSEQ(self):
            return self.getToken(RustParser.PLUSEQ, 0)

        def MINUSEQ(self):
            return self.getToken(RustParser.MINUSEQ, 0)

        def STAREQ(self):
            return self.getToken(RustParser.STAREQ, 0)

        def SLASHEQ(self):
            return self.getToken(RustParser.SLASHEQ, 0)

        def PERCENTEQ(self):
            return self.getToken(RustParser.PERCENTEQ, 0)

        def ANDEQ(self):
            return self.getToken(RustParser.ANDEQ, 0)

        def OREQ(self):
            return self.getToken(RustParser.OREQ, 0)

        def CARETEQ(self):
            return self.getToken(RustParser.CARETEQ, 0)

        def SHLEQ(self):
            return self.getToken(RustParser.SHLEQ, 0)

        def SHREQ(self):
            return self.getToken(RustParser.SHREQ, 0)

        def getRuleIndex(self):
            return RustParser.RULE_compoundAssignOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundAssignOperator" ):
                listener.enterCompoundAssignOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundAssignOperator" ):
                listener.exitCompoundAssignOperator(self)




    def compoundAssignOperator(self):

        localctx = RustParser.CompoundAssignOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_compoundAssignOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1456
            _la = self._input.LA(1)
            if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionWithBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionWithBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionWithBlockContext,0)


        def outerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.OuterAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.OuterAttributeContext,i)


        def blockExpression(self):
            return self.getTypedRuleContext(RustParser.BlockExpressionContext,0)


        def asyncBlockExpression(self):
            return self.getTypedRuleContext(RustParser.AsyncBlockExpressionContext,0)


        def unsafeBlockExpression(self):
            return self.getTypedRuleContext(RustParser.UnsafeBlockExpressionContext,0)


        def loopExpression(self):
            return self.getTypedRuleContext(RustParser.LoopExpressionContext,0)


        def ifExpression(self):
            return self.getTypedRuleContext(RustParser.IfExpressionContext,0)


        def ifLetExpression(self):
            return self.getTypedRuleContext(RustParser.IfLetExpressionContext,0)


        def matchExpression(self):
            return self.getTypedRuleContext(RustParser.MatchExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_expressionWithBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionWithBlock" ):
                listener.enterExpressionWithBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionWithBlock" ):
                listener.exitExpressionWithBlock(self)




    def expressionWithBlock(self):

        localctx = RustParser.ExpressionWithBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_expressionWithBlock)
        try:
            self.state = 1472
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1459 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1458
                        self.outerAttribute()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1461 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,181,self._ctx)

                self.state = 1463
                self.expressionWithBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1465
                self.blockExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1466
                self.asyncBlockExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1467
                self.unsafeBlockExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1468
                self.loopExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1469
                self.ifExpression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1470
                self.ifLetExpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1471
                self.matchExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def RAW_STRING_LITERAL(self):
            return self.getToken(RustParser.RAW_STRING_LITERAL, 0)

        def BYTE_LITERAL(self):
            return self.getToken(RustParser.BYTE_LITERAL, 0)

        def BYTE_STRING_LITERAL(self):
            return self.getToken(RustParser.BYTE_STRING_LITERAL, 0)

        def RAW_BYTE_STRING_LITERAL(self):
            return self.getToken(RustParser.RAW_BYTE_STRING_LITERAL, 0)

        def INTEGER_LITERAL(self):
            return self.getToken(RustParser.INTEGER_LITERAL, 0)

        def FLOAT_LITERAL(self):
            return self.getToken(RustParser.FLOAT_LITERAL, 0)

        def KW_TRUE(self):
            return self.getToken(RustParser.KW_TRUE, 0)

        def KW_FALSE(self):
            return self.getToken(RustParser.KW_FALSE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)




    def literalExpression(self):

        localctx = RustParser.LiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_literalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1474
            _la = self._input.LA(1)
            if not(_la==9 or _la==30 or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 2175) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathInExpression(self):
            return self.getTypedRuleContext(RustParser.PathInExpressionContext,0)


        def qualifiedPathInExpression(self):
            return self.getTypedRuleContext(RustParser.QualifiedPathInExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pathExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathExpression" ):
                listener.enterPathExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathExpression" ):
                listener.exitPathExpression(self)




    def pathExpression(self):

        localctx = RustParser.PathExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_pathExpression)
        try:
            self.state = 1478
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 24, 25, 28, 54, 56, 57, 58, 119]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1476
                self.pathInExpression()
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1477
                self.qualifiedPathInExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLYBRACE(self):
            return self.getToken(RustParser.LCURLYBRACE, 0)

        def RCURLYBRACE(self):
            return self.getToken(RustParser.RCURLYBRACE, 0)

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def statements(self):
            return self.getTypedRuleContext(RustParser.StatementsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_blockExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockExpression" ):
                listener.enterBlockExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockExpression" ):
                listener.exitBlockExpression(self)




    def blockExpression(self):

        localctx = RustParser.BlockExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_blockExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1480
            self.match(RustParser.LCURLYBRACE)
            self.state = 1484
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1481
                    self.innerAttribute() 
                self.state = 1486
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

            self.state = 1488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 526921276656172988) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1523712284759218303) != 0):
                self.state = 1487
                self.statements()


            self.state = 1490
            self.match(RustParser.RCURLYBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)




    def statements(self):

        localctx = RustParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_statements)
        self._la = 0 # Token type
        try:
            self.state = 1501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1493 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1492
                        self.statement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1495 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,186,self._ctx)

                self.state = 1498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 522417665550785076) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1523430809782507647) != 0):
                    self.state = 1497
                    self.expression(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1500
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsyncBlockExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ASYNC(self):
            return self.getToken(RustParser.KW_ASYNC, 0)

        def blockExpression(self):
            return self.getTypedRuleContext(RustParser.BlockExpressionContext,0)


        def KW_MOVE(self):
            return self.getToken(RustParser.KW_MOVE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_asyncBlockExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsyncBlockExpression" ):
                listener.enterAsyncBlockExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsyncBlockExpression" ):
                listener.exitAsyncBlockExpression(self)




    def asyncBlockExpression(self):

        localctx = RustParser.AsyncBlockExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_asyncBlockExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1503
            self.match(RustParser.KW_ASYNC)
            self.state = 1505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 1504
                self.match(RustParser.KW_MOVE)


            self.state = 1507
            self.blockExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeBlockExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNSAFE(self):
            return self.getToken(RustParser.KW_UNSAFE, 0)

        def blockExpression(self):
            return self.getTypedRuleContext(RustParser.BlockExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeBlockExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeBlockExpression" ):
                listener.enterUnsafeBlockExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeBlockExpression" ):
                listener.exitUnsafeBlockExpression(self)




    def unsafeBlockExpression(self):

        localctx = RustParser.UnsafeBlockExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_unsafeBlockExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509
            self.match(RustParser.KW_UNSAFE)
            self.state = 1510
            self.blockExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayElementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def SEMI(self):
            return self.getToken(RustParser.SEMI, 0)

        def getRuleIndex(self):
            return RustParser.RULE_arrayElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayElements" ):
                listener.enterArrayElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayElements" ):
                listener.exitArrayElements(self)




    def arrayElements(self):

        localctx = RustParser.ArrayElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_arrayElements)
        self._la = 0 # Token type
        try:
            self.state = 1527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1512
                self.expression(0)
                self.state = 1517
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,190,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1513
                        self.match(RustParser.COMMA)
                        self.state = 1514
                        self.expression(0) 
                    self.state = 1519
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,190,self._ctx)

                self.state = 1521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 1520
                    self.match(RustParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1523
                self.expression(0)
                self.state = 1524
                self.match(RustParser.SEMI)
                self.state = 1525
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleElementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_tupleElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleElements" ):
                listener.enterTupleElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleElements" ):
                listener.exitTupleElements(self)




    def tupleElements(self):

        localctx = RustParser.TupleElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_tupleElements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1532 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1529
                    self.expression(0)
                    self.state = 1530
                    self.match(RustParser.COMMA)

                else:
                    raise NoViableAltException(self)
                self.state = 1534 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,193,self._ctx)

            self.state = 1537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 522417665550785076) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1523430809782507647) != 0):
                self.state = 1536
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_LITERAL(self):
            return self.getToken(RustParser.INTEGER_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_tupleIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleIndex" ):
                listener.enterTupleIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleIndex" ):
                listener.exitTupleIndex(self)




    def tupleIndex(self):

        localctx = RustParser.TupleIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_tupleIndex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1539
            self.match(RustParser.INTEGER_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structExprStruct(self):
            return self.getTypedRuleContext(RustParser.StructExprStructContext,0)


        def structExprTuple(self):
            return self.getTypedRuleContext(RustParser.StructExprTupleContext,0)


        def structExprUnit(self):
            return self.getTypedRuleContext(RustParser.StructExprUnitContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructExpression" ):
                listener.enterStructExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructExpression" ):
                listener.exitStructExpression(self)




    def structExpression(self):

        localctx = RustParser.StructExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_structExpression)
        try:
            self.state = 1544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1541
                self.structExprStruct()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1542
                self.structExprTuple()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1543
                self.structExprUnit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructExprStructContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathInExpression(self):
            return self.getTypedRuleContext(RustParser.PathInExpressionContext,0)


        def LCURLYBRACE(self):
            return self.getToken(RustParser.LCURLYBRACE, 0)

        def RCURLYBRACE(self):
            return self.getToken(RustParser.RCURLYBRACE, 0)

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def structExprFields(self):
            return self.getTypedRuleContext(RustParser.StructExprFieldsContext,0)


        def structBase(self):
            return self.getTypedRuleContext(RustParser.StructBaseContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structExprStruct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructExprStruct" ):
                listener.enterStructExprStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructExprStruct" ):
                listener.exitStructExprStruct(self)




    def structExprStruct(self):

        localctx = RustParser.StructExprStructContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_structExprStruct)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1546
            self.pathInExpression()
            self.state = 1547
            self.match(RustParser.LCURLYBRACE)
            self.state = 1551
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,196,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1548
                    self.innerAttribute() 
                self.state = 1553
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

            self.state = 1556
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 57, 58, 75, 122]:
                self.state = 1554
                self.structExprFields()
                pass
            elif token in [113]:
                self.state = 1555
                self.structBase()
                pass
            elif token in [126]:
                pass
            else:
                pass
            self.state = 1558
            self.match(RustParser.RCURLYBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructExprFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structExprField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructExprFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructExprFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def structBase(self):
            return self.getTypedRuleContext(RustParser.StructBaseContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structExprFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructExprFields" ):
                listener.enterStructExprFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructExprFields" ):
                listener.exitStructExprFields(self)




    def structExprFields(self):

        localctx = RustParser.StructExprFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_structExprFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1560
            self.structExprField()
            self.state = 1565
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,198,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1561
                    self.match(RustParser.COMMA)
                    self.state = 1562
                    self.structExprField() 
                self.state = 1567
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

            self.state = 1573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.state = 1568
                self.match(RustParser.COMMA)
                self.state = 1569
                self.structBase()
                pass

            elif la_ == 2:
                self.state = 1571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 1570
                    self.match(RustParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructExprFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def outerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.OuterAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.OuterAttributeContext,i)


        def tupleIndex(self):
            return self.getTypedRuleContext(RustParser.TupleIndexContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structExprField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructExprField" ):
                listener.enterStructExprField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructExprField" ):
                listener.exitStructExprField(self)




    def structExprField(self):

        localctx = RustParser.StructExprFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_structExprField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==122:
                self.state = 1575
                self.outerAttribute()
                self.state = 1580
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.state = 1581
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 1584
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [54, 57, 58]:
                    self.state = 1582
                    self.identifier()
                    pass
                elif token in [75]:
                    self.state = 1583
                    self.tupleIndex()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1586
                self.match(RustParser.COLON)
                self.state = 1587
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOTDOT(self):
            return self.getToken(RustParser.DOTDOT, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructBase" ):
                listener.enterStructBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructBase" ):
                listener.exitStructBase(self)




    def structBase(self):

        localctx = RustParser.StructBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_structBase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1591
            self.match(RustParser.DOTDOT)
            self.state = 1592
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructExprTupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathInExpression(self):
            return self.getTypedRuleContext(RustParser.PathInExpressionContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_structExprTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructExprTuple" ):
                listener.enterStructExprTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructExprTuple" ):
                listener.exitStructExprTuple(self)




    def structExprTuple(self):

        localctx = RustParser.StructExprTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_structExprTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1594
            self.pathInExpression()
            self.state = 1595
            self.match(RustParser.LPAREN)
            self.state = 1599
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,204,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1596
                    self.innerAttribute() 
                self.state = 1601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,204,self._ctx)

            self.state = 1613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 522417665550785076) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1523430809782507647) != 0):
                self.state = 1602
                self.expression(0)
                self.state = 1607
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,205,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1603
                        self.match(RustParser.COMMA)
                        self.state = 1604
                        self.expression(0) 
                    self.state = 1609
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,205,self._ctx)

                self.state = 1611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 1610
                    self.match(RustParser.COMMA)




            self.state = 1615
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructExprUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathInExpression(self):
            return self.getTypedRuleContext(RustParser.PathInExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structExprUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructExprUnit" ):
                listener.enterStructExprUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructExprUnit" ):
                listener.exitStructExprUnit(self)




    def structExprUnit(self):

        localctx = RustParser.StructExprUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_structExprUnit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            self.pathInExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationVariantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumExprStruct(self):
            return self.getTypedRuleContext(RustParser.EnumExprStructContext,0)


        def enumExprTuple(self):
            return self.getTypedRuleContext(RustParser.EnumExprTupleContext,0)


        def enumExprFieldless(self):
            return self.getTypedRuleContext(RustParser.EnumExprFieldlessContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_enumerationVariantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationVariantExpression" ):
                listener.enterEnumerationVariantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationVariantExpression" ):
                listener.exitEnumerationVariantExpression(self)




    def enumerationVariantExpression(self):

        localctx = RustParser.EnumerationVariantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_enumerationVariantExpression)
        try:
            self.state = 1622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1619
                self.enumExprStruct()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1620
                self.enumExprTuple()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1621
                self.enumExprFieldless()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumExprStructContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathInExpression(self):
            return self.getTypedRuleContext(RustParser.PathInExpressionContext,0)


        def LCURLYBRACE(self):
            return self.getToken(RustParser.LCURLYBRACE, 0)

        def RCURLYBRACE(self):
            return self.getToken(RustParser.RCURLYBRACE, 0)

        def enumExprFields(self):
            return self.getTypedRuleContext(RustParser.EnumExprFieldsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_enumExprStruct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumExprStruct" ):
                listener.enterEnumExprStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumExprStruct" ):
                listener.exitEnumExprStruct(self)




    def enumExprStruct(self):

        localctx = RustParser.EnumExprStructContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_enumExprStruct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1624
            self.pathInExpression()
            self.state = 1625
            self.match(RustParser.LCURLYBRACE)
            self.state = 1627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 2097177) != 0):
                self.state = 1626
                self.enumExprFields()


            self.state = 1629
            self.match(RustParser.RCURLYBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumExprFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumExprField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.EnumExprFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.EnumExprFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_enumExprFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumExprFields" ):
                listener.enterEnumExprFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumExprFields" ):
                listener.exitEnumExprFields(self)




    def enumExprFields(self):

        localctx = RustParser.EnumExprFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_enumExprFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631
            self.enumExprField()
            self.state = 1636
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,210,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1632
                    self.match(RustParser.COMMA)
                    self.state = 1633
                    self.enumExprField() 
                self.state = 1638
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,210,self._ctx)

            self.state = 1640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 1639
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumExprFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def tupleIndex(self):
            return self.getTypedRuleContext(RustParser.TupleIndexContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_enumExprField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumExprField" ):
                listener.enterEnumExprField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumExprField" ):
                listener.exitEnumExprField(self)




    def enumExprField(self):

        localctx = RustParser.EnumExprFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_enumExprField)
        try:
            self.state = 1650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1642
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1645
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [54, 57, 58]:
                    self.state = 1643
                    self.identifier()
                    pass
                elif token in [75]:
                    self.state = 1644
                    self.tupleIndex()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1647
                self.match(RustParser.COLON)
                self.state = 1648
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumExprTupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathInExpression(self):
            return self.getTypedRuleContext(RustParser.PathInExpressionContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_enumExprTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumExprTuple" ):
                listener.enterEnumExprTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumExprTuple" ):
                listener.exitEnumExprTuple(self)




    def enumExprTuple(self):

        localctx = RustParser.EnumExprTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_enumExprTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1652
            self.pathInExpression()
            self.state = 1653
            self.match(RustParser.LPAREN)
            self.state = 1665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 522417665550785076) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1523430809782507647) != 0):
                self.state = 1654
                self.expression(0)
                self.state = 1659
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,214,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1655
                        self.match(RustParser.COMMA)
                        self.state = 1656
                        self.expression(0) 
                    self.state = 1661
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,214,self._ctx)

                self.state = 1663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 1662
                    self.match(RustParser.COMMA)




            self.state = 1667
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumExprFieldlessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathInExpression(self):
            return self.getTypedRuleContext(RustParser.PathInExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_enumExprFieldless

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumExprFieldless" ):
                listener.enterEnumExprFieldless(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumExprFieldless" ):
                listener.exitEnumExprFieldless(self)




    def enumExprFieldless(self):

        localctx = RustParser.EnumExprFieldlessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_enumExprFieldless)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1669
            self.pathInExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_callParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallParams" ):
                listener.enterCallParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallParams" ):
                listener.exitCallParams(self)




    def callParams(self):

        localctx = RustParser.CallParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_callParams)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1671
            self.expression(0)
            self.state = 1676
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,217,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1672
                    self.match(RustParser.COMMA)
                    self.state = 1673
                    self.expression(0) 
                self.state = 1678
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,217,self._ctx)

            self.state = 1680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 1679
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClosureExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OROR(self):
            return self.getToken(RustParser.OROR, 0)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.OR)
            else:
                return self.getToken(RustParser.OR, i)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RARROW(self):
            return self.getToken(RustParser.RARROW, 0)

        def typeNoBounds(self):
            return self.getTypedRuleContext(RustParser.TypeNoBoundsContext,0)


        def blockExpression(self):
            return self.getTypedRuleContext(RustParser.BlockExpressionContext,0)


        def KW_MOVE(self):
            return self.getToken(RustParser.KW_MOVE, 0)

        def closureParameters(self):
            return self.getTypedRuleContext(RustParser.ClosureParametersContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_closureExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosureExpression" ):
                listener.enterClosureExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosureExpression" ):
                listener.exitClosureExpression(self)




    def closureExpression(self):

        localctx = RustParser.ClosureExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_closureExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 1682
                self.match(RustParser.KW_MOVE)


            self.state = 1691
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [92]:
                self.state = 1685
                self.match(RustParser.OROR)
                pass
            elif token in [90]:
                self.state = 1686
                self.match(RustParser.OR)
                self.state = 1688
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                if la_ == 1:
                    self.state = 1687
                    self.closureParameters()


                self.state = 1690
                self.match(RustParser.OR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1698
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 4, 5, 9, 11, 12, 16, 17, 19, 23, 24, 25, 28, 30, 32, 35, 36, 54, 56, 57, 58, 69, 70, 71, 72, 73, 74, 75, 80, 81, 83, 84, 88, 89, 90, 91, 92, 107, 113, 115, 119, 122, 125, 127, 129]:
                self.state = 1693
                self.expression(0)
                pass
            elif token in [120]:
                self.state = 1694
                self.match(RustParser.RARROW)
                self.state = 1695
                self.typeNoBounds()
                self.state = 1696
                self.blockExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClosureParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closureParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ClosureParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ClosureParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_closureParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosureParameters" ):
                listener.enterClosureParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosureParameters" ):
                listener.exitClosureParameters(self)




    def closureParameters(self):

        localctx = RustParser.ClosureParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_closureParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1700
            self.closureParam()
            self.state = 1705
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,223,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1701
                    self.match(RustParser.COMMA)
                    self.state = 1702
                    self.closureParam() 
                self.state = 1707
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,223,self._ctx)

            self.state = 1709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 1708
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClosureParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(RustParser.PatternContext,0)


        def outerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.OuterAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.OuterAttributeContext,i)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def getRuleIndex(self):
            return RustParser.RULE_closureParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosureParam" ):
                listener.enterClosureParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosureParam" ):
                listener.exitClosureParam(self)




    def closureParam(self):

        localctx = RustParser.ClosureParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_closureParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==122:
                self.state = 1711
                self.outerAttribute()
                self.state = 1716
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1717
            self.pattern()
            self.state = 1720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 1718
                self.match(RustParser.COLON)
                self.state = 1719
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def infiniteLoopExpression(self):
            return self.getTypedRuleContext(RustParser.InfiniteLoopExpressionContext,0)


        def predicateLoopExpression(self):
            return self.getTypedRuleContext(RustParser.PredicateLoopExpressionContext,0)


        def predicatePatternLoopExpression(self):
            return self.getTypedRuleContext(RustParser.PredicatePatternLoopExpressionContext,0)


        def iteratorLoopExpression(self):
            return self.getTypedRuleContext(RustParser.IteratorLoopExpressionContext,0)


        def loopLabel(self):
            return self.getTypedRuleContext(RustParser.LoopLabelContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_loopExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopExpression" ):
                listener.enterLoopExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopExpression" ):
                listener.exitLoopExpression(self)




    def loopExpression(self):

        localctx = RustParser.LoopExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_loopExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 1722
                self.loopLabel()


            self.state = 1729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 1725
                self.infiniteLoopExpression()
                pass

            elif la_ == 2:
                self.state = 1726
                self.predicateLoopExpression()
                pass

            elif la_ == 3:
                self.state = 1727
                self.predicatePatternLoopExpression()
                pass

            elif la_ == 4:
                self.state = 1728
                self.iteratorLoopExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InfiniteLoopExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LOOP(self):
            return self.getToken(RustParser.KW_LOOP, 0)

        def blockExpression(self):
            return self.getTypedRuleContext(RustParser.BlockExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_infiniteLoopExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfiniteLoopExpression" ):
                listener.enterInfiniteLoopExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfiniteLoopExpression" ):
                listener.exitInfiniteLoopExpression(self)




    def infiniteLoopExpression(self):

        localctx = RustParser.InfiniteLoopExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_infiniteLoopExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1731
            self.match(RustParser.KW_LOOP)
            self.state = 1732
            self.blockExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateLoopExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHILE(self):
            return self.getToken(RustParser.KW_WHILE, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def blockExpression(self):
            return self.getTypedRuleContext(RustParser.BlockExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_predicateLoopExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateLoopExpression" ):
                listener.enterPredicateLoopExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateLoopExpression" ):
                listener.exitPredicateLoopExpression(self)




    def predicateLoopExpression(self):

        localctx = RustParser.PredicateLoopExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_predicateLoopExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1734
            self.match(RustParser.KW_WHILE)
            self.state = 1735
            self.expression(0)
            self.state = 1736
            self.blockExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicatePatternLoopExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHILE(self):
            return self.getToken(RustParser.KW_WHILE, 0)

        def KW_LET(self):
            return self.getToken(RustParser.KW_LET, 0)

        def pattern(self):
            return self.getTypedRuleContext(RustParser.PatternContext,0)


        def EQ(self):
            return self.getToken(RustParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def blockExpression(self):
            return self.getTypedRuleContext(RustParser.BlockExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_predicatePatternLoopExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicatePatternLoopExpression" ):
                listener.enterPredicatePatternLoopExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicatePatternLoopExpression" ):
                listener.exitPredicatePatternLoopExpression(self)




    def predicatePatternLoopExpression(self):

        localctx = RustParser.PredicatePatternLoopExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_predicatePatternLoopExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1738
            self.match(RustParser.KW_WHILE)
            self.state = 1739
            self.match(RustParser.KW_LET)
            self.state = 1740
            self.pattern()
            self.state = 1741
            self.match(RustParser.EQ)
            self.state = 1742
            self.expression(0)
            self.state = 1743
            self.blockExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IteratorLoopExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FOR(self):
            return self.getToken(RustParser.KW_FOR, 0)

        def pattern(self):
            return self.getTypedRuleContext(RustParser.PatternContext,0)


        def KW_IN(self):
            return self.getToken(RustParser.KW_IN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def blockExpression(self):
            return self.getTypedRuleContext(RustParser.BlockExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_iteratorLoopExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteratorLoopExpression" ):
                listener.enterIteratorLoopExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteratorLoopExpression" ):
                listener.exitIteratorLoopExpression(self)




    def iteratorLoopExpression(self):

        localctx = RustParser.IteratorLoopExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_iteratorLoopExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            self.match(RustParser.KW_FOR)
            self.state = 1746
            self.pattern()
            self.state = 1747
            self.match(RustParser.KW_IN)
            self.state = 1748
            self.expression(0)
            self.state = 1749
            self.blockExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIFETIME_OR_LABEL(self):
            return self.getToken(RustParser.LIFETIME_OR_LABEL, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def getRuleIndex(self):
            return RustParser.RULE_loopLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopLabel" ):
                listener.enterLoopLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopLabel" ):
                listener.exitLoopLabel(self)




    def loopLabel(self):

        localctx = RustParser.LoopLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_loopLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1751
            self.match(RustParser.LIFETIME_OR_LABEL)
            self.state = 1752
            self.match(RustParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IF(self):
            return self.getToken(RustParser.KW_IF, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def blockExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockExpressionContext,i)


        def KW_ELSE(self):
            return self.getToken(RustParser.KW_ELSE, 0)

        def ifExpression(self):
            return self.getTypedRuleContext(RustParser.IfExpressionContext,0)


        def ifLetExpression(self):
            return self.getTypedRuleContext(RustParser.IfLetExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_ifExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpression" ):
                listener.enterIfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpression" ):
                listener.exitIfExpression(self)




    def ifExpression(self):

        localctx = RustParser.IfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_ifExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1754
            self.match(RustParser.KW_IF)
            self.state = 1755
            self.expression(0)
            self.state = 1756
            self.blockExpression()
            self.state = 1763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.state = 1757
                self.match(RustParser.KW_ELSE)
                self.state = 1761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                if la_ == 1:
                    self.state = 1758
                    self.blockExpression()
                    pass

                elif la_ == 2:
                    self.state = 1759
                    self.ifExpression()
                    pass

                elif la_ == 3:
                    self.state = 1760
                    self.ifLetExpression()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfLetExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IF(self):
            return self.getToken(RustParser.KW_IF, 0)

        def KW_LET(self):
            return self.getToken(RustParser.KW_LET, 0)

        def pattern(self):
            return self.getTypedRuleContext(RustParser.PatternContext,0)


        def EQ(self):
            return self.getToken(RustParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def blockExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockExpressionContext,i)


        def KW_ELSE(self):
            return self.getToken(RustParser.KW_ELSE, 0)

        def ifExpression(self):
            return self.getTypedRuleContext(RustParser.IfExpressionContext,0)


        def ifLetExpression(self):
            return self.getTypedRuleContext(RustParser.IfLetExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_ifLetExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfLetExpression" ):
                listener.enterIfLetExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfLetExpression" ):
                listener.exitIfLetExpression(self)




    def ifLetExpression(self):

        localctx = RustParser.IfLetExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_ifLetExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1765
            self.match(RustParser.KW_IF)
            self.state = 1766
            self.match(RustParser.KW_LET)
            self.state = 1767
            self.pattern()
            self.state = 1768
            self.match(RustParser.EQ)
            self.state = 1769
            self.expression(0)
            self.state = 1770
            self.blockExpression()
            self.state = 1777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.state = 1771
                self.match(RustParser.KW_ELSE)
                self.state = 1775
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                if la_ == 1:
                    self.state = 1772
                    self.blockExpression()
                    pass

                elif la_ == 2:
                    self.state = 1773
                    self.ifExpression()
                    pass

                elif la_ == 3:
                    self.state = 1774
                    self.ifLetExpression()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_MATCH(self):
            return self.getToken(RustParser.KW_MATCH, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def LCURLYBRACE(self):
            return self.getToken(RustParser.LCURLYBRACE, 0)

        def RCURLYBRACE(self):
            return self.getToken(RustParser.RCURLYBRACE, 0)

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def matchArms(self):
            return self.getTypedRuleContext(RustParser.MatchArmsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchExpression" ):
                listener.enterMatchExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchExpression" ):
                listener.exitMatchExpression(self)




    def matchExpression(self):

        localctx = RustParser.MatchExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_matchExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1779
            self.match(RustParser.KW_MATCH)
            self.state = 1780
            self.expression(0)
            self.state = 1781
            self.match(RustParser.LCURLYBRACE)
            self.state = 1785
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1782
                    self.innerAttribute() 
                self.state = 1787
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

            self.state = 1789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 522417558172729888) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1451307245037963391) != 0):
                self.state = 1788
                self.matchArms()


            self.state = 1791
            self.match(RustParser.RCURLYBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmContext,i)


        def FATARROW(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.FATARROW)
            else:
                return self.getToken(RustParser.FATARROW, i)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def matchArmExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmExpressionContext,i)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_matchArms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArms" ):
                listener.enterMatchArms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArms" ):
                listener.exitMatchArms(self)




    def matchArms(self):

        localctx = RustParser.MatchArmsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_matchArms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1799
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,235,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1793
                    self.matchArm()
                    self.state = 1794
                    self.match(RustParser.FATARROW)
                    self.state = 1795
                    self.matchArmExpression() 
                self.state = 1801
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,235,self._ctx)

            self.state = 1802
            self.matchArm()
            self.state = 1803
            self.match(RustParser.FATARROW)
            self.state = 1804
            self.expression(0)
            self.state = 1806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 1805
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def expressionWithBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionWithBlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArmExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArmExpression" ):
                listener.enterMatchArmExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArmExpression" ):
                listener.exitMatchArmExpression(self)




    def matchArmExpression(self):

        localctx = RustParser.MatchArmExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_matchArmExpression)
        self._la = 0 # Token type
        try:
            self.state = 1815
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1808
                self.expression(0)
                self.state = 1809
                self.match(RustParser.COMMA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1811
                self.expressionWithBlock()
                self.state = 1813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 1812
                    self.match(RustParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(RustParser.PatternContext,0)


        def outerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.OuterAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.OuterAttributeContext,i)


        def matchArmGuard(self):
            return self.getTypedRuleContext(RustParser.MatchArmGuardContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArm" ):
                listener.enterMatchArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArm" ):
                listener.exitMatchArm(self)




    def matchArm(self):

        localctx = RustParser.MatchArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_matchArm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==122:
                self.state = 1817
                self.outerAttribute()
                self.state = 1822
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1823
            self.pattern()
            self.state = 1825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 1824
                self.matchArmGuard()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmGuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IF(self):
            return self.getToken(RustParser.KW_IF, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArmGuard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArmGuard" ):
                listener.enterMatchArmGuard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArmGuard" ):
                listener.exitMatchArmGuard(self)




    def matchArmGuard(self):

        localctx = RustParser.MatchArmGuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_matchArmGuard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1827
            self.match(RustParser.KW_IF)
            self.state = 1828
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patternNoTopAlt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.PatternNoTopAltContext)
            else:
                return self.getTypedRuleContext(RustParser.PatternNoTopAltContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.OR)
            else:
                return self.getToken(RustParser.OR, i)

        def getRuleIndex(self):
            return RustParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = RustParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 1830
                self.match(RustParser.OR)


            self.state = 1833
            self.patternNoTopAlt()
            self.state = 1838
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,242,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1834
                    self.match(RustParser.OR)
                    self.state = 1835
                    self.patternNoTopAlt() 
                self.state = 1840
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternNoTopAltContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patternWithoutRange(self):
            return self.getTypedRuleContext(RustParser.PatternWithoutRangeContext,0)


        def rangePattern(self):
            return self.getTypedRuleContext(RustParser.RangePatternContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_patternNoTopAlt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternNoTopAlt" ):
                listener.enterPatternNoTopAlt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternNoTopAlt" ):
                listener.exitPatternNoTopAlt(self)




    def patternNoTopAlt(self):

        localctx = RustParser.PatternNoTopAltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_patternNoTopAlt)
        try:
            self.state = 1843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1841
                self.patternWithoutRange()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1842
                self.rangePattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternWithoutRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literalPattern(self):
            return self.getTypedRuleContext(RustParser.LiteralPatternContext,0)


        def identifierPattern(self):
            return self.getTypedRuleContext(RustParser.IdentifierPatternContext,0)


        def wildcardPattern(self):
            return self.getTypedRuleContext(RustParser.WildcardPatternContext,0)


        def restPattern(self):
            return self.getTypedRuleContext(RustParser.RestPatternContext,0)


        def referencePattern(self):
            return self.getTypedRuleContext(RustParser.ReferencePatternContext,0)


        def structPattern(self):
            return self.getTypedRuleContext(RustParser.StructPatternContext,0)


        def tupleStructPattern(self):
            return self.getTypedRuleContext(RustParser.TupleStructPatternContext,0)


        def tuplePattern(self):
            return self.getTypedRuleContext(RustParser.TuplePatternContext,0)


        def groupedPattern(self):
            return self.getTypedRuleContext(RustParser.GroupedPatternContext,0)


        def slicePattern(self):
            return self.getTypedRuleContext(RustParser.SlicePatternContext,0)


        def pathPattern(self):
            return self.getTypedRuleContext(RustParser.PathPatternContext,0)


        def macroInvocation(self):
            return self.getTypedRuleContext(RustParser.MacroInvocationContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_patternWithoutRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternWithoutRange" ):
                listener.enterPatternWithoutRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternWithoutRange" ):
                listener.exitPatternWithoutRange(self)




    def patternWithoutRange(self):

        localctx = RustParser.PatternWithoutRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_patternWithoutRange)
        try:
            self.state = 1857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1845
                self.literalPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1846
                self.identifierPattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1847
                self.wildcardPattern()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1848
                self.restPattern()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1849
                self.referencePattern()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1850
                self.structPattern()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1851
                self.tupleStructPattern()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1852
                self.tuplePattern()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1853
                self.groupedPattern()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1854
                self.slicePattern()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1855
                self.pathPattern()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1856
                self.macroInvocation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TRUE(self):
            return self.getToken(RustParser.KW_TRUE, 0)

        def KW_FALSE(self):
            return self.getToken(RustParser.KW_FALSE, 0)

        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def BYTE_LITERAL(self):
            return self.getToken(RustParser.BYTE_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def RAW_STRING_LITERAL(self):
            return self.getToken(RustParser.RAW_STRING_LITERAL, 0)

        def BYTE_STRING_LITERAL(self):
            return self.getToken(RustParser.BYTE_STRING_LITERAL, 0)

        def RAW_BYTE_STRING_LITERAL(self):
            return self.getToken(RustParser.RAW_BYTE_STRING_LITERAL, 0)

        def INTEGER_LITERAL(self):
            return self.getToken(RustParser.INTEGER_LITERAL, 0)

        def MINUS(self):
            return self.getToken(RustParser.MINUS, 0)

        def FLOAT_LITERAL(self):
            return self.getToken(RustParser.FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literalPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralPattern" ):
                listener.enterLiteralPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralPattern" ):
                listener.exitLiteralPattern(self)




    def literalPattern(self):

        localctx = RustParser.LiteralPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_literalPattern)
        self._la = 0 # Token type
        try:
            self.state = 1875
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1859
                self.match(RustParser.KW_TRUE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1860
                self.match(RustParser.KW_FALSE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1861
                self.match(RustParser.CHAR_LITERAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1862
                self.match(RustParser.BYTE_LITERAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1863
                self.match(RustParser.STRING_LITERAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1864
                self.match(RustParser.RAW_STRING_LITERAL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1865
                self.match(RustParser.BYTE_STRING_LITERAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1866
                self.match(RustParser.RAW_BYTE_STRING_LITERAL)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 1867
                    self.match(RustParser.MINUS)


                self.state = 1870
                self.match(RustParser.INTEGER_LITERAL)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 1871
                    self.match(RustParser.MINUS)


                self.state = 1874
                self.match(RustParser.FLOAT_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def KW_REF(self):
            return self.getToken(RustParser.KW_REF, 0)

        def KW_MUT(self):
            return self.getToken(RustParser.KW_MUT, 0)

        def AT(self):
            return self.getToken(RustParser.AT, 0)

        def pattern(self):
            return self.getTypedRuleContext(RustParser.PatternContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_identifierPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierPattern" ):
                listener.enterIdentifierPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierPattern" ):
                listener.exitIdentifierPattern(self)




    def identifierPattern(self):

        localctx = RustParser.IdentifierPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_identifierPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 1877
                self.match(RustParser.KW_REF)


            self.state = 1881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1880
                self.match(RustParser.KW_MUT)


            self.state = 1883
            self.identifier()
            self.state = 1886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 1884
                self.match(RustParser.AT)
                self.state = 1885
                self.pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_wildcardPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardPattern" ):
                listener.enterWildcardPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardPattern" ):
                listener.exitWildcardPattern(self)




    def wildcardPattern(self):

        localctx = RustParser.WildcardPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_wildcardPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1888
            self.match(RustParser.UNDERSCORE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOTDOT(self):
            return self.getToken(RustParser.DOTDOT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_restPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestPattern" ):
                listener.enterRestPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestPattern" ):
                listener.exitRestPattern(self)




    def restPattern(self):

        localctx = RustParser.RestPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_restPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1890
            self.match(RustParser.DOTDOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_rangePattern

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InclusiveRangePatternContext(RangePatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.RangePatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rangePatternBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.RangePatternBoundContext)
            else:
                return self.getTypedRuleContext(RustParser.RangePatternBoundContext,i)

        def DOTDOTEQ(self):
            return self.getToken(RustParser.DOTDOTEQ, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveRangePattern" ):
                listener.enterInclusiveRangePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveRangePattern" ):
                listener.exitInclusiveRangePattern(self)


    class ObsoleteRangePatternContext(RangePatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.RangePatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rangePatternBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.RangePatternBoundContext)
            else:
                return self.getTypedRuleContext(RustParser.RangePatternBoundContext,i)

        def DOTDOTDOT(self):
            return self.getToken(RustParser.DOTDOTDOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObsoleteRangePattern" ):
                listener.enterObsoleteRangePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObsoleteRangePattern" ):
                listener.exitObsoleteRangePattern(self)


    class HalfOpenRangePatternContext(RangePatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RustParser.RangePatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rangePatternBound(self):
            return self.getTypedRuleContext(RustParser.RangePatternBoundContext,0)

        def DOTDOT(self):
            return self.getToken(RustParser.DOTDOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHalfOpenRangePattern" ):
                listener.enterHalfOpenRangePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHalfOpenRangePattern" ):
                listener.exitHalfOpenRangePattern(self)



    def rangePattern(self):

        localctx = RustParser.RangePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_rangePattern)
        try:
            self.state = 1903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                localctx = RustParser.InclusiveRangePatternContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1892
                self.rangePatternBound()
                self.state = 1893
                self.match(RustParser.DOTDOTEQ)
                self.state = 1894
                self.rangePatternBound()
                pass

            elif la_ == 2:
                localctx = RustParser.HalfOpenRangePatternContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1896
                self.rangePatternBound()
                self.state = 1897
                self.match(RustParser.DOTDOT)
                pass

            elif la_ == 3:
                localctx = RustParser.ObsoleteRangePatternContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1899
                self.rangePatternBound()
                self.state = 1900
                self.match(RustParser.DOTDOTDOT)
                self.state = 1901
                self.rangePatternBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangePatternBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def BYTE_LITERAL(self):
            return self.getToken(RustParser.BYTE_LITERAL, 0)

        def INTEGER_LITERAL(self):
            return self.getToken(RustParser.INTEGER_LITERAL, 0)

        def MINUS(self):
            return self.getToken(RustParser.MINUS, 0)

        def FLOAT_LITERAL(self):
            return self.getToken(RustParser.FLOAT_LITERAL, 0)

        def pathPattern(self):
            return self.getTypedRuleContext(RustParser.PathPatternContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_rangePatternBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangePatternBound" ):
                listener.enterRangePatternBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangePatternBound" ):
                listener.exitRangePatternBound(self)




    def rangePatternBound(self):

        localctx = RustParser.RangePatternBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_rangePatternBound)
        self._la = 0 # Token type
        try:
            self.state = 1916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1905
                self.match(RustParser.CHAR_LITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1906
                self.match(RustParser.BYTE_LITERAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 1907
                    self.match(RustParser.MINUS)


                self.state = 1910
                self.match(RustParser.INTEGER_LITERAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 1911
                    self.match(RustParser.MINUS)


                self.state = 1914
                self.match(RustParser.FLOAT_LITERAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1915
                self.pathPattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferencePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patternWithoutRange(self):
            return self.getTypedRuleContext(RustParser.PatternWithoutRangeContext,0)


        def AND(self):
            return self.getToken(RustParser.AND, 0)

        def ANDAND(self):
            return self.getToken(RustParser.ANDAND, 0)

        def KW_MUT(self):
            return self.getToken(RustParser.KW_MUT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_referencePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferencePattern" ):
                listener.enterReferencePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferencePattern" ):
                listener.exitReferencePattern(self)




    def referencePattern(self):

        localctx = RustParser.ReferencePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_referencePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1918
            _la = self._input.LA(1)
            if not(_la==89 or _la==91):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 1919
                self.match(RustParser.KW_MUT)


            self.state = 1922
            self.patternWithoutRange()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathInExpression(self):
            return self.getTypedRuleContext(RustParser.PathInExpressionContext,0)


        def LCURLYBRACE(self):
            return self.getToken(RustParser.LCURLYBRACE, 0)

        def RCURLYBRACE(self):
            return self.getToken(RustParser.RCURLYBRACE, 0)

        def structPatternElements(self):
            return self.getTypedRuleContext(RustParser.StructPatternElementsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructPattern" ):
                listener.enterStructPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructPattern" ):
                listener.exitStructPattern(self)




    def structPattern(self):

        localctx = RustParser.StructPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_structPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1924
            self.pathInExpression()
            self.state = 1925
            self.match(RustParser.LCURLYBRACE)
            self.state = 1927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 450359962742292480) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 141012366262273) != 0):
                self.state = 1926
                self.structPatternElements()


            self.state = 1929
            self.match(RustParser.RCURLYBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructPatternElementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structPatternFields(self):
            return self.getTypedRuleContext(RustParser.StructPatternFieldsContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def structPatternEtCetera(self):
            return self.getTypedRuleContext(RustParser.StructPatternEtCeteraContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structPatternElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructPatternElements" ):
                listener.enterStructPatternElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructPatternElements" ):
                listener.exitStructPatternElements(self)




    def structPatternElements(self):

        localctx = RustParser.StructPatternElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_structPatternElements)
        self._la = 0 # Token type
        try:
            self.state = 1939
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1931
                self.structPatternFields()
                self.state = 1936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 1932
                    self.match(RustParser.COMMA)
                    self.state = 1934
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==113 or _la==122:
                        self.state = 1933
                        self.structPatternEtCetera()




                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1938
                self.structPatternEtCetera()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructPatternFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structPatternField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructPatternFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructPatternFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_structPatternFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructPatternFields" ):
                listener.enterStructPatternFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructPatternFields" ):
                listener.exitStructPatternFields(self)




    def structPatternFields(self):

        localctx = RustParser.StructPatternFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_structPatternFields)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1941
            self.structPatternField()
            self.state = 1946
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,260,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1942
                    self.match(RustParser.COMMA)
                    self.state = 1943
                    self.structPatternField() 
                self.state = 1948
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,260,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructPatternFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tupleIndex(self):
            return self.getTypedRuleContext(RustParser.TupleIndexContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def pattern(self):
            return self.getTypedRuleContext(RustParser.PatternContext,0)


        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def outerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.OuterAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.OuterAttributeContext,i)


        def KW_REF(self):
            return self.getToken(RustParser.KW_REF, 0)

        def KW_MUT(self):
            return self.getToken(RustParser.KW_MUT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structPatternField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructPatternField" ):
                listener.enterStructPatternField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructPatternField" ):
                listener.exitStructPatternField(self)




    def structPatternField(self):

        localctx = RustParser.StructPatternFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_structPatternField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==122:
                self.state = 1949
                self.outerAttribute()
                self.state = 1954
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
            if la_ == 1:
                self.state = 1955
                self.tupleIndex()
                self.state = 1956
                self.match(RustParser.COLON)
                self.state = 1957
                self.pattern()
                pass

            elif la_ == 2:
                self.state = 1959
                self.identifier()
                self.state = 1960
                self.match(RustParser.COLON)
                self.state = 1961
                self.pattern()
                pass

            elif la_ == 3:
                self.state = 1964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22:
                    self.state = 1963
                    self.match(RustParser.KW_REF)


                self.state = 1967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 1966
                    self.match(RustParser.KW_MUT)


                self.state = 1969
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructPatternEtCeteraContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOTDOT(self):
            return self.getToken(RustParser.DOTDOT, 0)

        def outerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.OuterAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.OuterAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structPatternEtCetera

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructPatternEtCetera" ):
                listener.enterStructPatternEtCetera(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructPatternEtCetera" ):
                listener.exitStructPatternEtCetera(self)




    def structPatternEtCetera(self):

        localctx = RustParser.StructPatternEtCeteraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_structPatternEtCetera)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==122:
                self.state = 1972
                self.outerAttribute()
                self.state = 1977
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1978
            self.match(RustParser.DOTDOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleStructPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathInExpression(self):
            return self.getTypedRuleContext(RustParser.PathInExpressionContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def tupleStructItems(self):
            return self.getTypedRuleContext(RustParser.TupleStructItemsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_tupleStructPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleStructPattern" ):
                listener.enterTupleStructPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleStructPattern" ):
                listener.exitTupleStructPattern(self)




    def tupleStructPattern(self):

        localctx = RustParser.TupleStructPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_tupleStructPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1980
            self.pathInExpression()
            self.state = 1981
            self.match(RustParser.LPAREN)
            self.state = 1983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 522417558172729888) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1442300045783222399) != 0):
                self.state = 1982
                self.tupleStructItems()


            self.state = 1985
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleStructItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.PatternContext)
            else:
                return self.getTypedRuleContext(RustParser.PatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_tupleStructItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleStructItems" ):
                listener.enterTupleStructItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleStructItems" ):
                listener.exitTupleStructItems(self)




    def tupleStructItems(self):

        localctx = RustParser.TupleStructItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_tupleStructItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1987
            self.pattern()
            self.state = 1992
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,267,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1988
                    self.match(RustParser.COMMA)
                    self.state = 1989
                    self.pattern() 
                self.state = 1994
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,267,self._ctx)

            self.state = 1996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 1995
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TuplePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def tuplePatternItems(self):
            return self.getTypedRuleContext(RustParser.TuplePatternItemsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_tuplePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuplePattern" ):
                listener.enterTuplePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuplePattern" ):
                listener.exitTuplePattern(self)




    def tuplePattern(self):

        localctx = RustParser.TuplePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_tuplePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1998
            self.match(RustParser.LPAREN)
            self.state = 2000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 522417558172729888) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1442300045783222399) != 0):
                self.state = 1999
                self.tuplePatternItems()


            self.state = 2002
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TuplePatternItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.PatternContext)
            else:
                return self.getTypedRuleContext(RustParser.PatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def restPattern(self):
            return self.getTypedRuleContext(RustParser.RestPatternContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_tuplePatternItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuplePatternItems" ):
                listener.enterTuplePatternItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuplePatternItems" ):
                listener.exitTuplePatternItems(self)




    def tuplePatternItems(self):

        localctx = RustParser.TuplePatternItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_tuplePatternItems)
        self._la = 0 # Token type
        try:
            self.state = 2018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2004
                self.pattern()
                self.state = 2005
                self.match(RustParser.COMMA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2007
                self.restPattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2008
                self.pattern()
                self.state = 2011 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2009
                        self.match(RustParser.COMMA)
                        self.state = 2010
                        self.pattern()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2013 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,270,self._ctx)

                self.state = 2016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 2015
                    self.match(RustParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupedPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def pattern(self):
            return self.getTypedRuleContext(RustParser.PatternContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_groupedPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupedPattern" ):
                listener.enterGroupedPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupedPattern" ):
                listener.exitGroupedPattern(self)




    def groupedPattern(self):

        localctx = RustParser.GroupedPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_groupedPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2020
            self.match(RustParser.LPAREN)
            self.state = 2021
            self.pattern()
            self.state = 2022
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlicePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUAREBRACKET(self):
            return self.getToken(RustParser.LSQUAREBRACKET, 0)

        def RSQUAREBRACKET(self):
            return self.getToken(RustParser.RSQUAREBRACKET, 0)

        def slicePatternItems(self):
            return self.getTypedRuleContext(RustParser.SlicePatternItemsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_slicePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlicePattern" ):
                listener.enterSlicePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlicePattern" ):
                listener.exitSlicePattern(self)




    def slicePattern(self):

        localctx = RustParser.SlicePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_slicePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2024
            self.match(RustParser.LSQUAREBRACKET)
            self.state = 2026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 522417558172729888) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1442300045783222399) != 0):
                self.state = 2025
                self.slicePatternItems()


            self.state = 2028
            self.match(RustParser.RSQUAREBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlicePatternItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.PatternContext)
            else:
                return self.getTypedRuleContext(RustParser.PatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_slicePatternItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlicePatternItems" ):
                listener.enterSlicePatternItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlicePatternItems" ):
                listener.exitSlicePatternItems(self)




    def slicePatternItems(self):

        localctx = RustParser.SlicePatternItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_slicePatternItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2030
            self.pattern()
            self.state = 2035
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,274,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2031
                    self.match(RustParser.COMMA)
                    self.state = 2032
                    self.pattern() 
                self.state = 2037
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,274,self._ctx)

            self.state = 2039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 2038
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathInExpression(self):
            return self.getTypedRuleContext(RustParser.PathInExpressionContext,0)


        def qualifiedPathInExpression(self):
            return self.getTypedRuleContext(RustParser.QualifiedPathInExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathPattern" ):
                listener.enterPathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathPattern" ):
                listener.exitPathPattern(self)




    def pathPattern(self):

        localctx = RustParser.PathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_pathPattern)
        try:
            self.state = 2043
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 24, 25, 28, 54, 56, 57, 58, 119]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2041
                self.pathInExpression()
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2042
                self.qualifiedPathInExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeNoBounds(self):
            return self.getTypedRuleContext(RustParser.TypeNoBoundsContext,0)


        def implTraitType(self):
            return self.getTypedRuleContext(RustParser.ImplTraitTypeContext,0)


        def traitObjectType(self):
            return self.getTypedRuleContext(RustParser.TraitObjectTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_type_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_" ):
                listener.enterType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_" ):
                listener.exitType_(self)




    def type_(self):

        localctx = RustParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_type_)
        try:
            self.state = 2048
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2045
                self.typeNoBounds()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2046
                self.implTraitType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2047
                self.traitObjectType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNoBoundsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parenthesizedType(self):
            return self.getTypedRuleContext(RustParser.ParenthesizedTypeContext,0)


        def implTraitTypeOneBound(self):
            return self.getTypedRuleContext(RustParser.ImplTraitTypeOneBoundContext,0)


        def traitObjectTypeOneBound(self):
            return self.getTypedRuleContext(RustParser.TraitObjectTypeOneBoundContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def tupleType(self):
            return self.getTypedRuleContext(RustParser.TupleTypeContext,0)


        def neverType(self):
            return self.getTypedRuleContext(RustParser.NeverTypeContext,0)


        def rawPointerType(self):
            return self.getTypedRuleContext(RustParser.RawPointerTypeContext,0)


        def referenceType(self):
            return self.getTypedRuleContext(RustParser.ReferenceTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(RustParser.ArrayTypeContext,0)


        def sliceType(self):
            return self.getTypedRuleContext(RustParser.SliceTypeContext,0)


        def inferredType(self):
            return self.getTypedRuleContext(RustParser.InferredTypeContext,0)


        def qualifiedPathInType(self):
            return self.getTypedRuleContext(RustParser.QualifiedPathInTypeContext,0)


        def bareFunctionType(self):
            return self.getTypedRuleContext(RustParser.BareFunctionTypeContext,0)


        def macroInvocation(self):
            return self.getTypedRuleContext(RustParser.MacroInvocationContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeNoBounds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNoBounds" ):
                listener.enterTypeNoBounds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNoBounds" ):
                listener.exitTypeNoBounds(self)




    def typeNoBounds(self):

        localctx = RustParser.TypeNoBoundsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_typeNoBounds)
        try:
            self.state = 2064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2050
                self.parenthesizedType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2051
                self.implTraitTypeOneBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2052
                self.traitObjectTypeOneBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2053
                self.typePath()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2054
                self.tupleType()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2055
                self.neverType()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2056
                self.rawPointerType()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2057
                self.referenceType()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2058
                self.arrayType()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2059
                self.sliceType()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2060
                self.inferredType()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2061
                self.qualifiedPathInType()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2062
                self.bareFunctionType()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2063
                self.macroInvocation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_parenthesizedType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedType" ):
                listener.enterParenthesizedType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedType" ):
                listener.exitParenthesizedType(self)




    def parenthesizedType(self):

        localctx = RustParser.ParenthesizedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_parenthesizedType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2066
            self.match(RustParser.LPAREN)
            self.state = 2067
            self.type_()
            self.state = 2068
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NeverTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(RustParser.NOT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_neverType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNeverType" ):
                listener.enterNeverType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNeverType" ):
                listener.exitNeverType(self)




    def neverType(self):

        localctx = RustParser.NeverTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_neverType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2070
            self.match(RustParser.NOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.Type_Context)
            else:
                return self.getTypedRuleContext(RustParser.Type_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_tupleType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleType" ):
                listener.enterTupleType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleType" ):
                listener.exitTupleType(self)




    def tupleType(self):

        localctx = RustParser.TupleTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_tupleType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2072
            self.match(RustParser.LPAREN)
            self.state = 2083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 567453832540335392) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 360915832668553) != 0):
                self.state = 2076 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2073
                        self.type_()
                        self.state = 2074
                        self.match(RustParser.COMMA)

                    else:
                        raise NoViableAltException(self)
                    self.state = 2078 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,279,self._ctx)

                self.state = 2081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 567453832540335392) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 360915832668553) != 0):
                    self.state = 2080
                    self.type_()




            self.state = 2085
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUAREBRACKET(self):
            return self.getToken(RustParser.LSQUAREBRACKET, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def SEMI(self):
            return self.getToken(RustParser.SEMI, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RSQUAREBRACKET(self):
            return self.getToken(RustParser.RSQUAREBRACKET, 0)

        def getRuleIndex(self):
            return RustParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)




    def arrayType(self):

        localctx = RustParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2087
            self.match(RustParser.LSQUAREBRACKET)
            self.state = 2088
            self.type_()
            self.state = 2089
            self.match(RustParser.SEMI)
            self.state = 2090
            self.expression(0)
            self.state = 2091
            self.match(RustParser.RSQUAREBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUAREBRACKET(self):
            return self.getToken(RustParser.LSQUAREBRACKET, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def RSQUAREBRACKET(self):
            return self.getToken(RustParser.RSQUAREBRACKET, 0)

        def getRuleIndex(self):
            return RustParser.RULE_sliceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceType" ):
                listener.enterSliceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceType" ):
                listener.exitSliceType(self)




    def sliceType(self):

        localctx = RustParser.SliceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_sliceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2093
            self.match(RustParser.LSQUAREBRACKET)
            self.state = 2094
            self.type_()
            self.state = 2095
            self.match(RustParser.RSQUAREBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(RustParser.AND, 0)

        def typeNoBounds(self):
            return self.getTypedRuleContext(RustParser.TypeNoBoundsContext,0)


        def lifetime(self):
            return self.getTypedRuleContext(RustParser.LifetimeContext,0)


        def KW_MUT(self):
            return self.getToken(RustParser.KW_MUT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_referenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceType" ):
                listener.enterReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceType" ):
                listener.exitReferenceType(self)




    def referenceType(self):

        localctx = RustParser.ReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_referenceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2097
            self.match(RustParser.AND)
            self.state = 2099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 268435461) != 0):
                self.state = 2098
                self.lifetime()


            self.state = 2102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2101
                self.match(RustParser.KW_MUT)


            self.state = 2104
            self.typeNoBounds()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RawPointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(RustParser.STAR, 0)

        def typeNoBounds(self):
            return self.getTypedRuleContext(RustParser.TypeNoBoundsContext,0)


        def KW_MUT(self):
            return self.getToken(RustParser.KW_MUT, 0)

        def KW_CONST(self):
            return self.getToken(RustParser.KW_CONST, 0)

        def getRuleIndex(self):
            return RustParser.RULE_rawPointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRawPointerType" ):
                listener.enterRawPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRawPointerType" ):
                listener.exitRawPointerType(self)




    def rawPointerType(self):

        localctx = RustParser.RawPointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_rawPointerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2106
            self.match(RustParser.STAR)
            self.state = 2107
            _la = self._input.LA(1)
            if not(_la==3 or _la==20):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2108
            self.typeNoBounds()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BareFunctionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeQualifiers(self):
            return self.getTypedRuleContext(RustParser.FunctionTypeQualifiersContext,0)


        def KW_FN(self):
            return self.getToken(RustParser.KW_FN, 0)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def forLifetimes(self):
            return self.getTypedRuleContext(RustParser.ForLifetimesContext,0)


        def functionParametersMaybeNamedVariadic(self):
            return self.getTypedRuleContext(RustParser.FunctionParametersMaybeNamedVariadicContext,0)


        def bareFunctionReturnType(self):
            return self.getTypedRuleContext(RustParser.BareFunctionReturnTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_bareFunctionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBareFunctionType" ):
                listener.enterBareFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBareFunctionType" ):
                listener.exitBareFunctionType(self)




    def bareFunctionType(self):

        localctx = RustParser.BareFunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_bareFunctionType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 2110
                self.forLifetimes()


            self.state = 2113
            self.functionTypeQualifiers()
            self.state = 2114
            self.match(RustParser.KW_FN)
            self.state = 2115
            self.match(RustParser.LPAREN)
            self.state = 2117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 567453832540335392) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 363114855924105) != 0):
                self.state = 2116
                self.functionParametersMaybeNamedVariadic()


            self.state = 2119
            self.match(RustParser.RPAREN)
            self.state = 2121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.state = 2120
                self.bareFunctionReturnType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeQualifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNSAFE(self):
            return self.getToken(RustParser.KW_UNSAFE, 0)

        def KW_EXTERN(self):
            return self.getToken(RustParser.KW_EXTERN, 0)

        def abi(self):
            return self.getTypedRuleContext(RustParser.AbiContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionTypeQualifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeQualifiers" ):
                listener.enterFunctionTypeQualifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeQualifiers" ):
                listener.exitFunctionTypeQualifiers(self)




    def functionTypeQualifiers(self):

        localctx = RustParser.FunctionTypeQualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_functionTypeQualifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 2123
                self.match(RustParser.KW_UNSAFE)


            self.state = 2130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 2126
                self.match(RustParser.KW_EXTERN)
                self.state = 2128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==70 or _la==71:
                    self.state = 2127
                    self.abi()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BareFunctionReturnTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RARROW(self):
            return self.getToken(RustParser.RARROW, 0)

        def typeNoBounds(self):
            return self.getTypedRuleContext(RustParser.TypeNoBoundsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_bareFunctionReturnType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBareFunctionReturnType" ):
                listener.enterBareFunctionReturnType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBareFunctionReturnType" ):
                listener.exitBareFunctionReturnType(self)




    def bareFunctionReturnType(self):

        localctx = RustParser.BareFunctionReturnTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_bareFunctionReturnType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2132
            self.match(RustParser.RARROW)
            self.state = 2133
            self.typeNoBounds()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionParametersMaybeNamedVariadicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybeNamedFunctionParameters(self):
            return self.getTypedRuleContext(RustParser.MaybeNamedFunctionParametersContext,0)


        def maybeNamedFunctionParametersVariadic(self):
            return self.getTypedRuleContext(RustParser.MaybeNamedFunctionParametersVariadicContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionParametersMaybeNamedVariadic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionParametersMaybeNamedVariadic" ):
                listener.enterFunctionParametersMaybeNamedVariadic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionParametersMaybeNamedVariadic" ):
                listener.exitFunctionParametersMaybeNamedVariadic(self)




    def functionParametersMaybeNamedVariadic(self):

        localctx = RustParser.FunctionParametersMaybeNamedVariadicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_functionParametersMaybeNamedVariadic)
        try:
            self.state = 2137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2135
                self.maybeNamedFunctionParameters()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2136
                self.maybeNamedFunctionParametersVariadic()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaybeNamedFunctionParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybeNamedParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MaybeNamedParamContext)
            else:
                return self.getTypedRuleContext(RustParser.MaybeNamedParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_maybeNamedFunctionParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybeNamedFunctionParameters" ):
                listener.enterMaybeNamedFunctionParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybeNamedFunctionParameters" ):
                listener.exitMaybeNamedFunctionParameters(self)




    def maybeNamedFunctionParameters(self):

        localctx = RustParser.MaybeNamedFunctionParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_maybeNamedFunctionParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2139
            self.maybeNamedParam()
            self.state = 2144
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,291,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2140
                    self.match(RustParser.COMMA)
                    self.state = 2141
                    self.maybeNamedParam() 
                self.state = 2146
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,291,self._ctx)

            self.state = 2148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 2147
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaybeNamedParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def outerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.OuterAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.OuterAttributeContext,i)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_maybeNamedParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybeNamedParam" ):
                listener.enterMaybeNamedParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybeNamedParam" ):
                listener.exitMaybeNamedParam(self)




    def maybeNamedParam(self):

        localctx = RustParser.MaybeNamedParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_maybeNamedParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==122:
                self.state = 2150
                self.outerAttribute()
                self.state = 2155
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 2158
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [54, 57, 58]:
                    self.state = 2156
                    self.identifier()
                    pass
                elif token in [111]:
                    self.state = 2157
                    self.match(RustParser.UNDERSCORE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2160
                self.match(RustParser.COLON)


            self.state = 2163
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaybeNamedFunctionParametersVariadicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybeNamedParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MaybeNamedParamContext)
            else:
                return self.getTypedRuleContext(RustParser.MaybeNamedParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def DOTDOTDOT(self):
            return self.getToken(RustParser.DOTDOTDOT, 0)

        def outerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.OuterAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.OuterAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_maybeNamedFunctionParametersVariadic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybeNamedFunctionParametersVariadic" ):
                listener.enterMaybeNamedFunctionParametersVariadic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybeNamedFunctionParametersVariadic" ):
                listener.exitMaybeNamedFunctionParametersVariadic(self)




    def maybeNamedFunctionParametersVariadic(self):

        localctx = RustParser.MaybeNamedFunctionParametersVariadicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_maybeNamedFunctionParametersVariadic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2170
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,296,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2165
                    self.maybeNamedParam()
                    self.state = 2166
                    self.match(RustParser.COMMA) 
                self.state = 2172
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,296,self._ctx)

            self.state = 2173
            self.maybeNamedParam()
            self.state = 2174
            self.match(RustParser.COMMA)
            self.state = 2178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==122:
                self.state = 2175
                self.outerAttribute()
                self.state = 2180
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2181
            self.match(RustParser.DOTDOTDOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitObjectTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParamBounds(self):
            return self.getTypedRuleContext(RustParser.TypeParamBoundsContext,0)


        def KW_DYN(self):
            return self.getToken(RustParser.KW_DYN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_traitObjectType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitObjectType" ):
                listener.enterTraitObjectType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitObjectType" ):
                listener.exitTraitObjectType(self)




    def traitObjectType(self):

        localctx = RustParser.TraitObjectTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_traitObjectType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 2183
                self.match(RustParser.KW_DYN)


            self.state = 2186
            self.typeParamBounds()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitObjectTypeOneBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traitBound(self):
            return self.getTypedRuleContext(RustParser.TraitBoundContext,0)


        def KW_DYN(self):
            return self.getToken(RustParser.KW_DYN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_traitObjectTypeOneBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitObjectTypeOneBound" ):
                listener.enterTraitObjectTypeOneBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitObjectTypeOneBound" ):
                listener.exitTraitObjectTypeOneBound(self)




    def traitObjectTypeOneBound(self):

        localctx = RustParser.TraitObjectTypeOneBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_traitObjectTypeOneBound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 2188
                self.match(RustParser.KW_DYN)


            self.state = 2191
            self.traitBound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplTraitTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IMPL(self):
            return self.getToken(RustParser.KW_IMPL, 0)

        def typeParamBounds(self):
            return self.getTypedRuleContext(RustParser.TypeParamBoundsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_implTraitType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplTraitType" ):
                listener.enterImplTraitType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplTraitType" ):
                listener.exitImplTraitType(self)




    def implTraitType(self):

        localctx = RustParser.ImplTraitTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_implTraitType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2193
            self.match(RustParser.KW_IMPL)
            self.state = 2194
            self.typeParamBounds()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplTraitTypeOneBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IMPL(self):
            return self.getToken(RustParser.KW_IMPL, 0)

        def traitBound(self):
            return self.getTypedRuleContext(RustParser.TraitBoundContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_implTraitTypeOneBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplTraitTypeOneBound" ):
                listener.enterImplTraitTypeOneBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplTraitTypeOneBound" ):
                listener.exitImplTraitTypeOneBound(self)




    def implTraitTypeOneBound(self):

        localctx = RustParser.ImplTraitTypeOneBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_implTraitTypeOneBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2196
            self.match(RustParser.KW_IMPL)
            self.state = 2197
            self.traitBound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InferredTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_inferredType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInferredType" ):
                listener.enterInferredType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInferredType" ):
                listener.exitInferredType(self)




    def inferredType(self):

        localctx = RustParser.InferredTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_inferredType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2199
            self.match(RustParser.UNDERSCORE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParamBoundsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParamBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeParamBoundContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeParamBoundContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.PLUS)
            else:
                return self.getToken(RustParser.PLUS, i)

        def getRuleIndex(self):
            return RustParser.RULE_typeParamBounds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParamBounds" ):
                listener.enterTypeParamBounds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParamBounds" ):
                listener.exitTypeParamBounds(self)




    def typeParamBounds(self):

        localctx = RustParser.TypeParamBoundsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_typeParamBounds)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2201
            self.typeParamBound()
            self.state = 2206
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,300,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2202
                    self.match(RustParser.PLUS)
                    self.state = 2203
                    self.typeParamBound() 
                self.state = 2208
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,300,self._ctx)

            self.state = 2210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2209
                self.match(RustParser.PLUS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParamBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lifetime(self):
            return self.getTypedRuleContext(RustParser.LifetimeContext,0)


        def traitBound(self):
            return self.getTypedRuleContext(RustParser.TraitBoundContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeParamBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParamBound" ):
                listener.enterTypeParamBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParamBound" ):
                listener.exitTypeParamBound(self)




    def typeParamBound(self):

        localctx = RustParser.TypeParamBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_typeParamBound)
        try:
            self.state = 2214
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 55, 81]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2212
                self.lifetime()
                pass
            elif token in [5, 11, 24, 25, 28, 54, 56, 57, 58, 119, 124, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2213
                self.traitBound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def QUESTION(self):
            return self.getToken(RustParser.QUESTION, 0)

        def forLifetimes(self):
            return self.getTypedRuleContext(RustParser.ForLifetimesContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_traitBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitBound" ):
                listener.enterTraitBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitBound" ):
                listener.exitTraitBound(self)




    def traitBound(self):

        localctx = RustParser.TraitBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_traitBound)
        self._la = 0 # Token type
        try:
            self.state = 2233
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 11, 24, 25, 28, 54, 56, 57, 58, 119, 124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==124:
                    self.state = 2216
                    self.match(RustParser.QUESTION)


                self.state = 2220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 2219
                    self.forLifetimes()


                self.state = 2222
                self.typePath()
                pass
            elif token in [129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2223
                self.match(RustParser.LPAREN)
                self.state = 2225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==124:
                    self.state = 2224
                    self.match(RustParser.QUESTION)


                self.state = 2228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 2227
                    self.forLifetimes()


                self.state = 2230
                self.typePath()
                self.state = 2231
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LifetimeBoundsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lifetime(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.LifetimeContext)
            else:
                return self.getTypedRuleContext(RustParser.LifetimeContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.PLUS)
            else:
                return self.getToken(RustParser.PLUS, i)

        def getRuleIndex(self):
            return RustParser.RULE_lifetimeBounds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLifetimeBounds" ):
                listener.enterLifetimeBounds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLifetimeBounds" ):
                listener.exitLifetimeBounds(self)




    def lifetimeBounds(self):

        localctx = RustParser.LifetimeBoundsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_lifetimeBounds)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2240
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,308,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2235
                    self.lifetime()
                    self.state = 2236
                    self.match(RustParser.PLUS) 
                self.state = 2242
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,308,self._ctx)

            self.state = 2244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 268435461) != 0):
                self.state = 2243
                self.lifetime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LifetimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIFETIME_OR_LABEL(self):
            return self.getToken(RustParser.LIFETIME_OR_LABEL, 0)

        def KW_STATICLIFETIME(self):
            return self.getToken(RustParser.KW_STATICLIFETIME, 0)

        def KW_UNDERLINELIFETIME(self):
            return self.getToken(RustParser.KW_UNDERLINELIFETIME, 0)

        def getRuleIndex(self):
            return RustParser.RULE_lifetime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLifetime" ):
                listener.enterLifetime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLifetime" ):
                listener.exitLifetime(self)




    def lifetime(self):

        localctx = RustParser.LifetimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_lifetime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2246
            _la = self._input.LA(1)
            if not(((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 268435461) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplePathSegment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.SimplePathSegmentContext)
            else:
                return self.getTypedRuleContext(RustParser.SimplePathSegmentContext,i)


        def PATHSEP(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.PATHSEP)
            else:
                return self.getToken(RustParser.PATHSEP, i)

        def getRuleIndex(self):
            return RustParser.RULE_simplePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplePath" ):
                listener.enterSimplePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplePath" ):
                listener.exitSimplePath(self)




    def simplePath(self):

        localctx = RustParser.SimplePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_simplePath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 2248
                self.match(RustParser.PATHSEP)


            self.state = 2251
            self.simplePathSegment()
            self.state = 2256
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,311,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2252
                    self.match(RustParser.PATHSEP)
                    self.state = 2253
                    self.simplePathSegment() 
                self.state = 2258
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,311,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplePathSegmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def KW_SUPER(self):
            return self.getToken(RustParser.KW_SUPER, 0)

        def KW_SELFVALUE(self):
            return self.getToken(RustParser.KW_SELFVALUE, 0)

        def KW_CRATE(self):
            return self.getToken(RustParser.KW_CRATE, 0)

        def KW_DOLLARCRATE(self):
            return self.getToken(RustParser.KW_DOLLARCRATE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_simplePathSegment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplePathSegment" ):
                listener.enterSimplePathSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplePathSegment" ):
                listener.exitSimplePathSegment(self)




    def simplePathSegment(self):

        localctx = RustParser.SimplePathSegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_simplePathSegment)
        try:
            self.state = 2264
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 57, 58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2259
                self.identifier()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2260
                self.match(RustParser.KW_SUPER)
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2261
                self.match(RustParser.KW_SELFVALUE)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2262
                self.match(RustParser.KW_CRATE)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2263
                self.match(RustParser.KW_DOLLARCRATE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathInExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathExprSegment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.PathExprSegmentContext)
            else:
                return self.getTypedRuleContext(RustParser.PathExprSegmentContext,i)


        def PATHSEP(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.PATHSEP)
            else:
                return self.getToken(RustParser.PATHSEP, i)

        def getRuleIndex(self):
            return RustParser.RULE_pathInExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathInExpression" ):
                listener.enterPathInExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathInExpression" ):
                listener.exitPathInExpression(self)




    def pathInExpression(self):

        localctx = RustParser.PathInExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_pathInExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 2266
                self.match(RustParser.PATHSEP)


            self.state = 2269
            self.pathExprSegment()
            self.state = 2274
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,314,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2270
                    self.match(RustParser.PATHSEP)
                    self.state = 2271
                    self.pathExprSegment() 
                self.state = 2276
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,314,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathExprSegmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathIdentSegment(self):
            return self.getTypedRuleContext(RustParser.PathIdentSegmentContext,0)


        def PATHSEP(self):
            return self.getToken(RustParser.PATHSEP, 0)

        def genericArgs(self):
            return self.getTypedRuleContext(RustParser.GenericArgsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pathExprSegment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathExprSegment" ):
                listener.enterPathExprSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathExprSegment" ):
                listener.exitPathExprSegment(self)




    def pathExprSegment(self):

        localctx = RustParser.PathExprSegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_pathExprSegment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2277
            self.pathIdentSegment()
            self.state = 2280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                self.state = 2278
                self.match(RustParser.PATHSEP)
                self.state = 2279
                self.genericArgs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathIdentSegmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def KW_SUPER(self):
            return self.getToken(RustParser.KW_SUPER, 0)

        def KW_SELFVALUE(self):
            return self.getToken(RustParser.KW_SELFVALUE, 0)

        def KW_SELFTYPE(self):
            return self.getToken(RustParser.KW_SELFTYPE, 0)

        def KW_CRATE(self):
            return self.getToken(RustParser.KW_CRATE, 0)

        def KW_DOLLARCRATE(self):
            return self.getToken(RustParser.KW_DOLLARCRATE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_pathIdentSegment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathIdentSegment" ):
                listener.enterPathIdentSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathIdentSegment" ):
                listener.exitPathIdentSegment(self)




    def pathIdentSegment(self):

        localctx = RustParser.PathIdentSegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_pathIdentSegment)
        try:
            self.state = 2288
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 57, 58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2282
                self.identifier()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2283
                self.match(RustParser.KW_SUPER)
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2284
                self.match(RustParser.KW_SELFVALUE)
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2285
                self.match(RustParser.KW_SELFTYPE)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2286
                self.match(RustParser.KW_CRATE)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2287
                self.match(RustParser.KW_DOLLARCRATE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(RustParser.LT, 0)

        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def genericArgsLifetimes(self):
            return self.getTypedRuleContext(RustParser.GenericArgsLifetimesContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def genericArgsTypes(self):
            return self.getTypedRuleContext(RustParser.GenericArgsTypesContext,0)


        def genericArgsBindings(self):
            return self.getTypedRuleContext(RustParser.GenericArgsBindingsContext,0)


        def genericArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.GenericArgContext)
            else:
                return self.getTypedRuleContext(RustParser.GenericArgContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_genericArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArgs" ):
                listener.enterGenericArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArgs" ):
                listener.exitGenericArgs(self)




    def genericArgs(self):

        localctx = RustParser.GenericArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_genericArgs)
        self._la = 0 # Token type
        try:
            self.state = 2333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2290
                self.match(RustParser.LT)
                self.state = 2291
                self.match(RustParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2292
                self.match(RustParser.LT)
                self.state = 2293
                self.genericArgsLifetimes()
                self.state = 2296
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
                if la_ == 1:
                    self.state = 2294
                    self.match(RustParser.COMMA)
                    self.state = 2295
                    self.genericArgsTypes()


                self.state = 2300
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
                if la_ == 1:
                    self.state = 2298
                    self.match(RustParser.COMMA)
                    self.state = 2299
                    self.genericArgsBindings()


                self.state = 2303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 2302
                    self.match(RustParser.COMMA)


                self.state = 2305
                self.match(RustParser.GT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2307
                self.match(RustParser.LT)
                self.state = 2308
                self.genericArgsTypes()
                self.state = 2311
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
                if la_ == 1:
                    self.state = 2309
                    self.match(RustParser.COMMA)
                    self.state = 2310
                    self.genericArgsBindings()


                self.state = 2314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 2313
                    self.match(RustParser.COMMA)


                self.state = 2316
                self.match(RustParser.GT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2318
                self.match(RustParser.LT)
                self.state = 2324
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,322,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2319
                        self.genericArg()
                        self.state = 2320
                        self.match(RustParser.COMMA) 
                    self.state = 2326
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,322,self._ctx)

                self.state = 2327
                self.genericArg()
                self.state = 2329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 2328
                    self.match(RustParser.COMMA)


                self.state = 2331
                self.match(RustParser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lifetime(self):
            return self.getTypedRuleContext(RustParser.LifetimeContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def genericArgsConst(self):
            return self.getTypedRuleContext(RustParser.GenericArgsConstContext,0)


        def genericArgsBinding(self):
            return self.getTypedRuleContext(RustParser.GenericArgsBindingContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_genericArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArg" ):
                listener.enterGenericArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArg" ):
                listener.exitGenericArg(self)




    def genericArg(self):

        localctx = RustParser.GenericArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_genericArg)
        try:
            self.state = 2339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2335
                self.lifetime()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2336
                self.type_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2337
                self.genericArgsConst()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2338
                self.genericArgsBinding()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgsConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockExpression(self):
            return self.getTypedRuleContext(RustParser.BlockExpressionContext,0)


        def literalExpression(self):
            return self.getTypedRuleContext(RustParser.LiteralExpressionContext,0)


        def MINUS(self):
            return self.getToken(RustParser.MINUS, 0)

        def simplePathSegment(self):
            return self.getTypedRuleContext(RustParser.SimplePathSegmentContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_genericArgsConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArgsConst" ):
                listener.enterGenericArgsConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArgsConst" ):
                listener.exitGenericArgsConst(self)




    def genericArgsConst(self):

        localctx = RustParser.GenericArgsConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_genericArgsConst)
        self._la = 0 # Token type
        try:
            self.state = 2347
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2341
                self.blockExpression()
                pass
            elif token in [9, 30, 69, 70, 71, 72, 73, 74, 75, 80, 83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 2342
                    self.match(RustParser.MINUS)


                self.state = 2345
                self.literalExpression()
                pass
            elif token in [5, 24, 28, 54, 56, 57, 58]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2346
                self.simplePathSegment()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgsLifetimesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lifetime(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.LifetimeContext)
            else:
                return self.getTypedRuleContext(RustParser.LifetimeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_genericArgsLifetimes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArgsLifetimes" ):
                listener.enterGenericArgsLifetimes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArgsLifetimes" ):
                listener.exitGenericArgsLifetimes(self)




    def genericArgsLifetimes(self):

        localctx = RustParser.GenericArgsLifetimesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_genericArgsLifetimes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2349
            self.lifetime()
            self.state = 2354
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,328,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2350
                    self.match(RustParser.COMMA)
                    self.state = 2351
                    self.lifetime() 
                self.state = 2356
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,328,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgsTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.Type_Context)
            else:
                return self.getTypedRuleContext(RustParser.Type_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_genericArgsTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArgsTypes" ):
                listener.enterGenericArgsTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArgsTypes" ):
                listener.exitGenericArgsTypes(self)




    def genericArgsTypes(self):

        localctx = RustParser.GenericArgsTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_genericArgsTypes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2357
            self.type_()
            self.state = 2362
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,329,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2358
                    self.match(RustParser.COMMA)
                    self.state = 2359
                    self.type_() 
                self.state = 2364
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,329,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgsBindingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericArgsBinding(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.GenericArgsBindingContext)
            else:
                return self.getTypedRuleContext(RustParser.GenericArgsBindingContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_genericArgsBindings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArgsBindings" ):
                listener.enterGenericArgsBindings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArgsBindings" ):
                listener.exitGenericArgsBindings(self)




    def genericArgsBindings(self):

        localctx = RustParser.GenericArgsBindingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_genericArgsBindings)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2365
            self.genericArgsBinding()
            self.state = 2370
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,330,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2366
                    self.match(RustParser.COMMA)
                    self.state = 2367
                    self.genericArgsBinding() 
                self.state = 2372
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,330,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgsBindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(RustParser.EQ, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def getRuleIndex(self):
            return RustParser.RULE_genericArgsBinding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArgsBinding" ):
                listener.enterGenericArgsBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArgsBinding" ):
                listener.exitGenericArgsBinding(self)




    def genericArgsBinding(self):

        localctx = RustParser.GenericArgsBindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_genericArgsBinding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2373
            self.identifier()
            self.state = 2374
            self.match(RustParser.EQ)
            self.state = 2375
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedPathInExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedPathType(self):
            return self.getTypedRuleContext(RustParser.QualifiedPathTypeContext,0)


        def PATHSEP(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.PATHSEP)
            else:
                return self.getToken(RustParser.PATHSEP, i)

        def pathExprSegment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.PathExprSegmentContext)
            else:
                return self.getTypedRuleContext(RustParser.PathExprSegmentContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_qualifiedPathInExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedPathInExpression" ):
                listener.enterQualifiedPathInExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedPathInExpression" ):
                listener.exitQualifiedPathInExpression(self)




    def qualifiedPathInExpression(self):

        localctx = RustParser.QualifiedPathInExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_qualifiedPathInExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2377
            self.qualifiedPathType()
            self.state = 2380 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2378
                    self.match(RustParser.PATHSEP)
                    self.state = 2379
                    self.pathExprSegment()

                else:
                    raise NoViableAltException(self)
                self.state = 2382 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,331,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedPathTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(RustParser.LT, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def KW_AS(self):
            return self.getToken(RustParser.KW_AS, 0)

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_qualifiedPathType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedPathType" ):
                listener.enterQualifiedPathType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedPathType" ):
                listener.exitQualifiedPathType(self)




    def qualifiedPathType(self):

        localctx = RustParser.QualifiedPathTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_qualifiedPathType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2384
            self.match(RustParser.LT)
            self.state = 2385
            self.type_()
            self.state = 2388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 2386
                self.match(RustParser.KW_AS)
                self.state = 2387
                self.typePath()


            self.state = 2390
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedPathInTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedPathType(self):
            return self.getTypedRuleContext(RustParser.QualifiedPathTypeContext,0)


        def PATHSEP(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.PATHSEP)
            else:
                return self.getToken(RustParser.PATHSEP, i)

        def typePathSegment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypePathSegmentContext)
            else:
                return self.getTypedRuleContext(RustParser.TypePathSegmentContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_qualifiedPathInType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedPathInType" ):
                listener.enterQualifiedPathInType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedPathInType" ):
                listener.exitQualifiedPathInType(self)




    def qualifiedPathInType(self):

        localctx = RustParser.QualifiedPathInTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_qualifiedPathInType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2392
            self.qualifiedPathType()
            self.state = 2395 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2393
                    self.match(RustParser.PATHSEP)
                    self.state = 2394
                    self.typePathSegment()

                else:
                    raise NoViableAltException(self)
                self.state = 2397 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,333,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePathSegment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypePathSegmentContext)
            else:
                return self.getTypedRuleContext(RustParser.TypePathSegmentContext,i)


        def PATHSEP(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.PATHSEP)
            else:
                return self.getToken(RustParser.PATHSEP, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePath" ):
                listener.enterTypePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePath" ):
                listener.exitTypePath(self)




    def typePath(self):

        localctx = RustParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 2399
                self.match(RustParser.PATHSEP)


            self.state = 2402
            self.typePathSegment()
            self.state = 2407
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,335,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2403
                    self.match(RustParser.PATHSEP)
                    self.state = 2404
                    self.typePathSegment() 
                self.state = 2409
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,335,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathSegmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathIdentSegment(self):
            return self.getTypedRuleContext(RustParser.PathIdentSegmentContext,0)


        def PATHSEP(self):
            return self.getToken(RustParser.PATHSEP, 0)

        def genericArgs(self):
            return self.getTypedRuleContext(RustParser.GenericArgsContext,0)


        def typePathFn(self):
            return self.getTypedRuleContext(RustParser.TypePathFnContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typePathSegment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePathSegment" ):
                listener.enterTypePathSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePathSegment" ):
                listener.exitTypePathSegment(self)




    def typePathSegment(self):

        localctx = RustParser.TypePathSegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_typePathSegment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2410
            self.pathIdentSegment()
            self.state = 2412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.state = 2411
                self.match(RustParser.PATHSEP)


            self.state = 2416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.state = 2414
                self.genericArgs()

            elif la_ == 2:
                self.state = 2415
                self.typePathFn()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathFnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def typePathInputs(self):
            return self.getTypedRuleContext(RustParser.TypePathInputsContext,0)


        def RARROW(self):
            return self.getToken(RustParser.RARROW, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.Type_Context,0)


        def getRuleIndex(self):
            return RustParser.RULE_typePathFn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePathFn" ):
                listener.enterTypePathFn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePathFn" ):
                listener.exitTypePathFn(self)




    def typePathFn(self):

        localctx = RustParser.TypePathFnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_typePathFn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2418
            self.match(RustParser.LPAREN)
            self.state = 2420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 567453832540335392) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 360915832668553) != 0):
                self.state = 2419
                self.typePathInputs()


            self.state = 2422
            self.match(RustParser.RPAREN)
            self.state = 2425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
            if la_ == 1:
                self.state = 2423
                self.match(RustParser.RARROW)
                self.state = 2424
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathInputsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.Type_Context)
            else:
                return self.getTypedRuleContext(RustParser.Type_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePathInputs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePathInputs" ):
                listener.enterTypePathInputs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePathInputs" ):
                listener.exitTypePathInputs(self)




    def typePathInputs(self):

        localctx = RustParser.TypePathInputsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_typePathInputs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2427
            self.type_()
            self.state = 2432
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,340,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2428
                    self.match(RustParser.COMMA)
                    self.state = 2429
                    self.type_() 
                self.state = 2434
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,340,self._ctx)

            self.state = 2436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 2435
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PUB(self):
            return self.getToken(RustParser.KW_PUB, 0)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def KW_CRATE(self):
            return self.getToken(RustParser.KW_CRATE, 0)

        def KW_SELFVALUE(self):
            return self.getToken(RustParser.KW_SELFVALUE, 0)

        def KW_SUPER(self):
            return self.getToken(RustParser.KW_SUPER, 0)

        def KW_IN(self):
            return self.getToken(RustParser.KW_IN, 0)

        def simplePath(self):
            return self.getTypedRuleContext(RustParser.SimplePathContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)




    def visibility(self):

        localctx = RustParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_visibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2438
            self.match(RustParser.KW_PUB)
            self.state = 2448
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
            if la_ == 1:
                self.state = 2439
                self.match(RustParser.LPAREN)
                self.state = 2445
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [5]:
                    self.state = 2440
                    self.match(RustParser.KW_CRATE)
                    pass
                elif token in [24]:
                    self.state = 2441
                    self.match(RustParser.KW_SELFVALUE)
                    pass
                elif token in [28]:
                    self.state = 2442
                    self.match(RustParser.KW_SUPER)
                    pass
                elif token in [14]:
                    self.state = 2443
                    self.match(RustParser.KW_IN)
                    self.state = 2444
                    self.simplePath()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2447
                self.match(RustParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_KEYWORD_IDENTIFIER(self):
            return self.getToken(RustParser.NON_KEYWORD_IDENTIFIER, 0)

        def RAW_IDENTIFIER(self):
            return self.getToken(RustParser.RAW_IDENTIFIER, 0)

        def KW_MACRORULES(self):
            return self.getToken(RustParser.KW_MACRORULES, 0)

        def getRuleIndex(self):
            return RustParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = RustParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2450
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 450359962737049600) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AS(self):
            return self.getToken(RustParser.KW_AS, 0)

        def KW_BREAK(self):
            return self.getToken(RustParser.KW_BREAK, 0)

        def KW_CONST(self):
            return self.getToken(RustParser.KW_CONST, 0)

        def KW_CONTINUE(self):
            return self.getToken(RustParser.KW_CONTINUE, 0)

        def KW_CRATE(self):
            return self.getToken(RustParser.KW_CRATE, 0)

        def KW_ELSE(self):
            return self.getToken(RustParser.KW_ELSE, 0)

        def KW_ENUM(self):
            return self.getToken(RustParser.KW_ENUM, 0)

        def KW_EXTERN(self):
            return self.getToken(RustParser.KW_EXTERN, 0)

        def KW_FALSE(self):
            return self.getToken(RustParser.KW_FALSE, 0)

        def KW_FN(self):
            return self.getToken(RustParser.KW_FN, 0)

        def KW_FOR(self):
            return self.getToken(RustParser.KW_FOR, 0)

        def KW_IF(self):
            return self.getToken(RustParser.KW_IF, 0)

        def KW_IMPL(self):
            return self.getToken(RustParser.KW_IMPL, 0)

        def KW_IN(self):
            return self.getToken(RustParser.KW_IN, 0)

        def KW_LET(self):
            return self.getToken(RustParser.KW_LET, 0)

        def KW_LOOP(self):
            return self.getToken(RustParser.KW_LOOP, 0)

        def KW_MATCH(self):
            return self.getToken(RustParser.KW_MATCH, 0)

        def KW_MOD(self):
            return self.getToken(RustParser.KW_MOD, 0)

        def KW_MOVE(self):
            return self.getToken(RustParser.KW_MOVE, 0)

        def KW_MUT(self):
            return self.getToken(RustParser.KW_MUT, 0)

        def KW_PUB(self):
            return self.getToken(RustParser.KW_PUB, 0)

        def KW_REF(self):
            return self.getToken(RustParser.KW_REF, 0)

        def KW_RETURN(self):
            return self.getToken(RustParser.KW_RETURN, 0)

        def KW_SELFVALUE(self):
            return self.getToken(RustParser.KW_SELFVALUE, 0)

        def KW_SELFTYPE(self):
            return self.getToken(RustParser.KW_SELFTYPE, 0)

        def KW_STATIC(self):
            return self.getToken(RustParser.KW_STATIC, 0)

        def KW_STRUCT(self):
            return self.getToken(RustParser.KW_STRUCT, 0)

        def KW_SUPER(self):
            return self.getToken(RustParser.KW_SUPER, 0)

        def KW_TRAIT(self):
            return self.getToken(RustParser.KW_TRAIT, 0)

        def KW_TRUE(self):
            return self.getToken(RustParser.KW_TRUE, 0)

        def KW_TYPE(self):
            return self.getToken(RustParser.KW_TYPE, 0)

        def KW_UNSAFE(self):
            return self.getToken(RustParser.KW_UNSAFE, 0)

        def KW_USE(self):
            return self.getToken(RustParser.KW_USE, 0)

        def KW_WHERE(self):
            return self.getToken(RustParser.KW_WHERE, 0)

        def KW_WHILE(self):
            return self.getToken(RustParser.KW_WHILE, 0)

        def KW_ASYNC(self):
            return self.getToken(RustParser.KW_ASYNC, 0)

        def KW_AWAIT(self):
            return self.getToken(RustParser.KW_AWAIT, 0)

        def KW_DYN(self):
            return self.getToken(RustParser.KW_DYN, 0)

        def KW_ABSTRACT(self):
            return self.getToken(RustParser.KW_ABSTRACT, 0)

        def KW_BECOME(self):
            return self.getToken(RustParser.KW_BECOME, 0)

        def KW_BOX(self):
            return self.getToken(RustParser.KW_BOX, 0)

        def KW_DO(self):
            return self.getToken(RustParser.KW_DO, 0)

        def KW_FINAL(self):
            return self.getToken(RustParser.KW_FINAL, 0)

        def KW_MACRO(self):
            return self.getToken(RustParser.KW_MACRO, 0)

        def KW_OVERRIDE(self):
            return self.getToken(RustParser.KW_OVERRIDE, 0)

        def KW_PRIV(self):
            return self.getToken(RustParser.KW_PRIV, 0)

        def KW_TYPEOF(self):
            return self.getToken(RustParser.KW_TYPEOF, 0)

        def KW_UNSIZED(self):
            return self.getToken(RustParser.KW_UNSIZED, 0)

        def KW_VIRTUAL(self):
            return self.getToken(RustParser.KW_VIRTUAL, 0)

        def KW_YIELD(self):
            return self.getToken(RustParser.KW_YIELD, 0)

        def KW_TRY(self):
            return self.getToken(RustParser.KW_TRY, 0)

        def KW_UNION(self):
            return self.getToken(RustParser.KW_UNION, 0)

        def KW_STATICLIFETIME(self):
            return self.getToken(RustParser.KW_STATICLIFETIME, 0)

        def getRuleIndex(self):
            return RustParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = RustParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2452
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 18014398509481982) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroIdentifierLikeTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(RustParser.KeywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(RustParser.IdentifierContext,0)


        def KW_MACRORULES(self):
            return self.getToken(RustParser.KW_MACRORULES, 0)

        def KW_UNDERLINELIFETIME(self):
            return self.getToken(RustParser.KW_UNDERLINELIFETIME, 0)

        def KW_DOLLARCRATE(self):
            return self.getToken(RustParser.KW_DOLLARCRATE, 0)

        def LIFETIME_OR_LABEL(self):
            return self.getToken(RustParser.LIFETIME_OR_LABEL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_macroIdentifierLikeToken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroIdentifierLikeToken" ):
                listener.enterMacroIdentifierLikeToken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroIdentifierLikeToken" ):
                listener.exitMacroIdentifierLikeToken(self)




    def macroIdentifierLikeToken(self):

        localctx = RustParser.MacroIdentifierLikeTokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_macroIdentifierLikeToken)
        try:
            self.state = 2460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2454
                self.keyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2455
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2456
                self.match(RustParser.KW_MACRORULES)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2457
                self.match(RustParser.KW_UNDERLINELIFETIME)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2458
                self.match(RustParser.KW_DOLLARCRATE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2459
                self.match(RustParser.LIFETIME_OR_LABEL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroLiteralTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literalExpression(self):
            return self.getTypedRuleContext(RustParser.LiteralExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroLiteralToken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroLiteralToken" ):
                listener.enterMacroLiteralToken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroLiteralToken" ):
                listener.exitMacroLiteralToken(self)




    def macroLiteralToken(self):

        localctx = RustParser.MacroLiteralTokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_macroLiteralToken)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2462
            self.literalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroPunctuationTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(RustParser.MINUS, 0)

        def SLASH(self):
            return self.getToken(RustParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(RustParser.PERCENT, 0)

        def CARET(self):
            return self.getToken(RustParser.CARET, 0)

        def NOT(self):
            return self.getToken(RustParser.NOT, 0)

        def AND(self):
            return self.getToken(RustParser.AND, 0)

        def OR(self):
            return self.getToken(RustParser.OR, 0)

        def ANDAND(self):
            return self.getToken(RustParser.ANDAND, 0)

        def OROR(self):
            return self.getToken(RustParser.OROR, 0)

        def PLUSEQ(self):
            return self.getToken(RustParser.PLUSEQ, 0)

        def MINUSEQ(self):
            return self.getToken(RustParser.MINUSEQ, 0)

        def STAREQ(self):
            return self.getToken(RustParser.STAREQ, 0)

        def SLASHEQ(self):
            return self.getToken(RustParser.SLASHEQ, 0)

        def PERCENTEQ(self):
            return self.getToken(RustParser.PERCENTEQ, 0)

        def CARETEQ(self):
            return self.getToken(RustParser.CARETEQ, 0)

        def ANDEQ(self):
            return self.getToken(RustParser.ANDEQ, 0)

        def OREQ(self):
            return self.getToken(RustParser.OREQ, 0)

        def SHLEQ(self):
            return self.getToken(RustParser.SHLEQ, 0)

        def SHREQ(self):
            return self.getToken(RustParser.SHREQ, 0)

        def EQ(self):
            return self.getToken(RustParser.EQ, 0)

        def EQEQ(self):
            return self.getToken(RustParser.EQEQ, 0)

        def NE(self):
            return self.getToken(RustParser.NE, 0)

        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def LT(self):
            return self.getToken(RustParser.LT, 0)

        def GE(self):
            return self.getToken(RustParser.GE, 0)

        def LE(self):
            return self.getToken(RustParser.LE, 0)

        def AT(self):
            return self.getToken(RustParser.AT, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def DOT(self):
            return self.getToken(RustParser.DOT, 0)

        def DOTDOT(self):
            return self.getToken(RustParser.DOTDOT, 0)

        def DOTDOTDOT(self):
            return self.getToken(RustParser.DOTDOTDOT, 0)

        def DOTDOTEQ(self):
            return self.getToken(RustParser.DOTDOTEQ, 0)

        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def SEMI(self):
            return self.getToken(RustParser.SEMI, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def PATHSEP(self):
            return self.getToken(RustParser.PATHSEP, 0)

        def RARROW(self):
            return self.getToken(RustParser.RARROW, 0)

        def FATARROW(self):
            return self.getToken(RustParser.FATARROW, 0)

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def getRuleIndex(self):
            return RustParser.RULE_macroPunctuationToken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroPunctuationToken" ):
                listener.enterMacroPunctuationToken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroPunctuationToken" ):
                listener.exitMacroPunctuationToken(self)




    def macroPunctuationToken(self):

        localctx = RustParser.MacroPunctuationTokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_macroPunctuationToken)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2464
            _la = self._input.LA(1)
            if not(((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 1099511627773) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LT)
            else:
                return self.getToken(RustParser.LT, i)

        def getRuleIndex(self):
            return RustParser.RULE_shl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShl" ):
                listener.enterShl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShl" ):
                listener.exitShl(self)




    def shl(self):

        localctx = RustParser.ShlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_shl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2466
            self.match(RustParser.LT)
            self.state = 2467
            if not this.next('<'):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.next('<')")
            self.state = 2468
            self.match(RustParser.LT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.GT)
            else:
                return self.getToken(RustParser.GT, i)

        def getRuleIndex(self):
            return RustParser.RULE_shr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShr" ):
                listener.enterShr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShr" ):
                listener.exitShr(self)




    def shr(self):

        localctx = RustParser.ShrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_shr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2470
            self.match(RustParser.GT)
            self.state = 2471
            if not this.next('>'):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.next('>')")
            self.state = 2472
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[77] = self.expression_sempred
        self._predicates[194] = self.shl_sempred
        self._predicates[195] = self.shr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 37)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 36)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 35)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 34)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 31)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 17)
         

    def shl_sempred(self, localctx:ShlContext, predIndex:int):
            if predIndex == 21:
                return this.next('<')
         

    def shr_sempred(self, localctx:ShrContext, predIndex:int):
            if predIndex == 22:
                return this.next('>')
         




